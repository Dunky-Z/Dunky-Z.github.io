<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如云泊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-23T04:26:51.780Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dominic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决Adobe Photoshop正版升级弹窗</title>
    <link href="http://example.com/2023/12/23/%E8%A7%A3%E5%86%B3Adobe-Photoshop%E6%AD%A3%E7%89%88%E5%8D%87%E7%BA%A7%E5%BC%B9%E7%AA%97/"/>
    <id>http://example.com/2023/12/23/%E8%A7%A3%E5%86%B3Adobe-Photoshop%E6%AD%A3%E7%89%88%E5%8D%87%E7%BA%A7%E5%BC%B9%E7%AA%97/</id>
    <published>2023-12-23T04:08:36.000Z</published>
    <updated>2023-12-23T04:26:51.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>不知什么原因，一直正常使用的Adobe Photoshop 2021突然开始弹窗提示升级，还是日文的（应该是代理到到日本了），可能根据地区不同，弹窗的内容也不同，但是都是提示升级，倒计时10天，不知道十天之后啥情况。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/a8b83c2f3e0916e9b2fd92dc7332dc89.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>Adobe的其他软件同理，比如我在用的Lightroom也是这样，解决方法也是一样的。以下方式基于Windows 11，其他版本的Windows也是类似的。</p><p><strong>如果没有用代理</strong>，可以直接将Photoshop程序禁止联网。可以通过配置Windows的防火墙来实现，具体方法如下：</p><ol><li><p>打开设置搜索“防火墙”，打开Windows防火墙，选择“高级设置”。</p><p> <img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/a38bd63b6c184481c797cd3143e3b21d.png"></p></li><li><p>选择“出站规则”，点击“新建规则”，选择规则类型为“程序”，程序选择为Photoshop的安装目录下的Photoshop.exe，然后选择“阻止连接”，一路下一步，最后命名规则为“禁止Photoshop联网”。<br> <img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/31498beb037fc282838480a3624850cc.png"></p></li></ol><p><strong>如果使用了代理</strong>，防火墙可能会被绕过，Photoshop可能仍然会通过代理访问更新服务器。需要通过配置代理将Photoshop禁止代理。如果不配置，可以在<strong>每次打开Adobe相关软件前关闭代理</strong>，如果配置，这里以Clash for Windows为例，可以通过配置Clash的规则来实现，不用关闭代理。具体方法如下：</p><p>点击“Profiles”，选择自己的订阅，右击选择“Edit”，将以下这些规则添加到配置文件中保存即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- PROCESS-NAME,Lightroom.exe,REJECT</span><br><span class="line">- PROCESS-NAME,lightroom.exe,REJECT</span><br><span class="line">- PROCESS-NAME,Photoshop.exe,REJECT</span><br><span class="line">- PROCESS-NAME,photoshop.exe,REJECT</span><br><span class="line">- PROCESS-NAME,Adobe Lightroom CEF Helper.exe,REJECT</span><br><span class="line">- PROCESS-NAME,AdobeIPCBroker.exe,REJECT</span><br><span class="line">- PROCESS-NAME,dynamiclinkmanager.exe,REJECT</span><br><span class="line">- PROCESS-NAME,dynamiclinkmediaserver.exe,REJECT</span><br></pre></td></tr></table></figure><p>其他程序你可以自己添加，格式为<code>PROCESS-NAME,程序名,REJECT</code>。表示拒绝这些程序访问网络。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;不知什么原因，一直正常使用的Adobe Photoshop 2021突然开始弹窗提示升级，还是日文的（应该是代理到到日本了）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ZWIFT使用Tips</title>
    <link href="http://example.com/2023/12/17/ZWIFT%E4%BD%BF%E7%94%A8Tips/"/>
    <id>http://example.com/2023/12/17/ZWIFT%E4%BD%BF%E7%94%A8Tips/</id>
    <published>2023-12-17T05:24:55.000Z</published>
    <updated>2023-12-18T13:49:42.260Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/0573bf51587d55e549ac5fd4719733b4.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/6fb1f8bb10562bb55eb8b7eddb97a0ce.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="启动后闪退"><a href="#启动后闪退" class="headerlink" title="启动后闪退"></a>启动后闪退</h2><p>将输入法切换为英文模式再重新启动。</p><h2 id="没有其他玩家，只有自己"><a href="#没有其他玩家，只有自己" class="headerlink" title="没有其他玩家，只有自己"></a>没有其他玩家，只有自己</h2><p>挂全局代理重新启动。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/0573bf51587d55e549ac5fd4719733b4.png&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nexus搭建内部镜像</title>
    <link href="http://example.com/2023/12/16/Nexus-%E9%95%9C%E5%83%8F%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2023/12/16/Nexus-%E9%95%9C%E5%83%8F%E4%BB%A3%E7%90%86/</id>
    <published>2023-12-16T04:16:34.000Z</published>
    <updated>2023-12-16T15:54:46.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/srv/nexus/data:/nexus-data</span></span><br></pre></td></tr></table></figure><p>修改/srv/nexus目录的所有者为当前用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R username:username /srv/nexus</span><br></pre></td></tr></table></figure><p>修改data目录有最高权限，否则无法启动成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777 /srv/nexus/data</span><br></pre></td></tr></table></figure><h1 id="配置Nexus"><a href="#配置Nexus" class="headerlink" title="配置Nexus"></a>配置Nexus</h1><h2 id="登录WEB页面"><a href="#登录WEB页面" class="headerlink" title="登录WEB页面"></a>登录WEB页面</h2><p>登录WEB页面，地址为：<a href="http://192.168.1.9:8081。">http://192.168.1.9:8081。</a><br>用户名为：admin，密码通过命令获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> nexus3 cat /nexus-data/admin.password</span><br></pre></td></tr></table></figure><h2 id="创建Blob"><a href="#创建Blob" class="headerlink" title="创建Blob"></a>创建Blob</h2><p>在 Nexus Repository Manager 中，Blob Store（二进制大对象存储）是一个用于存储仓库数据的核心组件。Blob Store 主要用于存储各种二进制文件，例如软件包、依赖库、构建产物等，这些文件通常被称为“blob”。</p><p>Blob Store 的作用包括：</p><ol><li><p><strong>存储二进制文件：</strong> Blob Store 被设计用来安全、可靠地存储二进制文件。这些文件可以是各种形式的构建产物、软件包、依赖库等。Blob Store 是 Nexus 仓库管理系统的核心，它为这些文件提供了一个中央存储位置。</p></li><li><p><strong>支持不同类型的存储后端：</strong> Nexus 支持不同类型的 Blob Store，例如本地文件系统、云存储（如Amazon S3、Google Cloud Storage）等。这使得用户可以根据需求选择不同的存储后端，并根据实际情况进行扩展或迁移。</p></li><li><p><strong>提供存储策略：</strong> Blob Store 允许你定义存储策略，以确定何时以及如何清理或删除不再需要的文件。这对于管理仓库的存储空间非常重要，可以根据策略自动清理不再需要的快照或旧版本。</p></li><li><p><strong>支持代理和缓存：</strong> 在 Maven Repository 的场景下，Blob Store 还可以用于代理远程 Maven 仓库，并缓存远程仓库中的文件。这有助于提高构建性能，减少对远程仓库的依赖。</p></li></ol><p>我们缓存的镜像需要存储为blob，所以需要创建一个Blob store。点击左侧菜单栏的Blob Stores，然后点击Create blob store，选择Type为File，Name填写为dockerhub。</p><h2 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h2><p>在 Nexus Repository Manager 中，有三种主要的仓库类型：Hosted Repository、Proxy Repository、和 Group Repository。每种类型都有不同的作用和用途：</p><ul><li><p>Hosted Repository（托管仓库）:</p><ul><li>作用： 用于存储和管理本地创建的部署（deploy）的二进制文件。这包括你自己或你的团队创建的库，例如 Maven 构件、npm 包、Docker 镜像等。</li><li>使用场景： 当你需要在内部存储和分享自己创建的构建产物时，你可以使用 Hosted Repository。</li></ul></li><li><p>Proxy Repository（代理仓库）:</p><ul><li>作用： 用于代理和缓存远程仓库的二进制文件。当你从远程仓库获取构建依赖时，Proxy Repository 会将这些文件缓存在本地，从而提高构建性能并减少对远程仓库的依赖。</li><li>使用场景： 在构建过程中，你通常会依赖于一些公共的远程仓库，例如 Maven Central、npm registry、Docker Hub等。使用 Proxy Repository 可以有效地管理这些依赖并减少对远程仓库的直接访问。</li></ul></li><li><p>Group Repository（组合仓库）:</p><ul><li>作用： 允许你将多个仓库组合成一个逻辑单元。当你需要在构建中同时使用多个仓库的内容时，Group Repository 可以将这些仓库组合在一起，使它们在应用程序中看起来像一个单一的仓库。</li><li>使用场景： 当你有多个 Proxy Repository 或 Hosted Repository 时，你可以使用 Group Repository 将它们组合在一起。这对于简化构建配置、统一依赖管理等非常有用。</li></ul></li></ul><p>我们一般创建三个仓库，proxy代理公共镜像，hosted保存自己的镜像，group将proxy和hosted组合在一起。我们分别创建三个仓库。</p><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p>点击左侧菜单栏的Repositories，然后点击Create repository，选择Docker (proxy)，按照下图填写：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/65fc511b83db1d0af9a6559da6a80162.png"></p><p>Remote storage 图中填写为<code>https://registry-1.docker.io</code>，这是dockerhub的地址。但是实测会很慢，所以我们使用加速地址<code>https://dockerproxy.com</code>。需要注意修改一下。</p><blockquote><p>还有一些国内镜像源可选，可以参考这个项目。<a href="https://github.com/docker-practice/docker-registry-cn-mirror-test/actions/runs/7228669255">Test Registry · docker-practice/docker-registry-cn-mirror-test@83a4dd4</a></p></blockquote><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/c41a82504deb2a41eab15e4674199445.png"></p><p>Blob store选择为刚刚创建的<code>dockerhub</code>。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/2a4e0d1685e2d3e8a984bc46c0f039d2.png"></p><h3 id="hosted"><a href="#hosted" class="headerlink" title="hosted"></a>hosted</h3><p>hosted比较简单，只需要填个名称就行了，这里填写为<code>docker-hosted</code>。</p><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p>group 需要注意以下：</p><ol><li>HTTP需要单独设置端口号。我们设置与WEB页面不同的端口号，8082即可。</li><li>需要将proxy和hosted都添加到group中，这样才能将两个仓库组合在一起。</li></ol><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/922dcd44e678c2e22df359100fe32d53.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/8c4d65a43860e9b921eafc6898276123.png"></p><h2 id="启用Realms"><a href="#启用Realms" class="headerlink" title="启用Realms"></a>启用Realms</h2><p>这里要在 Security-Realms 里面启用 Docker Bearer Token Realm。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/6dadf22bfabdf994b394e93a5beb6001.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>如果直接使用docker pull拉取镜像，会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull 192.168.1.9:8082/redis</span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">Error response from daemon: Get &quot;https://192.168.1.9:8082/v2/&quot;: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/docker/daemon.json</code>文件，添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;192.168.1.9:8082&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Docker服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>登录Docker Registry：</p><p>需要注意的shi，这里的用户名和密码是Nexus的用户名和密码，不是Docker Hub的用户名和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login 192.168.1.9:8082 -u admin -p admin123</span><br></pre></td></tr></table></figure><p>拉取镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull 192.168.1.9:8082/redis                      </span><br><span class="line"></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from redis</span><br><span class="line">1f7ce2fa46ab: Already exists </span><br><span class="line">4827e9d1e197: Pull complete </span><br><span class="line">5845062cfda9: Pull complete </span><br><span class="line">44d659adcf8b: Pull complete </span><br><span class="line">b6962d83313d: Pull complete </span><br><span class="line">5d29cf86ecab: Pull complete </span><br><span class="line">4f4fb700ef54: Pull complete </span><br><span class="line">3a2d9f90268c: Pull complete </span><br><span class="line">Digest: sha256:249e1bfb9448ae9e76807748f8cb3c5cc73e55441b7b36364c61a7428c9e814c</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 192.168.1.9:8082/redis:latest</span><br><span class="line">192.168.1.9:8082/redis:latest</span><br></pre></td></tr></table></figure><p>可以在首页的Browse Docker中看到镜像已经被缓存了。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/151588f16856a1e6e2d5215d230ed0de.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker-Compose&quot;&gt;&lt;/a&gt;Docker-Compose&lt;/h1&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="Self-Hosted" scheme="http://example.com/categories/Self-Hosted/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
    <category term="Nexus" scheme="http://example.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Tunasync 搭建私有镜像站</title>
    <link href="http://example.com/2023/12/14/Tunasync%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    <id>http://example.com/2023/12/14/Tunasync%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E7%AB%99/</id>
    <published>2023-12-14T06:15:54.000Z</published>
    <updated>2023-12-18T13:50:07.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tunasync-项目简介"><a href="#Tunasync-项目简介" class="headerlink" title="Tunasync 项目简介"></a>Tunasync 项目简介</h1><p>Tunasync 是一个开源的镜像站点镜像工具，可以帮助你快速搭建一个镜像站点，也可以帮助你快速的同步镜像站点的镜像。我们所熟知的清华大学镜像站就是使用 Tunasync 来同步镜像的。</p><h1 id="准备-workspace"><a href="#准备-workspace" class="headerlink" title="准备 workspace"></a>准备 workspace</h1><p>创建目录用于存放 Tunasync 的程序、配置文件和数据库文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/username/tunasync</span><br><span class="line">mkdir /home/username/tunasync/conf</span><br><span class="line">mkdir /home/username/tunasync/db</span><br></pre></td></tr></table></figure><p>创建目录用于存放镜像文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /srv/mirrors</span><br></pre></td></tr></table></figure><p>srv 目录需要 root 权限，将 mirrors 目录的所有者改为当前用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R username:username /srv/mirrors</span><br></pre></td></tr></table></figure><h1 id="下载-Tunasync"><a href="#下载-Tunasync" class="headerlink" title="下载 Tunasync"></a>下载 Tunasync</h1><p>可以从 <a href="https://github.com/tuna/tunasync">Tunasync 项目</a>的 Github releases 编译好的程序直接使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/username/tunasync</span><br><span class="line">wget https://github.com/tuna/tunasync/releases/download/v0.8.0/tunasync-linux-amd64-bin.tar.gz</span><br><span class="line">tar -zxvf tunasync-linux-amd64-bin.tar.gz</span><br></pre></td></tr></table></figure><h1 id="配置-Tunasync"><a href="#配置-Tunasync" class="headerlink" title="配置 Tunasync"></a>配置 Tunasync</h1><h2 id="Manager-配置"><a href="#Manager-配置" class="headerlink" title="Manager 配置"></a>Manager 配置</h2><p>创建配置文件<code>/home/username/tunasync/conf/manager.conf</code>，并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">debug = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[server]</span><br><span class="line">addr = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = 12345</span><br><span class="line">ssl_cert = <span class="string">&quot;&quot;</span></span><br><span class="line">ssl_key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[files]</span><br><span class="line">db_type = <span class="string">&quot;bolt&quot;</span></span><br><span class="line">db_file = <span class="string">&quot;/home/username/tunasync/db/manager.db&quot;</span></span><br><span class="line">ca_cert = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Worker-配置"><a href="#Worker-配置" class="headerlink" title="Worker 配置"></a>Worker 配置</h2><p>创建配置文件<code>/home/username/tunasync/conf/worker-openeuler.conf</code>，并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">name = <span class="string">&quot;openeuler_worker&quot;</span></span><br><span class="line">log_dir = <span class="string">&quot;/srv/mirrors/log/tunasync/&#123;&#123;.Name&#125;&#125;&quot;</span></span><br><span class="line">mirror_dir = <span class="string">&quot;/srv/mirrors&quot;</span></span><br><span class="line">concurrent = 10</span><br><span class="line">interval = 1440</span><br><span class="line"></span><br><span class="line">[manager]</span><br><span class="line">api_base = <span class="string">&quot;http://localhost:12345&quot;</span></span><br><span class="line">token = <span class="string">&quot;some_token&quot;</span></span><br><span class="line">ca_cert = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[cgroup]</span><br><span class="line"><span class="built_in">enable</span> = <span class="literal">false</span></span><br><span class="line">base_path = <span class="string">&quot;/sys/fs/cgroup&quot;</span></span><br><span class="line">group = <span class="string">&quot;tunasync&quot;</span></span><br><span class="line"></span><br><span class="line">[server]</span><br><span class="line">hostname = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">listen_addr = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">listen_port = 16010</span><br><span class="line">ssl_cert = <span class="string">&quot;&quot;</span></span><br><span class="line">ssl_key = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[[mirrors]]</span><br><span class="line">name = <span class="string">&quot;centos&quot;</span></span><br><span class="line">provider = <span class="string">&quot;rsync&quot;</span></span><br><span class="line">upstream = <span class="string">&quot;rsync://mirrors.tuna.tsinghua.edu.cn/openeuler/&quot;</span></span><br><span class="line">use_ipv6 = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="启动-Tunasync"><a href="#启动-Tunasync" class="headerlink" title="启动 Tunasync"></a>启动 Tunasync</h1><h2 id="启动-Manager"><a href="#启动-Manager" class="headerlink" title="启动 Manager"></a>启动 Manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/username/tunasync</span><br><span class="line">./tunasync manager -c conf/manager.conf &gt;&gt; /srv/mirrors/<span class="built_in">log</span>/plog/manager.log &amp;</span><br></pre></td></tr></table></figure><h2 id="启动-Worker"><a href="#启动-Worker" class="headerlink" title="启动 Worker"></a>启动 Worker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/username/tunasync</span><br><span class="line">./tunasync worker -c conf/worker-openeuler.conf &gt;&gt; /srv/mirrors/<span class="built_in">log</span>/plog/worker-openeuler.log &amp;</span><br></pre></td></tr></table></figure><p>通常可能同步不止一个镜像站点，可以创建多个 Worker 配置文件，然后启动多个 Worker。</p><h1 id="创建-web-服务"><a href="#创建-web-服务" class="headerlink" title="创建 web 服务"></a>创建 web 服务</h1><ol><li><p><strong>安装 Apache2：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure></li><li><p><strong>修改配置文件：</strong></p><p> Ubuntu 中的 Apache2 主要配置文件是 <code>/etc/apache2/apache2.conf</code>。可以在此文件中进行全局配置，也可以使用专门的配置文件，例如 <code>/etc/apache2/sites-available/your-site.conf</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p> 在 <code>apache2.conf</code> 文件中，添加以下行，设置 <code>DocumentRoot</code> 和目录访问权限：</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /mirrors</span><br><span class="line"></span><br><span class="line"><span class="section">&lt;Directory <span class="string">&quot;/mirrors&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure><p> 请确保将 <code>&lt;Directory&gt;</code> 部分添加到正确的位置。可以在文件中找到 <code>&lt;Directory /var/www/&gt;</code> 部分，然后在该部分下添加配置。</p></li><li><p><strong>重新启动 Apache2 服务：</strong></p><p> 在进行配置更改后，需要重新启动 Apache2 服务以使更改生效：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></li><li><p><strong>补充文件：</strong></p><p> 将 <code>index.html</code> 文件和其他需要的文件添加到 <code>/srv/mirrors</code> 目录中。</p></li><li><p><strong>测试：</strong></p><p> 打开 Web 浏览器，访问 <code>http://your-server-ip</code> 或 <code>http://localhost</code>，应该能够看到 <code>/srv/mirrors</code> 目录中的文件。</p></li><li><p>如打不开，需要开启防火墙</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw allow https</span><br></pre></td></tr></table></figure></li><li><p>修改 Web 服务端口</p><ol><li><p><strong>编辑 Apache2 配置文件：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apache2/ports.conf</span><br></pre></td></tr></table></figure></li><li><p>**在文件中找到 <strong>​</strong><code>Listen</code><strong>​ ** 行，修改端口：</strong></p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">Listen</span></span> <span class="number">2081</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编辑虚拟主机配置（如果有）：</strong></p><p> 如果你有虚拟主机配置文件（通常在 <code>/etc/apache2/sites-available/</code> 中），确保其中的 <code>&lt;VirtualHost&gt;</code> 部分中的端口也被修改为 2081。</p></li><li><p><strong>保存并退出配置文件。</strong></p></li><li><p><strong>重启 Apache 服务：</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="打开防火墙端口"><a href="#打开防火墙端口" class="headerlink" title="打开防火墙端口"></a>打开防火墙端口</h3><pre><code>1. **打开 2081 端口：**    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 2081</span><br></pre></td></tr></table></figure>2. **检查配置：**    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>    确保 2081 端口已经正确添加。3. **重启防火墙（可选）：**    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure>    或者    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart ufw</span><br></pre></td></tr></table></figure>这样，你就将 Apache2 Web 服务的端口修改为 2081，并且只开放了 2081 端口。确保修改了防火墙规则后，仍能够通过新的端口访问你的网站。</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tunasync-项目简介&quot;&gt;&lt;a href=&quot;#Tunasync-项目简介&quot; class=&quot;headerlink&quot; title=&quot;Tunasync 项目简介&quot;&gt;&lt;/a&gt;Tunasync 项目简介&lt;/h1&gt;&lt;p&gt;Tunasync 是一个开源的镜像站点镜像工具，可以</summary>
      
    
    
    
    <category term="Self-Hosted" scheme="http://example.com/categories/Self-Hosted/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
    <category term="Tunasync" scheme="http://example.com/tags/Tunasync/"/>
    
  </entry>
  
  <entry>
    <title>VSCode Linux内核源码阅读环境</title>
    <link href="http://example.com/2023/12/14/VSCode-Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/12/14/VSCode-Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</id>
    <published>2023-12-14T02:02:32.000Z</published>
    <updated>2023-12-14T02:35:33.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Clangd插件"><a href="#安装Clangd插件" class="headerlink" title="安装Clangd插件"></a>安装Clangd插件</h2><p>在VSCode中，你可以通过以下步骤安装Clangd插件：</p><ul><li>打开VSCode；</li><li>点击左侧的插件图标（Ctrl+Shift+X）；</li><li>搜索“Clangd”插件；</li><li>点击“安装”按钮。</li></ul><h2 id="生成compile-commands-json"><a href="#生成compile-commands-json" class="headerlink" title="生成compile_commands.json"></a>生成compile_commands.json</h2><p>对于make项目来说，常规来讲，可以使用Bear来对源码生成compile_commands.json。首先安装Bear：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bear</span><br></pre></td></tr></table></figure><p>然后在项目根目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bear make -j32</span><br></pre></td></tr></table></figure><p>编译完成后，会在项目根目录下生成compile_commands.json文件。</p><blockquote><p>对于CMAKE项目来说，可以在CMakeLists.txt中添加以下语句，然后重新编译项目即可生成compile_commands.json文件：<br>set(CMAKE_EXPORT_COMPILE_COMMANDS True)</p></blockquote><h2 id="配置Clangd插件"><a href="#配置Clangd插件" class="headerlink" title="配置Clangd插件"></a>配置Clangd插件</h2><p>进入到项目目录下，下载配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/Dunky-Z/dot-vscode.git .vscode</span><br></pre></td></tr></table></figure><p>主要修改<code>--compile-commands-dir</code>参数，将其修改为自己的路径。</p><p>随便打开内核源码文件，clangd将会自动生成索引，并将索引文件.idx保存在项目根目录下的.cache目录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux-5.4</span><br><span class="line">├── .cache</span><br><span class="line">│   └── clangd</span><br><span class="line">├── .config</span><br><span class="line">├── .git</span><br></pre></td></tr></table></figure><p>如果生成了索引文件，那么说明配置成功，可以打开源码文件看看是否能够正常跳转。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Clangd插件&quot;&gt;&lt;a href=&quot;#安装Clangd插件&quot; class=&quot;headerlink&quot; title=&quot;安装Clangd插件&quot;&gt;&lt;/a&gt;安装Clangd插件&lt;/h2&gt;&lt;p&gt;在VSCode中，你可以通过以下步骤安装Clangd插件：&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>嵌入式Linux驱动开发环境搭建踩坑</title>
    <link href="http://example.com/2023/12/13/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/"/>
    <id>http://example.com/2023/12/13/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/</id>
    <published>2023-12-13T14:59:23.000Z</published>
    <updated>2023-12-13T15:12:17.566Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="https://pan.baidu.com/s/1Gnh9G8a05LSgHYlohyl93Q?pwd=root#list/path=%2F">文档资料百度网盘</a>下载配套资料，学习手册目录中有嵌入式Linux应用开发完全手册V5.1_STM32MP157_Pro开发板.pdf，里面有详细的开发环境搭建步骤，但是在搭建过程中还是遇到了一些问题，记录如下：</p><h2 id="ModuleNotFoundError-No-module-named-‘requests’"><a href="#ModuleNotFoundError-No-module-named-‘requests’" class="headerlink" title="ModuleNotFoundError: No module named ‘requests’"></a>ModuleNotFoundError: No module named ‘requests’</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">../repo/repo init -u https://gitee.com/weidongshan/manifests.git -b linux-sdk -m stm32mp1/100ask_stm32mp157_pro_release-v2.0.xml --no-repo-verify</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/nic/develop/repo/main.py&quot;</span>, line 56, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from subcmds.version import Version</span><br><span class="line">  File <span class="string">&quot;/home/nic/develop/repo/subcmds/__init__.py&quot;</span>, line 35, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    mod = __import__(__name__,</span><br><span class="line">  File <span class="string">&quot;/home/nic/develop/repo/subcmds/selfupdate.py&quot;</span>, line 22, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from subcmds.sync import _PostRepoUpgrade</span><br><span class="line">  File <span class="string">&quot;/home/nic/develop/repo/subcmds/sync.py&quot;</span>, line 74, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from project import Project</span><br><span class="line">  File <span class="string">&quot;/home/nic/develop/repo/project.py&quot;</span>, line 33, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import requests</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;requests&#x27;</span></span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install requests</span><br></pre></td></tr></table></figure><h2 id="ModuleNotFoundError-No-module-named-‘formatter’"><a href="#ModuleNotFoundError-No-module-named-‘formatter’" class="headerlink" title="ModuleNotFoundError: No module named ‘formatter’"></a>ModuleNotFoundError: No module named ‘formatter’</h2><p>formatter已经在python3.4标记成废弃接口，在python3.10已经正式删除，并且其依赖的cStringIO也已经删除。所以不能简单的安装formatter模块，可以通过两种方式解决：</p><h3 id="方法一：降低python版本到3-9以下"><a href="#方法一：降低python版本到3-9以下" class="headerlink" title="方法一：降低python版本到3.9以下"></a>方法一：降低python版本到3.9以下</h3><ol><li>添加 ppa 源，此源可安装多个 python 版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 python3.9</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3.9</span><br></pre></td></tr></table></figure><ol start="4"><li>建立 python 的组,并添加 Python3.9 的可选项，优先级为 1</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1</span><br></pre></td></tr></table></figure><ol start="5"><li>验证当前 python 是否是 3.9 版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><ol start="6"><li>如果不是，用以下命令手动配置一下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><h3 id="方法二：修改repo源码"><a href="#方法二：修改repo源码" class="headerlink" title="方法二：修改repo源码"></a>方法二：修改repo源码</h3><p>将<code>repo/repo/subcmds/help.py</code>文件替换为如下内容：</p><blockquote><p>也可以参考<a href="https://gerrit-review.googlesource.com/c/git-repo/+/303282">Google修复后的代码</a>，根据diff修改文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright (C) 2008 The Android Open Source Project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> subcmds <span class="keyword">import</span> all_commands</span><br><span class="line"><span class="keyword">from</span> color <span class="keyword">import</span> Coloring</span><br><span class="line"><span class="keyword">from</span> command <span class="keyword">import</span> PagedCommand, MirrorSafeCommand, GitcAvailableCommand, GitcClientCommand</span><br><span class="line"><span class="keyword">import</span> gitc_utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Help</span>(<span class="params">PagedCommand, MirrorSafeCommand</span>):</span></span><br><span class="line">  common = <span class="literal">False</span></span><br><span class="line">  helpSummary = <span class="string">&quot;Display detailed help on a command&quot;</span></span><br><span class="line">  helpUsage = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">%prog [--all|command]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">  helpDescription = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Displays detailed usage information about a command.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_PrintCommands</span>(<span class="params">self, commandNames</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper to display |commandNames| summaries.&quot;&quot;&quot;</span></span><br><span class="line">    maxlen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> commandNames:</span><br><span class="line">      maxlen = <span class="built_in">max</span>(maxlen, <span class="built_in">len</span>(name))</span><br><span class="line">    fmt = <span class="string">&#x27;  %%-%ds  %%s&#x27;</span> % maxlen</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> commandNames:</span><br><span class="line">      command = all_commands[name]()</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        summary = command.helpSummary.strip()</span><br><span class="line">      <span class="keyword">except</span> AttributeError:</span><br><span class="line">        summary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="built_in">print</span>(fmt % (name, summary))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_PrintAllCommands</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;usage: repo COMMAND [ARGS]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The complete list of recognized repo commands are:&#x27;</span>)</span><br><span class="line">    commandNames = <span class="built_in">list</span>(<span class="built_in">sorted</span>(all_commands))</span><br><span class="line">    self._PrintCommands(commandNames)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;See &#x27;repo help &lt;command&gt;&#x27; for more information on a &quot;</span></span><br><span class="line">          <span class="string">&#x27;specific command.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_PrintCommonCommands</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;usage: repo COMMAND [ARGS]&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;The most commonly used repo commands are:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gitc_supported</span>(<span class="params">cmd</span>):</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(cmd, GitcAvailableCommand) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(cmd, GitcClientCommand):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">if</span> self.manifest.isGitcClient:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd, GitcClientCommand):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="keyword">if</span> gitc_utils.get_gitc_manifest_dir():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    commandNames = <span class="built_in">list</span>(<span class="built_in">sorted</span>([name</span><br><span class="line">                                <span class="keyword">for</span> name, command <span class="keyword">in</span> all_commands.items()</span><br><span class="line">                                <span class="keyword">if</span> command.common <span class="keyword">and</span> gitc_supported(command)]))</span><br><span class="line">    self._PrintCommands(commandNames)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&quot;See &#x27;repo help &lt;command&gt;&#x27; for more information on a specific command.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;See &#x27;repo help --all&#x27; for a complete list of recognized commands.&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_PrintCommandHelp</span>(<span class="params">self, cmd, header_prefix=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">_Out</span>(<span class="params">Coloring</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, gc</span>):</span></span><br><span class="line">        Coloring.__init__(self, gc, <span class="string">&#x27;help&#x27;</span>)</span><br><span class="line">        self.heading = self.printer(<span class="string">&#x27;heading&#x27;</span>, attr=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self._first = <span class="literal">True</span></span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">_PrintSection</span>(<span class="params">self, heading, bodyAttr</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">          body = <span class="built_in">getattr</span>(cmd, bodyAttr)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> body == <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> body <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._first:</span><br><span class="line">          self.nl()</span><br><span class="line">        self._first = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        self.heading(<span class="string">&#x27;%s%s&#x27;</span>, header_prefix, heading)</span><br><span class="line">        self.nl()</span><br><span class="line">        self.nl()</span><br><span class="line"></span><br><span class="line">        me = <span class="string">&#x27;repo %s&#x27;</span> % cmd.NAME</span><br><span class="line">        body = body.strip()</span><br><span class="line">        body = body.replace(<span class="string">&#x27;%prog&#x27;</span>, me)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Extract the title, but skip any trailing &#123;#anchors&#125;.</span></span><br><span class="line">        asciidoc_hdr = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\n?#+ ([^&#123;]+)(\&#123;#.+\&#125;)?$&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> para <span class="keyword">in</span> body.split(<span class="string">&quot;\n\n&quot;</span>):</span><br><span class="line">          <span class="keyword">if</span> para.startswith(<span class="string">&#x27; &#x27;</span>):</span><br><span class="line">            self.write(<span class="string">&#x27;%s&#x27;</span>, para)</span><br><span class="line">            self.nl()</span><br><span class="line">            self.nl()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">          m = asciidoc_hdr.match(para)</span><br><span class="line">          <span class="keyword">if</span> m:</span><br><span class="line">            self.heading(<span class="string">&#x27;%s%s&#x27;</span>, header_prefix, m.group(<span class="number">1</span>))</span><br><span class="line">            self.nl()</span><br><span class="line">            self.nl()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">          lines = textwrap.wrap(para.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>), width=<span class="number">80</span>,</span><br><span class="line">                                break_long_words=<span class="literal">False</span>, break_on_hyphens=<span class="literal">False</span>)</span><br><span class="line">          <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            self.write(<span class="string">&#x27;%s&#x27;</span>, line)</span><br><span class="line">            self.nl()</span><br><span class="line">          self.nl()</span><br><span class="line"></span><br><span class="line">    out = _Out(self.manifest.globalConfig)</span><br><span class="line">    out._PrintSection(<span class="string">&#x27;Summary&#x27;</span>, <span class="string">&#x27;helpSummary&#x27;</span>)</span><br><span class="line">    cmd.OptionParser.print_help()</span><br><span class="line">    out._PrintSection(<span class="string">&#x27;Description&#x27;</span>, <span class="string">&#x27;helpDescription&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_PrintAllCommandHelp</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(all_commands):</span><br><span class="line">      cmd = all_commands[name]()</span><br><span class="line">      cmd.manifest = self.manifest</span><br><span class="line">      self._PrintCommandHelp(cmd, header_prefix=<span class="string">&#x27;[%s] &#x27;</span> % (name,))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_Options</span>(<span class="params">self, p</span>):</span></span><br><span class="line">    p.add_option(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--all&#x27;</span>,</span><br><span class="line">                 dest=<span class="string">&#x27;show_all&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                 <span class="built_in">help</span>=<span class="string">&#x27;show the complete list of commands&#x27;</span>)</span><br><span class="line">    p.add_option(<span class="string">&#x27;--help-all&#x27;</span>,</span><br><span class="line">                 dest=<span class="string">&#x27;show_all_help&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                 <span class="built_in">help</span>=<span class="string">&#x27;show the --help of all commands&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Execute</span>(<span class="params">self, opt, args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">if</span> opt.show_all_help:</span><br><span class="line">        self._PrintAllCommandHelp()</span><br><span class="line">      <span class="keyword">elif</span> opt.show_all:</span><br><span class="line">        self._PrintAllCommands()</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        self._PrintCommonCommands()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(args) == <span class="number">1</span>:</span><br><span class="line">      name = args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        cmd = all_commands[name]()</span><br><span class="line">      <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;repo: &#x27;%s&#x27; is not a repo command.&quot;</span> % name, file=sys.stderr)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      cmd.manifest = self.manifest</span><br><span class="line">      self._PrintCommandHelp(cmd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      self._PrintCommandHelp(self)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过&lt;a href=&quot;https://pan.baidu.com/s/1Gnh9G8a05LSgHYlohyl93Q?pwd=root#list/path=%2F&quot;&gt;文档资料百度网盘&lt;/a&gt;下载配套资料，学习手册目录中有嵌入式Linux应用开发完全手册V5.1_STM32M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决Ubuntu更新源报错Clearsigned file isnt valid, got NOSPLIT</title>
    <link href="http://example.com/2023/11/19/%E8%A7%A3%E5%86%B3Ubuntu%E6%9B%B4%E6%96%B0%E6%BA%90%E6%8A%A5%E9%94%99Clearsigned-file-isn-t-valid-got-NOSPLIT/"/>
    <id>http://example.com/2023/11/19/%E8%A7%A3%E5%86%B3Ubuntu%E6%9B%B4%E6%96%B0%E6%BA%90%E6%8A%A5%E9%94%99Clearsigned-file-isn-t-valid-got-NOSPLIT/</id>
    <published>2023-11-19T13:18:09.000Z</published>
    <updated>2023-11-19T13:23:00.588Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>在更新源时报错 Clearsigned file isn’t valid, got ‘NOSPLIT’ (does the network require authentication?)。</p><p>换中科大的源解决，其余源无法解决。</p><p>如要用于其他版本，把 jammy 换成其他版本代号即可: 22.04：jammy；20.04：focal；18.04：bionic；16.04：xenial；14.04：trusty。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码仓库，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Gitea部署个人代码仓库</title>
    <link href="http://example.com/2023/11/18/%E4%BD%BF%E7%94%A8Gitea%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    <id>http://example.com/2023/11/18/%E4%BD%BF%E7%94%A8Gitea%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/</id>
    <published>2023-11-18T10:17:42.000Z</published>
    <updated>2023-11-18T10:33:25.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker-compose 部署"></a>docker-compose 部署</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">br-net-gitea</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./postgresql:/var/lib/postgresql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:1.20.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitea</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_UID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_GID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA__database__DB_TYPE=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA__database__HOST=192.168.1.9:5432</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA__database__NAME=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA__database__USER=user</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA__database__PASSWD=123456</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">br-net-gitea</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/git/.ssh/:/data/git/.ssh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:2222:22&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">act_runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/act_runner:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_INSTANCE_URL=http://192.168.1.9:3000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_RUNNER_REGISTRATION_TOKEN=Qw5Qf4A1bTENfIOQlc1NSNyFYMLp7TAtSujb5ihF</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_RUNNER_NAME=docker_runner</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./act_runner/act_data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./act_runner/act_cache:/root/.cache</span></span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="首次登录web时没有创建管理员账号，如何登录"><a href="#首次登录web时没有创建管理员账号，如何登录" class="headerlink" title="首次登录web时没有创建管理员账号，如何登录"></a>首次登录web时没有创建管理员账号，如何登录</h2><p>打开Gitea网页注册的第一个账号就是管理员账号。无需特殊设置。也无需找回密码。</p><h2 id="从Github导入仓库时报错：从不允许的主机导入"><a href="#从Github导入仓库时报错：从不允许的主机导入" class="headerlink" title="从Github导入仓库时报错：从不允许的主机导入"></a>从Github导入仓库时报错：从不允许的主机导入</h2><p>打开配置文件<code>gitea/conf/app.ini</code>，修改以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[migrations]</span><br><span class="line">ALLOW_LOCALNETWORKS    = true</span><br><span class="line">ALLOWED_DOMAINS = 127.0.0.1,192.168.31.100,github.com,*.github.com</span><br><span class="line">IMPORT_LOCAL_PATHS = true  ;; 导入本地仓库开关，false：设置为false，防止所有用户（包括admin）导入服务器上的本地路径。</span><br></pre></td></tr></table></figure><p><code>docker-compose restart gitea</code>重启容器。</p><blockquote><p>以下修改配置文件后，需要重启容器才能生效，不再赘述。</p></blockquote><h2 id="如何开启软件包"><a href="#如何开启软件包" class="headerlink" title="如何开启软件包"></a>如何开启软件包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[packages]</span><br><span class="line">ENABLED = true</span><br></pre></td></tr></table></figure><h2 id="开启action"><a href="#开启action" class="headerlink" title="开启action"></a>开启action</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[actions]</span><br><span class="line">ENABLED=true</span><br></pre></td></tr></table></figure><h2 id="error-response-from-daemon-server-gave-http-response-to-https-client"><a href="#error-response-from-daemon-server-gave-http-response-to-https-client" class="headerlink" title="error response from daemon server gave http response to https client"></a>error response from daemon server gave http response to https client</h2><p>docker login 报错</p><p>配置/etc/docker/daemon.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;insecure-registries&quot;: [</span><br><span class="line">    &quot;192.168.1.9:2010&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="如何上传docker镜像到gitea制品库"><a href="#如何上传docker镜像到gitea制品库" class="headerlink" title="如何上传docker镜像到gitea制品库"></a>如何上传docker镜像到gitea制品库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 登录你的镜像仓库，也就是你的 Gitea 服务器地址</span><br><span class="line">docker login 192.168.1.9:2010</span><br><span class="line"></span><br><span class="line"># 从官方仓库拉取一个 nginx:latest 镜像，并改名</span><br><span class="line">docker pull nginx:latest</span><br><span class="line">docker tag nginx:latest 192.168.1.9:2010/zhangsan/nginx:latest</span><br><span class="line"></span><br><span class="line"># 推送镜像到 Gitea 服务器</span><br><span class="line">docker push 192.168.1.9:2010/zhangsan/nginx:latest</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-部署&quot;&gt;&lt;a href=&quot;#docker-compose-部署&quot; class=&quot;headerlink&quot; title=&quot;docker-compose 部署&quot;&gt;&lt;/a&gt;docker-compose 部署&lt;/h1&gt;&lt;figure class</summary>
      
    
    
    
    <category term="Self-Hosted" scheme="http://example.com/categories/Self-Hosted/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="Gitea" scheme="http://example.com/tags/Gitea/"/>
    
    <category term="Self-Hosted" scheme="http://example.com/tags/Self-Hosted/"/>
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>ocrmypdf 让 PDF 可搜索</title>
    <link href="http://example.com/2023/09/19/ocrmypdf-%E8%AE%A9PDF%E5%8F%AF%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2023/09/19/ocrmypdf-%E8%AE%A9PDF%E5%8F%AF%E6%90%9C%E7%B4%A2/</id>
    <published>2023-09-19T11:51:18.000Z</published>
    <updated>2023-09-19T14:51:10.376Z</updated>
    
    <content type="html"><![CDATA[<p>买的一些课程配套资料都是 PDF 格式的，为了防止盗版都事先用的图片转成的 PDF，这样 PDF 里的内容既没法复制也没法搜索，在查找资料里的关键词的时候就很不方便，所以就想着把这些 PDF 转成可搜索的 PDF。找到了一款工具叫做 ocrmypdf，可以把 PDF 转成可搜索的 PDF，而且还支持中文，这里记录一下使用方法。详细使用文档可以参考官方文档<a href="https://ocrmypdf.readthedocs.io/en/latest/installation.html"> OCRmyPDF documentation</a>。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ocrmypdf</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="指定-OCR-的语言"><a href="#指定-OCR-的语言" class="headerlink" title="指定 OCR 的语言"></a>指定 OCR 的语言</h2><p>安装语言包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tesseract-ocr-chi-sim</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tesseract --list-langs</span><br><span class="line">List of available languages (3):</span><br><span class="line">chi_sim</span><br><span class="line">eng</span><br><span class="line">osd</span><br></pre></td></tr></table></figure><p>注意参数 <code>-l</code> 后面的语言包名称是下划线，而不是短横线。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ocrmypdf -l chi_sim input.pdf output.pdf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">$  ocrmypdf -l chi_sim  --redo-ocr  input.pdf output.pdf</span><br><span class="line">Scanning contents: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████| 752/752 [00:14&lt;00:00, 51.36page/s]</span><br><span class="line">Start processing 24 pages concurrently</span><br><span class="line">   33 redoing OCR                                                                                                                                                 </span><br><span class="line">   26 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">   54 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">   88 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  119 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  203 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  256 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  265 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  347 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  376 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  383 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  386 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  402 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  404 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  403 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  412 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  415 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  410 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  439 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  519 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  526 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  587 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  591 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  595 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  607 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  644 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  661 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  682 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  720 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">  742 [tesseract] lots of diacritics - possibly poor OCR                                                                                                          </span><br><span class="line">OCR: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 752.0/752.0 [03:41&lt;00:00,  3.40page/s]</span><br><span class="line">Postprocessing...</span><br><span class="line">Some input metadata could not be copied because it is not permitted <span class="keyword">in</span> PDF/A. You may wish to examine the output PDF<span class="string">&#x27;s XMP metadata.                              </span></span><br><span class="line"><span class="string">PDF/A conversion: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 752/752 [01:09&lt;00:00, 10.80page/s]</span></span><br><span class="line"><span class="string">Recompressing JPEGs: 0image [00:00, ?image/s]</span></span><br><span class="line"><span class="string">Deflating JPEGs: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████| 756/756 [00:00&lt;00:00, 920.21image/s]</span></span><br><span class="line"><span class="string">JBIG2: 0item [00:00, ?item/s]</span></span><br><span class="line"><span class="string">Optimize ratio: 1.20 savings: 17.0%</span></span><br><span class="line"><span class="string">Output file is okay but is not PDF/A (seems to be No PDF/A metadata in XMP)</span></span><br></pre></td></tr></table></figure><p>转换的结果还不错，页面排版不会改变，保持原样，但是搜索文字时可能需要用空格分开。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;买的一些课程配套资料都是 PDF 格式的，为了防止盗版都事先用的图片转成的 PDF，这样 PDF 里的内容既没法复制也没法搜索，在查找资料里的关键词的时候就很不方便，所以就想着把这些 PDF 转成可搜索的 PDF。找到了一款工具叫做 ocrmypdf，可以把 PDF 转成可</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="Efficiency" scheme="http://example.com/tags/Efficiency/"/>
    
    <category term="ocrmypdf" scheme="http://example.com/tags/ocrmypdf/"/>
    
    <category term="OCR" scheme="http://example.com/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>uCore-实验第 0 章 - 实验环境搭建</title>
    <link href="http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC0%E7%AB%A0-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC0%E7%AB%A0-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2023-09-08T02:46:20.000Z</published>
    <updated>2023-08-28T02:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本次实验是清华大学操作系统课程的课程实验，实验内容是基于 RISC-V 架构的 uCore 操作系统。本次实验的目的是搭建实验环境，为后续实验做准备。指导书参考<a href="https://learningos.github.io/uCore-Tutorial-Guide-2023S/index.html">uCore-Tutorial-Guide-2023S 文档</a>。本系列文章内容主要是指导书的补充以及我在实验过程的一些理解。</p></blockquote><p>本章没有什么需要特别说明的，指导手册十分详细，按照指导手册的步骤一步步来就可以了。因为平时也在用 WSL2 开发，所以配置十分顺利，没有遇到什么问题。这篇文章就当占坑了，如果后续有什么需要补充的再来更新。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本次实验是清华大学操作系统课程的课程实验，实验内容是基于 RISC-V 架构的 uCore 操作系统。本次实验的目的是搭建实验环境，为后续实验做准备。指导书参考&lt;a href=&quot;https://learningos.github.io/uCore-</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>uCore-实验第 1 章 - 应用程序与基本执行环境</title>
    <link href="http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC1%E7%AB%A0-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC1%E7%AB%A0-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/</id>
    <published>2023-09-08T02:45:14.000Z</published>
    <updated>2023-08-28T06:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解系统调用"><a href="#了解系统调用" class="headerlink" title="了解系统调用"></a>了解系统调用</h1><p>操作系统的系统调用（syscall）是操作系统提供给应用程序使用的一种接口。它允许应用程序通过向操作系统发送请求，来执行一些必须由操作系统来完成的任务，例如读取文件、创建进程、分配内存等。</p><p>通俗地说，可以把操作系统看作一个巨大的服务员，而应用程序就像是顾客。应用程序不能直接访问硬件或执行特权操作，因为这样可能会导致系统不稳定或不安全。所以，应用程序需要通过系统调用来与操作系统进行交互，请求操作系统代表它完成某些任务。</p><p>当应用程序需要操作系统执行特定的功能时，它会调用适当的系统调用函数，并传递参数给它。然后操作系统会接收到这个请求，并根据请求的类型和参数来执行相应的操作。完成后，操作系统会将执行结果返回给应用程序。</p><p><strong>在 RISC-V 架构中</strong>，系统调用是通过使用特定的指令来实现的。具体来说，RISC-V 架构提供了一个称为 <code>ecall</code>（environment call）的指令来触发系统调用。</p><p>要使用 syscall，在 RISC-V 汇编代码中可以通过以下步骤来完成：</p><ol><li>将系统调用编号（syscall number）放入寄存器 a7 中，该编号对应于所需的系统调用功能。</li><li>将系统调用所需的参数放入其他相应的寄存器中。例如，参数传递给文件读取系统调用可能需要将文件描述符放入 a0 寄存器，缓冲区地址放入 a1 寄存器，以及读取的字节数放入 a2 寄存器。</li><li>执行 ecall 指令。这会触发操作系统处理当前运行的程序的系统调用请求。</li><li>操作系统接收到系统调用请求后，根据寄存器 a7 中的系统调用编号和其他寄存器中的参数来执行相应的操作。</li><li>当操作系统完成系统调用请求时，它将结果放入适当的寄存器中，通常是 a0 寄存器。</li><li>程序继续执行，可以检查结果并进行后续的处理。</li></ol><p>需要注意的是，具体的系统调用编号以及参数的传递方式会根据操作系统的实现而有所不同。所以在编写 RISC-V 汇编代码时，需要参考操作系统的相关文档来了解具体的系统调用接口和参数传递方式。</p><h1 id="makr-run-之后发生了什么？"><a href="#makr-run-之后发生了什么？" class="headerlink" title="makr run 之后发生了什么？"></a>makr run 之后发生了什么？</h1><p>当执行<code>make run</code>命令后，以下是运行流程的概述：</p><ol><li><p>内核代码编译：执行<code>make run</code>会触发 Makefile 中的相应规则，从而编译生成内核（kernel）二进制文件。</p></li><li><p>加载 kernel 并启动 QEMU：根据 QEMUOPTS 变量指定的参数，QEMU 加载生成的 kernel 二进制文件，并启动模拟器。</p></li><li><p>引导代码执行：在模拟器启动后，CPU 的通用寄存器被清零，程序计数器（PC）指向 0x1000 的位置，这里有硬件固化的一小段引导代码。该引导代码会迅速跳转到 0x80000000 处的 RustSBI（Rust Supervisor Binary Interface）。</p></li><li><p>RustSBI 完成硬件初始化：RustSBI 是一个用于与操作系统进行交互的接口层。在跳转到 RustSBI 之后，它会完成必要的硬件初始化工作。</p></li><li><p>执行操作系统第一条指令：RustSBI 在完成硬件初始化后，会跳转到 kernel 二进制文件所在内存位置 0x80200000 处，并开始执行我们操作系统的第一条指令。</p></li></ol><p>综上所述，执行<code>make run</code>命令会完成内核的编译和加载，启动 QEMU 虚拟机，并经过引导代码和 RustSBI 的处理，最终开始执行操作系统的第一条指令。</p><h1 id="了解链接脚本"><a href="#了解链接脚本" class="headerlink" title="了解链接脚本"></a>了解链接脚本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># kernel.ld</span><br><span class="line">BASE_ADDRESS = 0x80200000;</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">   . = BASE_ADDRESS;</span><br><span class="line">   skernel = .;</span><br><span class="line"></span><br><span class="line">   stext = .;</span><br><span class="line">   .text : &#123;</span><br><span class="line">      *(.text.entry)   # 第一行代码</span><br><span class="line">      *(.text .text.*)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kernel-ld-中的-BASE-ADDRESS-0x80200000-指定了内核的加载地址，这个地址哪来的？"><a href="#kernel-ld-中的-BASE-ADDRESS-0x80200000-指定了内核的加载地址，这个地址哪来的？" class="headerlink" title="kernel.ld 中的 BASE_ADDRESS = 0x80200000 指定了内核的加载地址，这个地址哪来的？"></a>kernel.ld 中的 <code>BASE_ADDRESS = 0x80200000</code> 指定了内核的加载地址，这个地址哪来的？</h2><p>以下内容摘自参考<a href="https://rcore-os.cn/rCore-Tutorial-Book-v3/chapter1/3first-instruction-in-kernel1.html">rCore-Tutorial-Book-v3 3.6.0-alpha.1 文档</a>：</p><p>在 Qemu 模拟的 virt 硬件平台上，物理内存的起始物理地址为 <code>0x80000000</code>，物理内存的默认大小为 128MiB，它可以通过 <code>-m</code> 选项进行配置。如果使用默认配置的 128MiB 物理内存则对应的物理地址区间为 <code>[0x80000000,0x88000000)</code> 。如果使用上面给出的命令启动 Qemu，那么在 Qemu 开始执行任何指令之前，首先把两个文件加载到 Qemu 的物理内存中：即作把作为 bootloader 的 rustsbi-qemu.bin 加载到物理内存以物理地址 <code>0x80000000</code> 开头的区域上，同时把内核镜像 <code>os.bin</code> 加载到以物理地址 <code>0x80200000</code> 开头的区域上。</p><p>为什么加载到这两个位置呢？这与 Qemu 模拟计算机加电启动后的运行流程有关。一般来说，计算机加电之后的启动流程可以分成若干个阶段，每个阶段均由一层软件或 固件 负责，每一层软件或固件的功能是进行它应当承担的初始化工作，并在此之后跳转到下一层软件或固件的入口地址，也就是将计算机的控制权移交给了下一层软件或固件。Qemu 模拟的启动流程则可以分为三个阶段：第一个阶段由固化在 Qemu 内的一小段汇编程序负责；第二个阶段由 bootloader 负责；第三个阶段则由内核镜像负责。</p><p>第一阶段：将必要的文件载入到 Qemu 物理内存之后，Qemu CPU 的程序计数器（PC, Program Counter）会被初始化为 0x1000，因此 Qemu 实际执行的第一条指令位于物理地址 0x1000，接下来它将执行寥寥数条指令并跳转到物理地址 <code>0x80000000</code> 对应的指令处并进入第二阶段。从后面的调试过程可以看出，该地址 <code>0x80000000</code> 被固化在 Qemu 中，作为 Qemu 的使用者，我们在不触及 Qemu 源代码的情况下无法进行更改。</p><p>第二阶段：由于 Qemu 的第一阶段固定跳转到 <code>0x80000000</code>，我们需要将负责第二阶段的 bootloader rustsbi-qemu.bin 放在以物理地址 <code>0x80000000</code> 开头的物理内存中，这样就能保证 <code>0x80000000</code> 处正好保存 bootloader 的第一条指令。在这一阶段，bootloader 负责对计算机进行一些初始化工作，并跳转到下一阶段软件的入口，在 Qemu 上即可实现将计算机控制权移交给我们的内核镜像 os.bin。这里需要注意的是，对于不同的 bootloader 而言，下一阶段软件的入口不一定相同，而且获取这一信息的方式和时间点也不同：入口地址可能是一个预先约定好的固定的值，也有可能是在 bootloader 运行期间才动态获取到的值。我们选用的 RustSBI 则是将下一阶段的入口地址预先约定为固定的 0x80200000，在 RustSBI 的初始化工作完成之后，它会跳转到该地址并将计算机控制权移交给下一阶段的软件——也即我们的内核镜像。</p><p>第三阶段：为了正确地和上一阶段的 RustSBI 对接，我们需要保证内核的第一条指令位于物理地址 <code>0x80200000</code> 处。为此，我们需要将内核镜像预先加载到 Qemu 物理内存以地址 0x80200000 开头的区域上。一旦 CPU 开始执行内核的第一条指令，证明计算机的控制权已经被移交给我们的内核，也就达到了本节的目标。</p><blockquote><p>以上过程是 QEMU 中的启动流程，真实计算机的加电启动流程大致如下：<br>第一阶段：加电后 CPU 的 PC 寄存器被设置为计算机内部只读存储器（ROM，Read-only Memory）的物理地址，随后 CPU 开始运行 ROM 内的软件。我们一般将该软件称为固件（Firmware），它的功能是对 CPU 进行一些初始化操作，将后续阶段的 bootloader 的代码、数据从硬盘载入到物理内存，最后跳转到适当的地址将计算机控制权转移给 bootloader。它大致对应于 Qemu 启动的第一阶段，即在物理地址 0x1000 处放置的若干条指令。可以看到 Qemu 上的固件非常简单，因为它并不需要负责将 bootloader 从硬盘加载到物理内存中，这个任务此前已经由 Qemu 自身完成了。<br>第二阶段：bootloader 同样完成一些 CPU 的初始化工作，将操作系统镜像从硬盘加载到物理内存中，最后跳转到适当地址将控制权转移给操作系统。可以看到一般情况下 bootloader 需要完成一些数据加载工作，这也就是它名字中 loader 的来源。它对应于 Qemu 启动的第二阶段。在 Qemu 中，我们使用的 RustSBI 功能较弱，它并没有能力完成加载的工作，内核镜像实际上是和 bootloader 一起在 Qemu 启动之前加载到物理内存中的。<br>第三阶段：控制权被转移给操作系统。由于篇幅所限后面我们就不再赘述了。<br>值得一提的是，为了让计算机的启动更加灵活，bootloader 目前可能非常复杂：它可能也分为多个阶段，并且能管理一些硬件资源，从复杂性上它已接近一个传统意义上的操作系统。</p></blockquote><h1 id="终端是如何控制颜色的？"><a href="#终端是如何控制颜色的？" class="headerlink" title="终端是如何控制颜色的？"></a>终端是如何控制颜色的？</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LOG_COLOR</span> &#123;</span></span><br><span class="line">RED = <span class="number">31</span>,</span><br><span class="line">GREEN = <span class="number">32</span>,</span><br><span class="line">BLUE = <span class="number">34</span>,</span><br><span class="line">GRAY = <span class="number">90</span>,</span><br><span class="line">YELLOW = <span class="number">93</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_LOG_ERROR)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> errorf(fmt, ...)                                               \</span></span><br><span class="line"><span class="meta">do &#123;                                                               \</span></span><br><span class="line"><span class="meta">int tid = threadid();                                          \</span></span><br><span class="line"><span class="meta">printf(<span class="meta-string">&quot;\x1b[%dm[%s %d]&quot;</span> fmt <span class="meta-string">&quot;\x1b[0m\n&quot;</span>, RED, <span class="meta-string">&quot;ERROR&quot;</span>, tid,   \</span></span><br><span class="line"><span class="meta">       ##__VA_ARGS__);                                         \</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br></pre></td></tr></table></figure><p>ANSI 转义码是一种用于控制终端输出的特殊字符序列。它们由<code>\x1b</code>（或<code>\033</code>）开头，后面跟着一系列数字和分号组成。</p><p>ANSI 转义码中的数字部分用于指定不同的控制操作，如设置文本颜色、背景颜色、光标位置等等。其中，用于设置颜色的转义码包括三个主要的部分：<code>\x1b[颜色代码m</code>。</p><p>具体来说，<code>\x1b[</code>表示开始使用控制序列，接下来的数字代表不同的颜色代码，最后的<code>m</code>表示结束控制序列。例如，<code>\x1b[31m</code>表示将文本颜色设置为红色，而<code>\x1b[0m</code>用于重置所有属性为默认值。</p><p>当终端遇到这样的转义序列时，它会解析并执行相应的控制操作，从而实现对文本颜色、背景颜色和其他属性的控制。</p><p>需要注意的是，不同的终端可能支持不同的 ANSI 转义码，并且不同操作系统也可能有不同的实现。因此，在编写使用 ANSI 转义码的代码时，建议先测试并确保其在目标终端上正常工作。</p><p>更多详细解释可以参考文章：<a href="https://www.jianshu.com/p/790fc612aaa5">终端颜色控制 - 简书</a>。</p><h1 id="应用程序输出字符会调用-SBI-服务，SBI-中发生了什么？"><a href="#应用程序输出字符会调用-SBI-服务，SBI-中发生了什么？" class="headerlink" title="应用程序输出字符会调用 SBI 服务，SBI 中发生了什么？"></a>应用程序输出字符会调用 SBI 服务，SBI 中发生了什么？</h1><blockquote><p>因为对 Rust 语言不熟悉，所以这里的分析是基于 C 语言的 OpenSBI 来分析的，他们的逻辑是一样的。如果有熟悉 Rust 的可以查看 <a href="https://github.com/rustsbi/rustsbi/blob/main/src/instance.rs">RustSBI 源码</a></p></blockquote><p>根据指导书中的解释以及阅读代码，我们知道调用了 <code>printf</code> 最终实际上是调用了 <code>sbi_call</code>。那么 <code>sbi_call</code> 是如何实现的呢？因为我是做驱动开发以及固件开发的，也经常需要使用 OpenSBI，所想多问一句，OpenSBI 是如何实现的呢？OpenSBI 是如何提供服务的呢？它是如何打印出字符的呢？</p><h2 id="内核中的-SBI-调用"><a href="#内核中的-SBI-调用" class="headerlink" title="内核中的 SBI 调用"></a>内核中的 SBI 调用</h2><p>我们先看一下内核中的 <code>sbi_call</code> 都做了写啥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uCore-Tutorial-Code-2023S/os/sbi.c</span></span><br><span class="line"><span class="keyword">const</span> uint64 SBI_CONSOLE_PUTCHAR = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">console_putchar</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sbi_call(SBI_CONSOLE_PUTCHAR, c, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uCore-Tutorial-Code-2023S/os/sbi.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">inline</span> <span class="title">sbi_call</span><span class="params">(uint64 which, uint64 arg0, uint64 arg1, uint64 arg2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用寄存器变量来保存参数值和系统调用编号</span></span><br><span class="line">    <span class="function"><span class="keyword">register</span> uint64 a0 <span class="title">asm</span><span class="params">(<span class="string">&quot;a0&quot;</span>)</span> </span>= arg0;  <span class="comment">// 将 &#x27;arg0&#x27; 的值保存在寄存器 &#x27;a0&#x27; 中</span></span><br><span class="line">    <span class="function"><span class="keyword">register</span> uint64 a1 <span class="title">asm</span><span class="params">(<span class="string">&quot;a1&quot;</span>)</span> </span>= arg1;  <span class="comment">// 将 &#x27;arg1&#x27; 的值保存在寄存器 &#x27;a1&#x27; 中</span></span><br><span class="line">    <span class="function"><span class="keyword">register</span> uint64 a2 <span class="title">asm</span><span class="params">(<span class="string">&quot;a2&quot;</span>)</span> </span>= arg2;  <span class="comment">// 将 &#x27;arg2&#x27; 的值保存在寄存器 &#x27;a2&#x27; 中</span></span><br><span class="line">    <span class="function"><span class="keyword">register</span> uint64 a7 <span class="title">asm</span><span class="params">(<span class="string">&quot;a7&quot;</span>)</span> </span>= which; <span class="comment">// 将 &#x27;which&#x27; 的值保存在寄存器 &#x27;a7&#x27; 中</span></span><br><span class="line">    <span class="comment">// 内联汇编代码使用 ecall 指令进行系统调用</span></span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;ecall&quot;</span>  <span class="comment">// 使用 ecall 指令进行系统调用</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="comment">// 在这段代码中，指令 &quot;ecall&quot; 的输入参数是寄存器 a0 a1 a2 和 a7，输出参数是寄存器 a0</span></span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;=r&quot;</span>(a0)  <span class="comment">// 输出操作数：将返回值存储在变量 &#x27;a0&#x27; 中</span></span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;r&quot;</span>(a0), <span class="string">&quot;r&quot;</span>(a1), <span class="string">&quot;r&quot;</span>(a2), <span class="string">&quot;r&quot;</span>(a7)  <span class="comment">// 输入操作数：传递参数和系统调用编号</span></span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;memory&quot;</span>  <span class="comment">//  &quot;memory&quot; 标志告诉编译器，这条指令可能会修改内存中的数据，需要进行内存屏障操作来保证数据的正确性。 </span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line">    <span class="keyword">return</span> a0;  <span class="comment">// 返回存储在变量 &#x27;a0&#x27; 中的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么 OpenSBI 如何提供服务？在<code>include/sbi/sbi_ecall.h</code>这种定义了每个<code>ecall</code>服务全局变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include/sbi/sbi_ecall.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_base</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_legacy</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_time</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_rfence</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_ipi</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_vendor</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_hsm</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_srst</span>;</span></span><br></pre></td></tr></table></figure><p>在<code>lib/sbi/sbi_ecall.c</code>中注册了所有的<code>ecall</code>服务，并将其加到链表<code>ecall_exts_list</code>中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbi_ecall_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> *<span class="title">ext</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sbi_ecall_exts_size; i++) &#123;</span><br><span class="line">ext = sbi_ecall_exts[i];</span><br><span class="line">ret = sbi_ecall_register_extension(ext);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbi_ecall_register_extension</span><span class="params">(struct sbi_ecall_extension *ext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> *<span class="title">t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ext || (ext-&gt;extid_end &lt; ext-&gt;extid_start) || !ext-&gt;handle)</span><br><span class="line"><span class="keyword">return</span> SBI_EINVAL;</span><br><span class="line"></span><br><span class="line">sbi_list_for_each_entry(t, &amp;ecall_exts_list, head) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> start = t-&gt;extid_start;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> end = t-&gt;extid_end;</span><br><span class="line"><span class="keyword">if</span> (end &lt; ext-&gt;extid_start || ext-&gt;extid_end &lt; start)</span><br><span class="line"><span class="comment">/* no overlap */</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> SBI_EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SBI_INIT_LIST_HEAD(&amp;ext-&gt;head);</span><br><span class="line">sbi_list_add_tail(&amp;ext-&gt;head, &amp;ecall_exts_list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Iterate over list of given type</span></span><br><span class="line"><span class="comment"> * @param pos the type * to use as a loop cursor.</span></span><br><span class="line"><span class="comment"> * @param head the head for your list.</span></span><br><span class="line"><span class="comment"> * @param member the name of the list_struct within the struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sbi_list_for_each_entry(pos, head, member) \</span></span><br><span class="line"><span class="meta">for (pos = sbi_list_entry((head)-&gt;next, typeof(*pos), member);\</span></span><br><span class="line"><span class="meta">     &amp;pos-&gt;member != (head); \</span></span><br><span class="line"><span class="meta">     pos = sbi_list_entry(pos-&gt;member.next, typeof(*pos), member))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么服务 id 如何和相对应的服务绑定的呢？以<code>ecall_time</code>为例，查看其结构体原型<code>struct sbi_ecall_extension</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/sbi/sbi_ecall.h: 23</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_dlist</span> <span class="title">head</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> extid_start;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> extid_end;</span><br><span class="line"><span class="keyword">int</span> (* probe)(<span class="keyword">unsigned</span> <span class="keyword">long</span> extid, <span class="keyword">unsigned</span> <span class="keyword">long</span> *out_val);</span><br><span class="line"><span class="keyword">int</span> (* handle)(<span class="keyword">unsigned</span> <span class="keyword">long</span> extid, <span class="keyword">unsigned</span> <span class="keyword">long</span> funcid,</span><br><span class="line">       <span class="keyword">const</span> struct sbi_trap_regs *regs,</span><br><span class="line">       <span class="keyword">unsigned</span> <span class="keyword">long</span> *out_val,</span><br><span class="line">       struct sbi_trap_info *out_trap);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到有 <code>extid_start</code>、<code>extid_end</code> 和 <code>handle</code>。</p><p>目前 OpenSBI 逐步将每个服务的实现都放在了<code>lib/sbi</code>单独文件中，以<code>ecall_time</code>为例，其实现在<code>lib/sbi/sbi_ecall_time.c</code>中。单独为其绑定回调处理函数<code>sbi_ecall_time_handler</code>。但是还有很多服务的实现还是放在了<code>lib/sbi/sbi_ecall_legacy.c</code>中，后续应该会逐步迁移。我们上文使用的<code>SBI_CONSOLE_PUTCHAR</code>服务就是在这里实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/sbi/sbi_ecall_legacy.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_ecall_extension</span> <span class="title">ecall_legacy</span> =</span> &#123;</span><br><span class="line">.extid_start = SBI_EXT_0_1_SET_TIMER,</span><br><span class="line">.extid_end = SBI_EXT_0_1_SHUTDOWN,</span><br><span class="line">.handle = sbi_ecall_legacy_handler,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sbi_ecall_legacy_handler</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> extid, <span class="keyword">unsigned</span> <span class="keyword">long</span> funcid,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> struct sbi_trap_regs *regs,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *out_val,</span></span></span><br><span class="line"><span class="params"><span class="function">    struct sbi_trap_info *out_trap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sbi_tlb_info</span> <span class="title">tlb_info</span>;</span></span><br><span class="line">u32 source_hart = current_hartid();</span><br><span class="line">ulong hmask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (extid) &#123;</span><br><span class="line"><span class="keyword">case</span> SBI_EXT_0_1_SET_TIMER:</span><br><span class="line">sbi_timer_event_start((u64)regs-&gt;a0);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SBI_EXT_0_1_CONSOLE_PUTCHAR:</span><br><span class="line">sbi_putc(regs-&gt;a0);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SBI_EXT_0_1_CONSOLE_GETCHAR:</span><br><span class="line">ret = sbi_getc();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就把 <code>id</code> 与相应的服务函数绑定。一个<code>extid</code>对应一个<code>handler</code>。</p><p>我们可以在找到<code>SBI_EXT_0_1_CONSOLE_PUTCHAR</code>的值，是与 Linux 内核里定义的值是一致的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/sbi/sbi_ecall_interface.h</span></span><br><span class="line"><span class="comment">/* SBI Extension IDs */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SBI_EXT_0_1_CONSOLE_PUTCHAR0x1</span></span><br></pre></td></tr></table></figure><h2 id="ecall-服务调用流程"><a href="#ecall-服务调用流程" class="headerlink" title="ecall 服务调用流程"></a>ecall 服务调用流程</h2><ol><li><p>在 <code>firmware/fw_base.S</code> 中注册了 <code>Machine Mode</code> 的 <code>trap handler</code>，即 <code>sbi_trap_handler</code>；</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_start_warm:</span><br><span class="line">    /* Setup trap handler */</span><br><span class="line">    laa4, _trap_handler</span><br><span class="line">    csrwCSR_MTVEC, a4  /* CSR_MTVEC = _trap_handler */</span><br><span class="line"></span><br><span class="line">_trap_handler:</span><br><span class="line">    TRAP_SAVE_AND_SETUP_SP_T0</span><br><span class="line"></span><br><span class="line">    TRAP_SAVE_MEPC_MSTATUS 0</span><br><span class="line"></span><br><span class="line">    TRAP_SAVE_GENERAL_REGS_EXCEPT_SP_T0</span><br><span class="line"></span><br><span class="line">    TRAP_CALL_C_ROUTINE</span><br><span class="line"></span><br><span class="line">    TRAP_RESTORE_GENERAL_REGS_EXCEPT_SP_T0</span><br><span class="line"></span><br><span class="line">    TRAP_RESTORE_MEPC_MSTATUS 0</span><br><span class="line"></span><br><span class="line">    TRAP_RESTORE_SP_T0</span><br><span class="line"></span><br><span class="line">    mret</span><br><span class="line"></span><br><span class="line">.macroTRAP_CALL_C_ROUTINE</span><br><span class="line">    /* Call C routine */</span><br><span class="line">    adda0, sp, zero</span><br><span class="line">    callsbi_trap_handler</span><br><span class="line">.endm</span><br></pre></td></tr></table></figure></li><li><p>在 <code>lib/sbi/sbi_trap.c</code> 中定义了 <code>sbi_trap_handler</code>，处理各种 <code>mcause</code>，比如 <code>Illegal Instructions</code>，<code>Misaligned Load &amp; Store</code>, <code>Supervisor &amp; Machine Ecall</code> 等。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/sbi/sbi_trap.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbi_trap_handler</span><span class="params">(struct sbi_trap_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (mcause) &#123;</span><br><span class="line">    <span class="keyword">case</span> CAUSE_ILLEGAL_INSTRUCTION:</span><br><span class="line">        rc  = sbi_illegal_insn_handler(mtval, regs);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CAUSE_MISALIGNED_LOAD:</span><br><span class="line">        rc = sbi_misaligned_load_handler(mtval, mtval2, mtinst, regs);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CAUSE_MISALIGNED_STORE:</span><br><span class="line">        rc  = sbi_misaligned_store_handler(mtval, mtval2, mtinst, regs);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CAUSE_SUPERVISOR_ECALL:</span><br><span class="line">    <span class="keyword">case</span> CAUSE_MACHINE_ECALL:</span><br><span class="line">        rc  = sbi_ecall_handler(regs);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">/* If the trap came from S or U mode, redirect it there */</span></span><br><span class="line">        trap.epc = regs-&gt;mepc;</span><br><span class="line">        trap.cause = mcause;</span><br><span class="line">        trap.tval = mtval;</span><br><span class="line">        trap.tval2 = mtval2;</span><br><span class="line">        trap.tinst = mtinst;</span><br><span class="line">        rc = sbi_trap_redirect(regs, &amp;trap);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>在 <code>lib/sbi/sbi_ecall.c</code> 中定义了处理 <code>ecall mcause</code> 的 <code>sbi_ecall_handler</code>，它遍历上面 <code>ecall_exts_list</code> 中注册的各种 <code>ecall</code> 服务。</p></li><li><p><code>sbi_ecall_handler</code> 根据 Linux 内核传递的 <code>ext (extension id)</code> 找到链表中对应的 <code>ecall</code> 服务，执行其中的 <code>handle</code> 函数，该函数根据 <code>fid</code> 执行具体的服务内容。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/sbi/sbi_ecall.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbi_ecall_handler</span><span class="params">(struct sbi_trap_regs *regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> extension_id = regs-&gt;a7;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> func_id = regs-&gt;a6;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sbi_trap_info</span> <span class="title">trap</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> out_val = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有 ecall 服务</span></span><br><span class="line">    ext = sbi_ecall_find_extension(extension_id);</span><br><span class="line">    <span class="keyword">if</span> (ext &amp;&amp; ext-&gt;handle) &#123;</span><br><span class="line">        <span class="comment">// 如果找到了就执行</span></span><br><span class="line">        ret = ext-&gt;handle(extension_id, func_id,</span><br><span class="line">                regs, &amp;out_val, &amp;trap);</span><br><span class="line">        <span class="keyword">if</span> (extension_id &gt;= SBI_EXT_0_1_SET_TIMER &amp;&amp;</span><br><span class="line">            extension_id &lt;= SBI_EXT_0_1_SHUTDOWN)</span><br><span class="line">            is_0_1_spec = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = SBI_ENOTSUPP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们可以发现 <code>extension_id</code> 就是 a7 寄存器，他和我们在 uCore OS 中定义的 <code>SBI_EXT_0_1_CONSOLE_PUTCHAR</code> 是一致的。</p></li></ol><h1 id="程序的内存布局与编译流程"><a href="#程序的内存布局与编译流程" class="headerlink" title="程序的内存布局与编译流程"></a>程序的内存布局与编译流程</h1><h2 id="程序的内存布局"><a href="#程序的内存布局" class="headerlink" title="程序的内存布局"></a>程序的内存布局</h2><h1 id="uCore-的编译系统"><a href="#uCore-的编译系统" class="headerlink" title="uCore 的编译系统"></a>uCore 的编译系统</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean build user</span></span><br><span class="line"><span class="comment"># 设置伪目标clean、build和user，可以通过命令make来执行这些目标</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: build_kernel</span></span><br><span class="line"><span class="comment"># 默认目标为build_kernel，即执行build_kernel目标下的指令</span></span><br><span class="line"></span><br><span class="line">LOG ?= error</span><br><span class="line"><span class="comment"># 定义一个变量LOG，默认值是error</span></span><br><span class="line"></span><br><span class="line">K = os</span><br><span class="line">TOOLPREFIX = riscv64-unknown-elf-</span><br><span class="line"></span><br><span class="line">CC = <span class="variable">$(TOOLPREFIX)</span>gcc</span><br><span class="line">AS = <span class="variable">$(TOOLPREFIX)</span>gcc</span><br><span class="line">LD = <span class="variable">$(TOOLPREFIX)</span>ld</span><br><span class="line">OBJCOPY = <span class="variable">$(TOOLPREFIX)</span>objcopy</span><br><span class="line">OBJDUMP = <span class="variable">$(TOOLPREFIX)</span>objdump</span><br><span class="line">PY = python3</span><br><span class="line">GDB = <span class="variable">$(TOOLPREFIX)</span>gdb</span><br><span class="line">CP = cp</span><br><span class="line"></span><br><span class="line">MKDIR_P = mkdir -p</span><br><span class="line"></span><br><span class="line">BUILDDIR = build</span><br><span class="line"></span><br><span class="line">C_SRCS = <span class="variable">$(<span class="built_in">wildcard</span> $K/*.c)</span></span><br><span class="line"><span class="comment"># 定义一个变量C_SRCS，使用wildcard函数匹配所有以.c为后缀的文件，并存储在$K目录下</span></span><br><span class="line"></span><br><span class="line">AS_SRCS = <span class="variable">$(<span class="built_in">wildcard</span> $K/*.S)</span></span><br><span class="line"><span class="comment"># 定义一个变量AS_SRCS，使用wildcard函数匹配所有以.S为后缀的文件，并存储在$K目录下</span></span><br><span class="line"></span><br><span class="line">C_OBJS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(BUILDDIR)</span>/, $(<span class="built_in">addsuffix</span> .o, $(<span class="built_in">basename</span> <span class="variable">$(C_SRCS)</span>)</span>))</span><br><span class="line"><span class="comment"># 定义一个变量C_OBJS，通过addprefix和addsuffix函数将$(C_SRCS)中的路径替换为$(BUILDDIR)，并将后缀修改为.o</span></span><br><span class="line"></span><br><span class="line">AS_OBJS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(BUILDDIR)</span>/, $(<span class="built_in">addsuffix</span> .o, $(<span class="built_in">basename</span> <span class="variable">$(AS_SRCS)</span>)</span>))</span><br><span class="line"><span class="comment"># 定义一个变量AS_OBJS，通过addprefix和addsuffix函数将$(AS_SRCS)中的路径替换为$(BUILDDIR)，并将后缀修改为.o</span></span><br><span class="line"></span><br><span class="line">OBJS = <span class="variable">$(C_OBJS)</span> <span class="variable">$(AS_OBJS)</span></span><br><span class="line"><span class="comment"># 定义一个变量OBJS，其值为$(C_OBJS)和$(AS_OBJS)的组合</span></span><br><span class="line"></span><br><span class="line">HEADER_DEP = <span class="variable">$(<span class="built_in">addsuffix</span> .d, $(<span class="built_in">basename</span> <span class="variable">$(C_OBJS)</span>)</span>)</span><br><span class="line"><span class="comment"># 定义一个变量HEADER_DEP，通过addsuffix函数将$(C_OBJS)中的后缀修改为.d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">-include</span> <span class="variable">$(HEADER_DEP)</span></span><br><span class="line"><span class="comment"># 包含$(HEADER_DEP)中的.d文件</span></span><br><span class="line"></span><br><span class="line">CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb</span><br><span class="line"><span class="comment"># 定义一个变量CFLAGS，并赋值为-Wall -Werror -O -fno-omit-frame-pointer -ggdb</span></span><br><span class="line"></span><br><span class="line">CFLAGS += -MD</span><br><span class="line"><span class="comment"># 将-MD选项追加到CFLAGS变量中，用于自动生成依赖关系文件</span></span><br><span class="line"></span><br><span class="line">CFLAGS += -mcmodel=medany</span><br><span class="line"><span class="comment"># 将-mcmodel=medany选项追加到CFLAGS变量中，用于指定内存模型</span></span><br><span class="line"></span><br><span class="line">CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax</span><br><span class="line"><span class="comment"># 将-ffreestanding -fno-common -nostdlib -mno-relax选项追加到CFLAGS变量中，用于编译无操作系统环境下的程序</span></span><br><span class="line"></span><br><span class="line">CFLAGS += -I$K</span><br><span class="line"><span class="comment"># 将-I$K选项追加到CFLAGS变量中，用于指定头文件搜索路径为$K目录下</span></span><br><span class="line"></span><br><span class="line">CFLAGS += <span class="variable">$(<span class="built_in">shell</span> <span class="variable">$(CC)</span> -fno-stack-protector -E -x c /dev/null &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo -fno-stack-protector)</span></span><br><span class="line"><span class="comment"># 将$(CC) -fno-stack-protector -E -x c /dev/null &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo -fno-stack-protector命令执行结果追加到CFLAGS变量中，用于禁用栈保护机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(LOG)</span>, error)</span><br><span class="line">CFLAGS += -D LOG_LEVEL_ERROR</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(LOG)</span>, warn)</span><br><span class="line">CFLAGS += -D LOG_LEVEL_WARN</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(LOG)</span>, info)</span><br><span class="line">CFLAGS += -D LOG_LEVEL_INFO</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(LOG)</span>, debug)</span><br><span class="line">CFLAGS += -D LOG_LEVEL_DEBUG</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">ifeq</span> (<span class="variable">$(LOG)</span>, trace)</span><br><span class="line">CFLAGS += -D LOG_LEVEL_TRACE</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="comment"># 根据$(LOG)变量的值，向CFLAGS变量追加相应的预处理器选项，相当于添加了一个宏定义，log.h中的LOG_LEVEL_ERROR等宏定义会根据这个宏定义来决定是否生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable PIE when possible (for Ubuntu 16.10 toolchain)</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(<span class="built_in">shell</span> <span class="variable">$(CC)</span> -dumpspecs 2&gt;/dev/null | grep -e &#x27;[^f]no-pie&#x27;)</span>,)</span><br><span class="line">CFLAGS += -fno-pie -no-pie</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(<span class="built_in">shell</span> <span class="variable">$(CC)</span> -dumpspecs 2&gt;/dev/null | grep -e &#x27;[^f]nopie&#x27;)</span>,)</span><br><span class="line">CFLAGS += -fno-pie -nopie</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="comment"># 根据系统环境判断是否支持PIE（位置无关执行）选项，并根据情况向CFLAGS变量追加相应的选项</span></span><br><span class="line"></span><br><span class="line">LDFLAGS = -z max-page-size=4096</span><br><span class="line"><span class="comment"># 定义一个变量LDFLAGS，并赋值为-z max-page-size=4096</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(AS_OBJS)</span>: <span class="variable">$(BUILDDIR)</span>/$K/%.o : $K/%.S</span><br><span class="line">    @mkdir -p $(@D)</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 规则：生成$(AS_OBJS)目标所需的依赖文件$(BUILDDIR)/$K/%.o，依赖于$K/%.S，并通过$(CC)命令编译生成目标文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(C_OBJS)</span>: <span class="variable">$(BUILDDIR)</span>/$K/%.o : $K/%.c  <span class="variable">$(BUILDDIR)</span>/$K/%.d</span><br><span class="line">    @mkdir -p $(@D)</span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment"># 规则：生成$(C_OBJS)目标所需的依赖文件$(BUILDDIR)/$K/%.o，依赖于$K/%.c和$(BUILDDIR)/$K/%.d，并通过$(CC)命令编译生成目标文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(HEADER_DEP)</span>: <span class="variable">$(BUILDDIR)</span>/$K/%.d : $K/%.c</span><br><span class="line">    @mkdir -p $(@D)</span><br><span class="line">    @set -e; rm -f <span class="variable">$@</span>; <span class="variable">$(CC)</span> -MM <span class="variable">$&lt;</span> <span class="variable">$(INCLUDEFLAGS)</span> &gt; <span class="variable">$@</span>.$$$$; \</span><br><span class="line">        sed &#x27;s,\(<span class="variable">$*</span>\)\.o[ :]*,\1.o <span class="variable">$@</span> : ,g&#x27; &lt; <span class="variable">$@</span>.$$$$ &gt; <span class="variable">$@</span>; \</span><br><span class="line">        rm -f <span class="variable">$@</span>.$$$$</span><br><span class="line"><span class="comment"># 规则：生成$(HEADER_DEP)目标所需的依赖文件$(BUILDDIR)/$K/%.d，依赖于$K/%.c，并通过$(CC)命令生成依赖关系文件</span></span><br><span class="line"></span><br><span class="line"><span class="section">build: build/kernel</span></span><br><span class="line"><span class="comment"># 定义一个目标build，其依赖于build/kernel</span></span><br><span class="line"></span><br><span class="line"><span class="section">build/kernel: <span class="variable">$(OBJS)</span></span></span><br><span class="line">    <span class="variable">$(LD)</span> <span class="variable">$(LDFLAGS)</span> -T os/kernel.ld -o <span class="variable">$(BUILDDIR)</span>/kernel <span class="variable">$(OBJS)</span></span><br><span class="line">    <span class="variable">$(OBJDUMP)</span> -S <span class="variable">$(BUILDDIR)</span>/kernel &gt; <span class="variable">$(BUILDDIR)</span>/kernel.asm</span><br><span class="line">    <span class="variable">$(OBJDUMP)</span> -t <span class="variable">$(BUILDDIR)</span>/kernel | sed &#x27;1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d&#x27; &gt; <span class="variable">$(BUILDDIR)</span>/kernel.sym</span><br><span class="line">    @echo &#x27;Build kernel done&#x27;</span><br><span class="line"><span class="comment"># 规则：生成build/kernel目标，依赖于$(OBJS)，通过$(LD)命令连接生成kernel，并通过$(OBJDUMP)命令生成汇编文件和符号表</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -rf <span class="variable">$(BUILDDIR)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BOARD</span></span><br><span class="line">BOARD?= qemu</span><br><span class="line">SBI?= rustsbi</span><br><span class="line">BOOTLOADER:= ./bootloader/rustsbi-qemu.bin</span><br><span class="line"></span><br><span class="line">QEMU = qemu-system-riscv64</span><br><span class="line">QEMUOPTS = \</span><br><span class="line">-nographic \</span><br><span class="line">-machine virt \</span><br><span class="line">-bios <span class="variable">$(BOOTLOADER)</span> \</span><br><span class="line">-kernel build/kernel\</span><br><span class="line"></span><br><span class="line"><span class="section">run: build/kernel</span></span><br><span class="line"><span class="variable">$(QEMU)</span> <span class="variable">$(QEMUOPTS)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># QEMU&#x27;s gdb stub command line changed in 0.11</span></span><br><span class="line">QEMUGDB = <span class="variable">$(<span class="built_in">shell</span> <span class="built_in">if</span> <span class="variable">$(QEMU)</span> -help | grep -q &#x27;^-gdb&#x27;; \</span></span><br><span class="line"><span class="variable">then echo &quot;-gdb tcp::15234&quot;; \</span></span><br><span class="line"><span class="variable">else echo &quot;-s -p 15234&quot;; fi)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动QEMU并通过GDB调试，此时QEMu会进入后台运行，并暂停执行，等待GDB连接</span></span><br><span class="line"><span class="comment"># 连接的GDB端口为15234</span></span><br><span class="line"><span class="section">debug: build/kernel .gdbinit</span></span><br><span class="line"><span class="variable">$(QEMU)</span> <span class="variable">$(QEMUOPTS)</span> -S <span class="variable">$(QEMUGDB)</span> &amp;</span><br><span class="line">sleep 1</span><br><span class="line"><span class="variable">$(GDB)</span></span><br></pre></td></tr></table></figure><p>编译、运行 uCore 的一些常用命令有如下一些，涉及了后续章节中引入的测试用例中的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">make run</span><br><span class="line">make debug</span><br><span class="line">make clean</span><br><span class="line"><span class="comment"># 编译测试用例的前四章</span></span><br><span class="line">make user CHAPTER=4 LOG=trace</span><br><span class="line"><span class="comment"># 编译测试用例的第四章</span></span><br><span class="line">make user CHAPTER=4_only LOG=trace</span><br><span class="line"><span class="comment"># 只运行测试用例的第四章</span></span><br><span class="line">make <span class="built_in">test</span> CHAPTER=4_only    </span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>makefile 和 qemu</p><p>AS = $(TOOLPREFIX)gas  &gt; AS = $(TOOLPREFIX)as</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.jianshu.com/p/790fc612aaa5">终端颜色控制 - 简书</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;了解系统调用&quot;&gt;&lt;a href=&quot;#了解系统调用&quot; class=&quot;headerlink&quot; title=&quot;了解系统调用&quot;&gt;&lt;/a&gt;了解系统调用&lt;/h1&gt;&lt;p&gt;操作系统的系统调用（syscall）是操作系统提供给应用程序使用的一种接口。它允许应用程序通过向操作系统发送</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>uCore 实验第 5 章 - 进程及进程管理</title>
    <link href="http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC5%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2023/09/08/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC5%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2023-09-08T02:01:20.000Z</published>
    <updated>2023-09-20T13:49:44.952Z</updated>
    
    <content type="html"><![CDATA[<p>首先，<code>.section .data</code> 表示定义了一个数据段，在这个段中定义了一系列的全局变量。其中，<code>_app_num</code> 是一个标签，表示一个 64 位的整数，初始值为 23。接下来是一系列的标签，分别代表了应用程序的起始地址，每个标签都是 64 位的整数。</p><p>接着，<code>.section .data</code> 后面又出现了一个标签 <code>_app_names</code>，它是一个字符串数组，包含了一组字符串，分别命名为 “ch2b_exit”、”ch2b_hello_world”、”ch2b_power” 等等。这些字符串名字对应了前面定义的应用程序的起始地址。</p><p>再往下，出现了一个标签 <code>INIT_PROC</code>，它是一个字符串，表示初始化进程的名称，值为 “usershell”。</p><p>之后，每个应用程序都有自己的标签和段名，比如 <code>app_0_start</code>、<code>app_1_start</code> 等等。每个标签都包含一个指令 <code>.incbin</code>，它用于将一个二进制文件（以字符串形式指定文件路径）插入到当前段中。</p><h1 id="进程初始化分析"><a href="#进程初始化分析" class="headerlink" title="进程初始化分析"></a>进程初始化分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduler()</span><br><span class="line">    fetch_task() <span class="comment">// 获取下一个要执行的进程</span></span><br><span class="line">    swtch(&amp;curenv-&gt;context, nextenv-&gt;context) <span class="comment">// 切换到下一个进程上下文</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Per-process state</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">procstate</span>    <span class="title">state</span>;</span>     <span class="comment">// 进程状态</span></span><br><span class="line">    <span class="keyword">int</span>               pid;       <span class="comment">// 进程 ID</span></span><br><span class="line">    uint64            ustack;    <span class="comment">// 进程用户栈虚拟地址 (用户页表)</span></span><br><span class="line">    uint64            kstack;    <span class="comment">// 进程内核栈虚拟地址 (内核页表)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">trapframe</span>;</span> <span class="comment">// 进程中断帧</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">context</span>    <span class="title">context</span>;</span> <span class="comment">// 用于保存进程内核态的寄存器信息，进程切换时使用</span></span><br><span class="line">    <span class="keyword">pagetable_t</span>       pagetable; <span class="comment">// User page table</span></span><br><span class="line">    uint64            max_page;</span><br><span class="line">    uint64            program_brk;</span><br><span class="line">    uint64            heap_bottom;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *     <span class="title">parent</span>;</span> <span class="comment">// Parent process</span></span><br><span class="line">    uint64            exit_code;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *     <span class="title">files</span>[<span class="title">FD_BUFFER_SIZE</span>];</span></span><br><span class="line">    uint32     syscall_times[MAX_SYSCALL_NUM]; <span class="comment">// 系统调用次数统计</span></span><br><span class="line">    uint64     start_time;                     <span class="comment">// 进程开始运行时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vma</span> <span class="title">vmas</span>[<span class="title">NVMA</span>];</span>                     <span class="comment">// 虚拟内存区域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="wait-系统调用的功能"><a href="#wait-系统调用的功能" class="headerlink" title="wait 系统调用的功能"></a>wait 系统调用的功能</h2><p><code>wait</code> 系统调用是用于处理子进程终止状态的系统调用。其主要功能是等待子进程的终止，并获取子进程的退出状态信息。在操作系统中，当一个父进程创建了一个子进程后，通常会使用 <code>wait</code> 来等待子进程的终止，以便进行后续的处理，如回收子进程的资源或获取其运行结果。</p><p>以下是 <code>wait</code> 系统调用的主要功能：</p><ol><li><p><strong>等待子进程终止</strong>：父进程调用 <code>wait</code> 系统调用后，会进入阻塞状态，等待子进程终止。如果子进程已经终止，那么 <code>wait</code> 立即返回，否则父进程会一直等待直到子进程终止。</p></li><li><p><strong>获取子进程的退出状态</strong>：<code>wait</code> 系统调用会获取子进程的退出状态信息，包括子进程的退出码（通常是一个整数）。这个退出码可以告诉父进程子进程的终止情况，例如是否成功执行等。</p></li><li><p><strong>回收子进程资源</strong>：一旦子进程终止，其占用的系统资源（如内存、文件描述符等）通常需要由父进程来回收，以避免资源泄漏。<code>wait</code> 系统调用在等待子进程终止后，会自动回收这些资源。</p></li><li><p><strong>处理僵尸进程</strong>：在某些情况下，子进程可能会在终止后成为僵尸进程，即已经终止但其进程描述符仍然存在。父进程可以使用 <code>wait</code> 来回收这些僵尸进程，释放相关资源。</p></li></ol><p><code>exec</code>、<code>fork</code> 和 <code>spawn</code> 是操作系统中常见的进程管理系统调用，各自具有不同的功能和用途：</p><ol><li><p><strong><code>exec</code> 系统调用</strong>：</p><ul><li><strong>功能</strong>：<code>exec</code> 系统调用用于在当前进程的上下文中加载并执行一个新的程序。</li><li><strong>用途</strong>：通常在一个进程需要替换自身的执行映像时使用。它会加载一个新的可执行文件，覆盖当前进程的地址空间和代码段，然后开始执行新的程序。这个新程序可以是完全不同的程序，从而允许进程动态切换到不同的应用程序，而不需要创建新的进程。</li></ul></li><li><p><strong><code>fork</code> 系统调用</strong>：</p><ul><li><strong>功能</strong>：<code>fork</code> 系统调用用于创建一个与当前进程几乎完全相同的新进程，包括代码、数据和上下文等。</li><li><strong>用途</strong>：通常用于创建新的进程，新进程称为子进程，它从父进程继承了大部分状态，然后可以在独立的地址空间中执行不同的操作。<code>fork</code> 创建的子进程是父进程的副本，可以并行执行不同的任务。</li></ul></li><li><p><strong><code>spawn</code> 系统调用</strong>：</p><ul><li><strong>功能</strong>：<code>spawn</code> 系统调用通常用于创建新的进程并执行指定的程序。</li><li><strong>用途</strong>：类似于 <code>fork</code>，它也创建了一个新的进程，但不像 <code>fork</code> 那样完全复制父进程。相反，<code>spawn</code> 允许你指定一个新程序的路径和参数，而不是完全复制当前进程的状态。这使得它更适合用于启动新程序，而不是简单地创建一个进程副本。</li></ul></li></ol><p>总结：</p><ul><li><code>exec</code> 用于替换当前进程的执行映像，允许加载和执行新程序。</li><li><code>fork</code> 用于创建一个几乎与父进程相同的新进程，新进程成为父进程的副本。</li><li><code>spawn</code> 通常用于创建一个新进程并执行指定的程序，允许指定不同的程序路径和参数。<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1></li></ul><p>本章任务：<br>在次 -&gt; 在此</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，&lt;code&gt;.section .data&lt;/code&gt; 表示定义了一个数据段，在这个段中定义了一系列的全局变量。其中，&lt;code&gt;_app_num&lt;/code&gt; 是一个标签，表示一个 64 位的整数，初始值为 23。接下来是一系列的标签，分别代表了应用程序的起始地址，</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
    <category term="进程管理" scheme="http://example.com/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
    <category term="进程" scheme="http://example.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="线程" scheme="http://example.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="多进程" scheme="http://example.com/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>uCore 实验第 4 章 - 地址空间</title>
    <link href="http://example.com/2023/09/04/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC4%E7%AB%A0-%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/"/>
    <id>http://example.com/2023/09/04/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC4%E7%AB%A0-%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/</id>
    <published>2023-09-04T03:11:48.000Z</published>
    <updated>2023-09-09T04:01:37.232Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为何指定 TRAMPOLINE 和 TRAPFRAME 在 va 的最高位？<br>TRAMPOLINE 和 TRAPFRAME 被定义在最高的虚拟内存地址上，是因为它们在操作系统的内存布局中起着重要作用。<br>TRAMPOLINE 被用作从用户模式切换到内核模式的跳转目标。当发生异常或中断时，处理器将从用户模式切换到内核模式，并将控制权转移到内核中预定义的位置，也就是陷阱处理程序。TRAMPOLINE 页面被映射到最高虚拟地址，以便处理器能够在这个转换过程中方便地引用它。通过将其放置在最高地址，确保了无论系统的具体内存布局如何，它始终是可访问的。<br>另一方面，TRAPFRAME 用于在发生异常或中断时存储机器状态。它包含寄存器、标志和其他操作系统处理异常所需的信息。TRAPFRAME 也被放置在最高的虚拟地址上，以确保它易于访问，并且陷阱处理程序可以高效地访问它。<br>通过将 TRAMPOLINE 和 TRAPFRAME 定义在最高的虚拟内存地址上，内核可以方便而可靠地处理异常和中断，而无需关心它们在内存中的特定位置。</p></blockquote><h1 id="如何确定分页方案-satp"><a href="#如何确定分页方案-satp" class="headerlink" title="如何确定分页方案 - satp"></a>如何确定分页方案 - satp</h1><p>在 MMU 没有使能的情况下，虚拟地址和物理地址是相同的。在 MMU 使能的情况下，虚拟地址会被转换成物理地址。这个转换过程是由操作系统来管理的，操作系统需要维护一个数据结构来记录虚拟地址和物理地址的映射关系。这个数据结构就是页表。</p><p>转换的过程需要分页机制，分页机制有多种。RISC-V 的分页方案以 SvX 的模式命名，其中 X 是以位为单位的<strong>虚拟地址的长度</strong>。在 RV64 架构下，RISC-V 支持多种分页方案，包括 Sv39，Sv48，Sv57 以及 Sv64。Sv39 最大支持 39 位的虚拟地址，这意味着它可以支持 512 GB 的虚拟地址空间。Sv48 最大支持 48 位的虚拟地址，这意味着它可以支持 256 TB 的虚拟地址空间。我们将在本章中实现 Sv39 分页方案。</p><p>如何开启分页机制呢？RISC-V 的分页机制是通过 satp（Supervisor address translation and protection）寄存器来开启的。satp 寄存器字段分布如下：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/09/05/5d1ec6e9adaf743f7c9abc177cd12eb1.png" title="RV64 架构下的 satp 寄存器"></p><ul><li>Mode 字段可以决定是否开启分页以及分页级数。Mode=0 时，不开启分页；Mode=8 时，开启 Sv39 分页机制。</li><li>ASID（Address Space Identifier，地址空间标识符）域是可选的，它可以用来降低上下文切换的开销。目前我们暂不考虑这个字段的作用。</li><li>PPN（Physical Page Number，物理页号），保存了根页表的物理地址。</li></ul><h1 id="SV39-多级页表机制"><a href="#SV39-多级页表机制" class="headerlink" title="SV39 多级页表机制"></a>SV39 多级页表机制</h1><h2 id="页表项描述"><a href="#页表项描述" class="headerlink" title="页表项描述"></a>页表项描述</h2><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/09/05/86e06238c562bdd238e868fcd819df3c.png" title="Sv39 页表项"></p><p>Sv39 页表项（page-table entry，PTE）的布局，从左到右分别包含如下所述的域：</p><ul><li>V 位决定了该页表项的其余部分是否有效 (V=1 时有效)。若 V=0，则任何遍历到此页表项的虚址转换操作都会导致页错误。</li><li>R、W 和 X 位分别表示此页是否可以读取、写入和执行。如果这三个位都是 0，那么这个页表项是指向下一级页表的指针，否则它是页表树的一个叶节点。</li><li>U 位表示该页是否是用户页面。若 U=0，则 U 模式不能访问此页面，但 S 模式可以。若 U=1，则 U 模式下能访问这个页面，而 S 模式不能。</li><li>G 位表示这个映射是否对所有虚址空间有效，硬件可以用这个信息来提高地址转换的性能。这一位通常只用于属于操作系统的页面。</li><li>A 位表示自从上次 A 位被清除以来，该页面是否被访问过。</li><li>D 位表示自从上次清除 D 位以来页面是否被弄脏（例如被写入）。</li><li>RSW 域留给操作系统使用，它会被硬件忽略。</li><li>PPN 域包含物理页号，这是物理地址的一部分。若这个页表项是一个叶节点，那么 PPN 是转换后物理地址的一部分。否则 PPN 给出下一节页表的地址。</li></ul><h2 id="虚拟地址转换物理地址过程"><a href="#虚拟地址转换物理地址过程" class="headerlink" title="虚拟地址转换物理地址过程"></a>虚拟地址转换物理地址过程</h2><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/09/05/48e6ce48ffb827a10371344ad07324c2.png"></p><p>当 satp 寄存器中开启分页时，S 模式和 U 模式中访存的地址都会被视为虚拟地址，需要将其转换为物理地址。虚拟地址转换物理地址的过程如下：</p><ul><li>从 satp 寄存器中读取 PPN，得到根页表的物理地址，为了表述方便，我们将其记做三级页表基地址 satp.PPN；</li><li>从虚拟地址中取出三级虚拟页号 L2</li><li>处理器会读取地址位于 satp.PPN * 4096 + L2 * 4 的页表项，得到下一级页表的基地址 L1.PPN；</li><li>从虚拟地址中取出二级虚拟页号 L1</li><li>处理器会读取地址位于 L1.PPN * 4096 + L1 * 4 的页表项，得到下一级页表的基地址 L0.PPN；</li><li>从虚拟地址中取出一级虚拟页号 L0</li><li>处理器会读取地址位于 L0.PPN * 4096 + L0 * 4 的页表项，得到物理页号 PPN；</li><li>将 PPN 和虚拟地址的低 12 位也就是 Offset 拼接起来，得到物理地址。</li></ul><p>我们看代码中是如何实现的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PTE2PA(pte) (((pte) &gt;&gt; 10) &lt;&lt; 12)</span></span><br><span class="line"><span class="comment">// 从虚拟地址中提取三个 9 位的页表索引</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PXMASK 0x1FF <span class="comment">// 9</span></span></span><br><span class="line"><span class="comment">// PGSHIFT = 12，这段宏定义用于定位 VPNx 的位置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PXSHIFT(level) (PGSHIFT + (9 * (level)))</span></span><br><span class="line"><span class="comment">// 从虚拟地址 VA 中提取出第 level 级页表的索引</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PX(level, va) ((((uint64)(va)) &gt;&gt; PXSHIFT(level)) &amp; PXMASK)</span></span><br></pre></td></tr></table></figure><p>上面这三个工具宏可以用来提取虚拟页号 VPN。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 返回页表 pagetable 中与虚拟地址 va 对应的 PTE 的地址。</span></span><br><span class="line"><span class="comment">// 如果 alloc != 0，则创建所需的页表页。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// RISC-V Sv39 方案有三级页表页。一个页表页包含 512 个 64 位的 PTEs。</span></span><br><span class="line"><span class="comment">// 一个 64 位的虚拟地址被分为五个字段：</span></span><br><span class="line"><span class="comment">//   39..63 -- 必须为零。</span></span><br><span class="line"><span class="comment">//   30..38 -- 2 级索引的 9 位。</span></span><br><span class="line"><span class="comment">//   21..29 -- 1 级索引的 9 位。</span></span><br><span class="line"><span class="comment">//   12..20 -- 0 级索引的 9 位。</span></span><br><span class="line"><span class="comment">//    0..11 -- 页面内的 12 位字节偏移量。</span></span><br><span class="line"><span class="comment">// pagetable 页表</span></span><br><span class="line"><span class="comment">// va 虚拟地址</span></span><br><span class="line"><span class="comment">// alloc 页表项不存在时是否分配</span></span><br><span class="line"><span class="function"><span class="keyword">pte_t</span> *<span class="title">walk</span><span class="params">(<span class="keyword">pagetable_t</span> pagetable, uint64 va, <span class="keyword">int</span> alloc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (va &gt;= MAXVA)</span><br><span class="line">        panic(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> level = <span class="number">2</span>; level &gt; <span class="number">0</span>; level--) &#123;</span><br><span class="line">        <span class="keyword">pte_t</span> *pte = &amp;pagetable[PX(level, va)];</span><br><span class="line">        <span class="comment">// 通过 PTE 的标志位判断每一级的 pte 是否是有效的（V 位）</span></span><br><span class="line">        <span class="keyword">if</span> (*pte &amp; PTE_V) &#123;</span><br><span class="line">            pagetable = (<span class="keyword">pagetable_t</span>)PTE2PA(*pte);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果该项无效且 alloc 标志被设置，则分配一个新的页表</span></span><br><span class="line">            <span class="comment">// 如果 alloc 参数=0 或者已经没有空闲的内存了，那么遇到中途 V=0 的 pte 整个 walk 过程就会直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (!alloc || (pagetable = (<span class="keyword">pde_t</span> *)kalloc()) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 清空分配的页表</span></span><br><span class="line">            <span class="built_in">memset</span>(pagetable, <span class="number">0</span>, PGSIZE);</span><br><span class="line">            <span class="comment">// 更新页表项，将其指向新分配的页表，并设置有效位 PTE_V</span></span><br><span class="line">            *pte = PA2PTE(pagetable) | PTE_V;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回最低级和虚拟地址的页表项，不是返回物理地址</span></span><br><span class="line">    <span class="keyword">return</span> &amp;pagetable[PX(<span class="number">0</span>, va)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次从虚拟地址 va 中提取出一个虚拟页号，然后根据这个虚拟页号从页表中取出下一级页表的基地址。如果这个页表项无效，那么根据 alloc 参数决定是否分配一个新的页表。如果 alloc 参数为 0 或者已经没有空闲的内存了，那么遇到中途 V=0 的 pte 整个 walk 过程就会直接退出。如果 alloc 参数为 1，那么就会分配一个新的页表，然后将这个页表项指向新分配的页表，并设置有效位 PTE_V。</p><p>我们可以发现 walk 返回的结果不是物理地址，而是页表项的地址。这是因为 walk 函数的作用是将虚拟地址转换为物理地址，而页表项中的 PPN 只是物理地址的一部分，<strong>还需要加上虚拟地址的低 12 位偏移量才能得到物理地址</strong>。</p><h2 id="如何建立页表"><a href="#如何建立页表" class="headerlink" title="如何建立页表"></a>如何建立页表</h2><p>前面的过程实际上是以用户的角度来考虑的，也就是给你一个虚拟地址按照分页的规则将其转化成物理地址就能访问了。但是作为一个操作系统，我们还需要多考虑一下，页表是哪来的？我们知道从虚拟地址中去获取页表地址，但是<strong>页表的内容是哪来的呢</strong>？页表是如何建立起来的呢？这些是需要操作系统来完成的。</p><p>建立页表也就是建立虚拟地址到物理地址的映射关系。也就是给你一个虚拟地址，你需要告诉我如何查到物理地址，实际上这个过程就是建立页表的过程。这个过程也是通过 walk 函数来完成的，从上文我们知道如果页表都建好的情况下 walk 就是不断查页表的过程，那么在没有页表的情况下，walk 还可以建立一个个页表。稍有不同的是，walk 返回的是最后一级页表项的地址，我们需要将物理地址写入这个页表项中。</p><p>在 uCore 中使用 mappages 函数封装了 walk 函数，具体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PA2PTE(pa) ((((uint64)pa) &gt;&gt; 12) &lt;&lt; 10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为从虚拟地址 va 开始的页面创建指向物理地址 pa 开始的页表项（PTE）</span></span><br><span class="line"><span class="comment"> * 注意：va 和 size 可能不是页面对齐的</span></span><br><span class="line"><span class="comment"> * 如果无法分配所需的页表，则返回 0，否则返回 -1</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param pagetable 根页表地址</span></span><br><span class="line"><span class="comment"> * @param va        虚拟地址</span></span><br><span class="line"><span class="comment"> * @param size      映射的字节数</span></span><br><span class="line"><span class="comment"> * @param pa        物理地址</span></span><br><span class="line"><span class="comment"> * @param perm      权限位</span></span><br><span class="line"><span class="comment"> * @return          成功返回 0，否则返回 -1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mappages</span><span class="params">(<span class="keyword">pagetable_t</span> pagetable, uint64 va, uint64 size, uint64 pa, <span class="keyword">int</span> perm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uint64 virtualAddress, lastVirtualAddress;</span><br><span class="line">    <span class="keyword">pte_t</span> *pte;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地址必须是页面对齐的</span></span><br><span class="line">    virtualAddress     = PGROUNDDOWN(va);</span><br><span class="line">    lastVirtualAddress = PGROUNDDOWN(va + size - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 返回最低级的虚拟地址的页表项，如果不存在会创建一个新的页表项</span></span><br><span class="line">        <span class="comment">// 页表项可能会因为内存不足创建失败，如果创建失败，则返回 -1</span></span><br><span class="line">        <span class="keyword">if</span> ((pte = walk(pagetable, virtualAddress, <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 PTE 已经有效，则输出错误信息并返回 -1</span></span><br><span class="line">        <span class="keyword">if</span> (*pte &amp; PTE_V) &#123;</span><br><span class="line">            errorf(<span class="string">&quot;remap&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将物理地址 pa 转换为页表项，并设置权限位 perm 和 有效位 PTE_V</span></span><br><span class="line">        *pte = PA2PTE(pa) | perm | PTE_V;</span><br><span class="line">        <span class="comment">// 如果当前是最后一个地址，则结束循环</span></span><br><span class="line">        <span class="keyword">if</span> (virtualAddress == lastVirtualAddress) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        virtualAddress += PGSIZE;</span><br><span class="line">        pa += PGSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="问答作业"><a href="#问答作业" class="headerlink" title="问答作业"></a>问答作业</h1><h2 id="请列举-SV39-页表页表项的组成，结合课堂内容，描述其中的标志位有何作用／潜在作用？"><a href="#请列举-SV39-页表页表项的组成，结合课堂内容，描述其中的标志位有何作用／潜在作用？" class="headerlink" title="请列举 SV39 页表页表项的组成，结合课堂内容，描述其中的标志位有何作用／潜在作用？"></a>请列举 SV39 页表页表项的组成，结合课堂内容，描述其中的标志位有何作用／潜在作用？</h2><p>Sv39 页表页表项的组成如下：</p><ol><li>**有效位 (V)**：这是页表项的最高位，用于指示页表项是否有效。如果有效位设置为 1，表示页表项有效，可以使用；如果设置为 0，表示页表项无效，禁止使用。这是虚拟内存中页表项的基本有效性标志。</li><li>**写入位 (W)**：这个标志位用于指示是否可以对此页进行写入操作。如果设置为 1，表示允许写入；如果设置为 0，表示禁止写入。它是页表项的访问权限控制标志之一。</li><li>**用户位 (U)**：用户位用于指示是否允许用户态程序访问此页。如果设置为 1，表示允许用户态访问；如果设置为 0，表示只允许内核态访问。它是页表项的访问权限控制标志之一。</li><li>**执行位 (X)**：执行位用于指示是否允许执行此页上的指令。如果设置为 1，表示允许执行；如果设置为 0，表示禁止执行。它也是页表项的访问权限控制标志之一。</li><li>**全局位 (G)**：全局位用于指示此页是否是全局的，即无需 TLB 缓存，通常用于内核页。如果设置为 1，表示是全局的；如果设置为 0，表示不是全局的。</li><li>**已访问位 (A)**：已访问位表示是否已经访问过此页，通常由硬件设置。操作系统可以用它来实现页面置换算法，如 LRU。</li><li>**已修改位 (D)**：已修改位表示是否已经对此页进行了写入操作。与已访问位类似，操作系统可以用它来实现页面置换算法。</li><li>**物理页框地址 (PPN)**：这是页表项中存储的物理页框的地址。它指示了虚拟页到物理页的映射关系。</li></ol><p>Sv39 页表的页表项标志位允许操作系统和硬件实现对虚拟内存的细粒度控制和保护。不同的标志位组合可以实现不同级别的内存保护和权限控制，从而提高系统的安全性和可用性。例如，有效位、写入位、用户位和执行位的不同组合可以实现不同级别的内存保护，使操作系统可以将不同的内存区域分配给用户态和内核态，并设置不同的权限。已访问位和已修改位则用于实现页面置换算法，帮助操作系统决定哪些页面应该被置换出去，以优化内存利用率。全局位可以用于标识全局共享的页，从而节省 TLB 缓存空间。物理页框地址是页表项的核心，它建立了虚拟地址到物理地址的映射关系，使虚拟内存管理成为可能。</p><h2 id="缺页相关问题"><a href="#缺页相关问题" class="headerlink" title="缺页相关问题"></a>缺页相关问题</h2><h3 id="请问哪些异常可能是缺页导致的？"><a href="#请问哪些异常可能是缺页导致的？" class="headerlink" title="请问哪些异常可能是缺页导致的？"></a>请问哪些异常可能是缺页导致的？</h3><p>缺页异常是由于进程访问的页面不在页表中或者在页表中无效而引发的异常。以下这些异常可能是因为缺页导致的：</p><ul><li><p>Load Page Fault（Load 异常）：当进程试图读取一个不在页表中或者无效的页面时，会引发 Load Page Fault 异常。在 RISC-V 中，这个异常对应的异常代码是 5。</p></li><li><p>Store Page Fault（Store 异常）：当进程试图写入一个不在页表中或者无效的页面时，会引发 Store Page Fault 异常。在 RISC-V 中，这个异常对应的异常代码是 7。</p></li><li><p>Instruction Page Fault（指令页异常）：当进程试图执行一个不在页表中或者无效的页面上的指令时，会引发 Instruction Page Fault 异常。在 RISC-V 中，这个异常对应的异常代码是 12。</p></li></ul><h3 id="发生缺页时，描述相关的重要寄存器的值（lab2-中描述过的可以简单点）。"><a href="#发生缺页时，描述相关的重要寄存器的值（lab2-中描述过的可以简单点）。" class="headerlink" title="发生缺页时，描述相关的重要寄存器的值（lab2 中描述过的可以简单点）。"></a>发生缺页时，描述相关的重要寄存器的值（lab2 中描述过的可以简单点）。</h3><ul><li>sepc（Exception Program Counter）：trap 发生时会将当前指令的下一条指令地址写入其中，用于 trap 处理完成后返回。</li><li>stval（Machine Trap Value）：mtval 寄存器包含导致异常的原因，即导致异常的指令的具体信息。例如，如果是缺页异常，那么 mtval 寄存器包含导致缺页异常的虚拟地址。</li><li>scause: 中断/异常发生时， CSR 寄存器 scause 中会记录其信息， Interrupt 位记录是中断还是异常， Exception Code 记录中断/异常的种类。</li><li>sstatus: 记录处理器当前状态，其中 SPP 段记录当前特权等级。</li><li>stvec: 记录处理 trap 的入口地址，现有两种模式  Direct 和 Vectored 。</li><li>sscratch: 其中的值是指向hart相关的S态上下文的指针，比如内核栈的指针。</li></ul><h3 id="以下行为的好处？"><a href="#以下行为的好处？" class="headerlink" title="以下行为的好处？"></a>以下行为的好处？</h3><p>缺页有两个常见的原因，其一是 Lazy 策略，也就是直到内存页面被访问才实际进行页表操作。比如，一个程序被执行时，进程的代码段理论上需要从磁盘加载到内存。但是 os 并不会马上这样做，而是会保存 .text 段在磁盘的位置信息，在这些代码第一次被执行时才完成从磁盘的加载操作。</p><p>Lazy Loading 策略有以下好处：</p><ol><li><strong>减少初始化开销</strong>：Lazy Loading 允许操作系统在程序启动时只加载必需的页面，而不是一次性加载整个程序。这可以减少启动时间和初始化开销，因为不需要将整个程序加载到内存中。</li><li><strong>节省内存</strong>：Lazy Loading 策略避免了不必要的内存占用。如果程序的某些部分从不被访问，那么它们就不会被加载到内存中，从而节省了内存资源。</li><li><strong>提高响应速度</strong>：通过仅在需要时加载页面，Lazy Loading 可以提高系统的响应速度。只有当程序访问某个页面时，操作系统才会执行磁盘加载操作，而不会在程序启动时浪费时间加载可能永远不会被访问的内容。</li><li><strong>更好的磁盘利用率</strong>：Lazy Loading 允许操作系统将程序的不同部分分散在磁盘上，根据需要加载。这可以提高磁盘利用率，因为不需要在磁盘上为整个程序分配连续的空间。</li></ol><h3 id="请问处理-10G-连续的内存页面，需要操作的页表实际大致占用多少内存-给出数量级即可-？"><a href="#请问处理-10G-连续的内存页面，需要操作的页表实际大致占用多少内存-给出数量级即可-？" class="headerlink" title="请问处理 10G 连续的内存页面，需要操作的页表实际大致占用多少内存 (给出数量级即可)？"></a>请问处理 10G 连续的内存页面，需要操作的页表实际大致占用多少内存 (给出数量级即可)？</h3><blockquote><p>此外 COW(Copy On Write) 也是常见的容易导致缺页的 Lazy 策略，这个之后再说。其实，我们的 mmap 也可以采取 Lazy 策略，比如：一个用户进程先后申请了 10G 的内存空间，然后用了其中 1M 就直接退出了。按照现在的做法，我们显然亏大了，进行了很多没有意义的页表操作。</p></blockquote><p>处理 10GB 连续的内存页面所需的页表实际上占用的内存量取决于操作系统的页表结构和管理策略。在 RISC-V 的页表结构中，一个页表项（Page Table Entry，PTE）通常占据 8 字节（64 位系统），其中包括物理页框号和一些标志位。让我们假设一个 PTE 占用 8 字节。</p><p>为了估算 10GB 连续内存页面所需的页表实际占用内存量，我们可以按照以下步骤进行计算：</p><ol><li><p>首先，将 10GB 转换为字节数。1GB 等于 1,073,741,824 字节，所以 10GB 等于 10 * 1,073,741,824 = 10,737,418,240 字节。</p></li><li><p>然后，计算每个页面表项覆盖的内存范围。假设每个页面表项管理 4KB（4 * 1024 字节）的内存页面。</p></li><li><p>计算需要多少个页面表项来管理 10GB 的内存。这可以通过将 10GB 除以每个页面表项管理的内存范围来实现。</p></li><li><p>最后，将所需的页面表项数量乘以每个 PTE 的大小来估算所需的总内存量。</p></li></ol><p>让我们进行具体计算：</p><ul><li>内存大小：10,737,418,240 字节</li><li>每个页面表项管理的内存范围：4KB = 4 * 1024 字节</li><li>需要的页面表项数量：10,737,418,240 字节 / 4KB = 2,621,440 个页表项</li></ul><p>假设每个页表项占用 8 字节，则需要的总内存量为：</p><p>2,621,440 个页表项 * 8 字节/页表项 = 20,971,520 字节</p><p>所以，处理 10GB 连续的内存页面所需的页表实际占用内存量约为 20,971,520 字节，或者大约 20MB。这只是一个估算，实际内存占用可能会因操作系统的管理策略和对齐等因素而有所不同。</p><h3 id="请简单思考如何才能在现有框架基础上实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。"><a href="#请简单思考如何才能在现有框架基础上实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。" class="headerlink" title="请简单思考如何才能在现有框架基础上实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。"></a>请简单思考如何才能在现有框架基础上实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。</h3><p>要在现有框架基础上实现 Lazy 策略，可以采取以下简单思路：</p><ol><li><p><strong>延迟加载（Lazy Loading）</strong>：在用户进程请求内存映射时，不立即将整个内存区域加载到物理内存中。而是仅创建虚拟内存映射和页表项，记录对应的磁盘位置等信息。</p></li><li><p><strong>缺页处理（Page Fault Handling）</strong>：当用户进程访问虚拟内存中的某个尚未加载的内存页面时，会触发缺页异常。在缺页异常处理程序中，操作系统会根据页表中的磁盘位置信息，将相应的磁盘数据加载到物理内存中，并更新页表项，使其指向新加载的物理页面。</p></li><li><p><strong>惰性加载（Demand Paging）</strong>：为了提高性能，可以采用惰性加载策略，即只加载实际被访问的内存页面，而不是一次性加载整个区域。这可以通过在缺页处理程序中进行懒加载操作来实现。</p></li><li><p><strong>内存回收（Memory Reclamation）</strong>：当系统内存不足时，操作系统可以选择回收一些不常访问的内存页面，将其写回磁盘，并更新页表项为无效。这需要根据页面访问模式和策略来确定哪些页面可以被回收。</p></li><li><p><strong>性能优化</strong>：为了提高性能，可以采用预读取（Prefetching）策略，即在缺页处理时，不仅加载当前访问的页面，还预先加载相邻的页面，以减少未来可能的缺页次数。</p></li></ol><h3 id="此时页面失效如何表现在页表项-PTE-上？"><a href="#此时页面失效如何表现在页表项-PTE-上？" class="headerlink" title="此时页面失效如何表现在页表项 (PTE) 上？"></a>此时页面失效如何表现在页表项 (PTE) 上？</h3><blockquote><p>缺页的另一个常见原因是 swap 策略，也就是内存页面可能被换到磁盘上了，导致对应页面失效。</p></blockquote><p>Dirty bit (D 位)：当页面被修改并且尚未写回到主存时，该位会被设置为 1。如果页面已经被换出到磁盘上，D 位将保持为 1，以指示页面数据已过期。</p><p>Valid bit (V 位)：当页面在主存中有效时，V 位被设置为 1。如果页面被换出到磁盘上，V 位将被清除为 0，表示该页无效。</p><p>通过检查页表项的 D 位和 V 位，操作系统可以确定页面是否需要从磁盘重新加载到内存中。如果 D 位为 1，说明页面需要写回到主存，在将其置为有效之前，必须将页数据从磁盘读取到内存中。如果 V 位为 0，说明页面当前无效，需要将其从磁盘加载到内存中，并将 V 位设置为 1，表示页面有效。</p><h2 id="双页表与单页表"><a href="#双页表与单页表" class="headerlink" title="双页表与单页表"></a>双页表与单页表</h2><p>为了防范侧信道攻击，我们的 os 使用了双页表。但是传统的设计一直是单页表的，也就是说，用户线程和对应的内核线程共用同一张页表，只不过内核对应的地址只允许在内核态访问。请结合课堂知识回答如下问题：(备注：这里的单/双的说法仅为自创的通俗说法，并无这个名词概念，详情见 KPTI )</p><h2 id="单页表情况下，如何更换页表？"><a href="#单页表情况下，如何更换页表？" class="headerlink" title="单页表情况下，如何更换页表？"></a>单页表情况下，如何更换页表？</h2><p> 在单页表情况下，页表的更换通常是由操作系统的上下文切换来触发的。当从用户态切换到内核态或从一个进程切换到另一个进程时，操作系统会根据相应的上下文信息加载不同的页表，实现页表的更换。</p><h2 id="单页表情况下，如何控制用户态无法访问内核页面？（tips-看看第一题最后一问）"><a href="#单页表情况下，如何控制用户态无法访问内核页面？（tips-看看第一题最后一问）" class="headerlink" title="单页表情况下，如何控制用户态无法访问内核页面？（tips:看看第一题最后一问）"></a>单页表情况下，如何控制用户态无法访问内核页面？（tips:看看第一题最后一问）</h2><ul><li>设置页面权限：内核页面通常会被设置为只能在内核态下访问（例如，设置 PTE_U 位为 0），这样用户态无法访问内核页面。</li><li>操作系统权限：操作系统内核态拥有较高的权限，可以通过特权级别或访问控制机制来确保用户态无法直接访问内核页面。用户程序只能通过系统调用进入内核态，并在内核态下由操作系统执行，从而实现对内核页面的访问控制。</li></ul><h2 id="单页表有何优势？（回答合理即可）"><a href="#单页表有何优势？（回答合理即可）" class="headerlink" title="单页表有何优势？（回答合理即可）"></a>单页表有何优势？（回答合理即可）</h2><p>单页表的主要优势在于简化了地址转换过程，减少了内存访问的开销。由于用户线程和内核线程共享同一张页表，不需要在上下文切换时频繁切换页表，这可以提高地址转换的效率。此外，单页表还可以节省内存，因为不需要为每个用户线程分配独立的页表。</p><h2 id="双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？"><a href="#双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？" class="headerlink" title="双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？"></a>双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？</h2><p>在双页表实现下，页表的更换通常在发生上下文切换时需要。当从用户态切换到内核态或从一个进程切换到另一个进程时，需要加载相应的页表，以确保正确的地址转换。如果操作系统采用了每个进程独立的页表，那么在进程切换时需要更换页表。</p><p>如果我写一个单页表操作系统，我会选择在发生进程切换时更换页表，因为这是最频繁的上下文切换情况之一。在其他情况下，如从用户态切换到内核态，可能不需要更换整张页表，而只需修改页表项的权限位来实现访问控制。这样可以减少页表更换的开销，提高性能。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>修改user项目中的makefile，删除ch4_</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;为何指定 TRAMPOLINE 和 TRAPFRAME 在 va 的最高位？&lt;br&gt;TRAMPOLINE 和 TRAPFRAME 被定义在最高的虚拟内存地址上，是因为它们在操作系统的内存布局中起着重要作用。&lt;br&gt;TRAMPOLINE 被用作从用户</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="内存管理" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="MMU" scheme="http://example.com/tags/MMU/"/>
    
    <category term="虚拟内存" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
    <category term="分页分段" scheme="http://example.com/tags/%E5%88%86%E9%A1%B5%E5%88%86%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>uCore 实验第 3 章 - 多道程序与分时多任务</title>
    <link href="http://example.com/2023/09/02/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC3%E7%AB%A0-%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%88%86%E6%97%B6%E5%A4%9A%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2023/09/02/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC3%E7%AB%A0-%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%88%86%E6%97%B6%E5%A4%9A%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-09-02T08:03:02.000Z</published>
    <updated>2023-09-09T04:01:37.232Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动时初始化进程表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">for</span> (p = pool; p &lt; &amp;pool[NPROC]; p++) &#123;</span><br><span class="line">        p-&gt;state = UNUSED;</span><br><span class="line">        <span class="comment">// p - pool 是 p 指向的 proc 在 pool 中的下标，因此 p - pool 变化情况是 0, 1, 2, ..., NPROC - 1</span></span><br><span class="line">        p-&gt;kstack    = (uint64)kstack[p - pool];</span><br><span class="line">        p-&gt;ustack    = (uint64)ustack[p - pool];</span><br><span class="line">        p-&gt;trapframe = (struct trapframe *)trapframe[p - pool];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">* LAB1: you may need to initialize your new fields of proc here</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    idle.kstack  = (uint64)boot_stack_top;</span><br><span class="line">    idle.pid     = <span class="number">0</span>;</span><br><span class="line">    current_proc = &amp;idle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>p - pool 表示什么？<br>假设我们有一个名为 pool 的数组，其中包含了多个类型为 struct proc 的元素，并且有一个指针 p 指向其中的某个元素。<br>当 p 指向 pool 数组的第一个元素时，p - pool 的结果将是 0，因为指针相对于数组首地址的偏移量为 0。<br>当 p 指向 pool 数组的第二个元素时，p - pool 的结果将是 1，因为指针相对于数组首地址的偏移量为 1。<br>以此类推，当 p 指向 pool 数组的第 N 个元素时，p - pool 的结果将是 N-1，因为指针相对于数组首地址的偏移量为 N-1。<br>总结来说，如果 p 是指向 pool 数组中第 N 个元素的指针，那么 p - pool 的结果将是 N-1。</p></blockquote><p>原调度函数每次都会从 pool 数组的第一个元素开始遍历，这样会导致每次都是从第一个进程开始运行，而不是从上次运行的进程开始运行。需要修改为如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调度程序永不返回。它循环执行以下操作：</span></span><br><span class="line"><span class="comment">//  - 选择要运行的进程。</span></span><br><span class="line"><span class="comment">//  - 切换以启动运行该进程。</span></span><br><span class="line"><span class="comment">//  - 最终，该进程通过切换将控制权</span></span><br><span class="line"><span class="comment">//    传递回调度程序。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">last_checked_proc</span> =</span> pool; <span class="comment">// 初始化指针为 pool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (p = last_checked_proc; p &lt; &amp;pool[NPROC];</span><br><span class="line">             p++) &#123; <span class="comment">// 将 p 初始化为 last_checked_proc</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;state == RUNNABLE) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * LAB1：你可能需要在这里初始化进程的起始时间</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                p-&gt;state     = RUNNING;</span><br><span class="line">                current_proc = p;</span><br><span class="line">                swtch(&amp;idle.context, &amp;p-&gt;context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last_checked_proc = pool + <span class="number">1</span>; <span class="comment">// 更新 last_checked_proc 的值为下一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LAB1"><a href="#LAB1" class="headerlink" title="LAB1"></a>LAB1</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> os/loader.c           |   <span class="number">5</span> +-</span><br><span class="line"> os/proc.c             |  <span class="number">15</span> +-</span><br><span class="line"> os/proc.h             |  <span class="number">23</span> +-</span><br><span class="line"> os/syscall.c          |  <span class="number">55</span> ++++-</span><br><span class="line"> os/syscall_ids.h      |   <span class="number">5</span> +-</span><br><span class="line"> os/timer.h            |   <span class="number">2</span> +</span><br><span class="line"> <span class="number">9</span> files changed, <span class="number">374</span> insertions(+), <span class="number">291</span> deletions(-)</span><br><span class="line"></span><br><span class="line">diff --git a/os/loader.c b/os/loader.c</span><br><span class="line">index b45e85d..b21b0a4 <span class="number">100644</span></span><br><span class="line">--- a/os/loader.c</span><br><span class="line">+++ b/os/loader.c</span><br><span class="line">@@ <span class="number">-1</span>,<span class="number">6</span> +<span class="number">1</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;loader.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;defs.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trap.h&quot;</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> uint64  app_num;</span><br><span class="line"> <span class="keyword">static</span> uint64 *app_info_ptr;</span><br><span class="line">@@ <span class="number">-49</span>,<span class="number">8</span> +<span class="number">50</span>,<span class="number">10</span> @@ <span class="function"><span class="keyword">int</span> <span class="title">run_all_app</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         trapframe-&gt;sp  </span>= (uint64)p-&gt;ustack + USER_STACK_SIZE;</span><br><span class="line">         p-&gt;state       = RUNNABLE;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to initialize your new fields of proc here</span></span><br><span class="line"><span class="comment">+* LAB1: 初始化系统调用数以及进程开始时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+        <span class="built_in">memset</span>(p-&gt;syscall_times, <span class="number">0</span>, MAX_SYSCALL_NUM * <span class="keyword">sizeof</span>(uint32));</span><br><span class="line">+        p-&gt;start_time = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/os/proc.c b/os/proc.c</span><br><span class="line">index fee3886.<span class="number">.0</span>c69ae5 <span class="number">100644</span></span><br><span class="line">--- a/os/proc.c</span><br><span class="line">+++ b/os/proc.c</span><br><span class="line">@@ <span class="number">-2</span>,<span class="number">6</span> +<span class="number">2</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;defs.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;loader.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trap.h&quot;</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> <span class="title">pool</span>[<span class="title">NPROC</span>];</span></span><br><span class="line"> <span class="keyword">char</span>        kstack[NPROC][PAGE_SIZE];</span><br><span class="line">@@ <span class="number">-33</span>,<span class="number">9</span> +<span class="number">34</span>,<span class="number">8</span> @@ <span class="function"><span class="keyword">void</span> <span class="title">proc_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">         p-&gt;kstack    </span>= (uint64)kstack[p - pool];</span><br><span class="line">         p-&gt;ustack    = (uint64)ustack[p - pool];</span><br><span class="line">         p-&gt;trapframe = (struct trapframe *)trapframe[p - pool];</span><br><span class="line">-        <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to initialize your new fields of proc here</span></span><br><span class="line"><span class="comment">-*/</span></span><br><span class="line">+        <span class="built_in">memset</span>(p-&gt;syscall_times, <span class="number">0</span>, MAX_SYSCALL_NUM * <span class="keyword">sizeof</span>(uint32));</span><br><span class="line">+        p-&gt;start_time = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     idle.kstack  = (uint64)boot_stack_top;</span><br><span class="line">     idle.pid     = <span class="number">0</span>;</span><br><span class="line">@@ <span class="number">-47</span>,<span class="number">6</span> +<span class="number">47</span>,<span class="number">7</span> @@ <span class="function"><span class="keyword">int</span> <span class="title">allocpid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     <span class="keyword">static</span> <span class="keyword">int</span> PID </span>= <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> PID++;</span><br><span class="line"> &#125;</span><br><span class="line">+</span><br><span class="line"> <span class="comment">// 在进程表中寻找一个未使用的进程。</span></span><br><span class="line"> <span class="comment">// 如果找到，则初始化在内核中运行所需的状态。</span></span><br><span class="line"> <span class="comment">// 如果没有空闲的进程，或者内存分配失败，则返回 0。</span></span><br><span class="line">@@ <span class="number">-80</span>,<span class="number">14</span> +<span class="number">81</span>,<span class="number">18</span> @@ <span class="function"><span class="keyword">void</span> <span class="title">scheduler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">last_checked_proc</span> =</span> pool; <span class="comment">// 初始化指针为 pool</span></span><br><span class="line">-</span><br><span class="line">     <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">         <span class="keyword">for</span> (p = last_checked_proc; p &lt; &amp;pool[NPROC];</span><br><span class="line">              p++) &#123; <span class="comment">// 将 p 初始化为 last_checked_proc</span></span><br><span class="line">             <span class="keyword">if</span> (p-&gt;state == RUNNABLE) &#123;</span><br><span class="line">                 <span class="comment">/*</span></span><br><span class="line"><span class="comment">-                * LAB1：你可能需要在这里初始化进程的起始时间</span></span><br><span class="line"><span class="comment">+                * LAB1：在这里初始化进程的开始时间</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">+                <span class="keyword">if</span> (p-&gt;start_time == <span class="number">0</span>) &#123;</span><br><span class="line">+                    uint64 cycle = get_cycle();</span><br><span class="line">+                    p-&gt;start_time =</span><br><span class="line">+                        (cycle % CPU_FREQ) * MILLISECONDS_PER_SECOND / CPU_FREQ;</span><br><span class="line">+                &#125;</span><br><span class="line">                 p-&gt;state     = RUNNING;</span><br><span class="line">                 current_proc = p;</span><br><span class="line">                 swtch(&amp;idle.context, &amp;p-&gt;context);</span><br><span class="line">diff --git a/os/proc.h b/os/proc.h</span><br><span class="line">index d208c5d.<span class="number">.53576</span>bf <span class="number">100644</span></span><br><span class="line">--- a/os/proc.h</span><br><span class="line">+++ b/os/proc.h</span><br><span class="line">@@ <span class="number">-3</span>,<span class="number">7</span> +<span class="number">3</span>,<span class="number">8</span> @@</span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;types.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line">-<span class="meta">#<span class="meta-keyword">define</span> NPROC (16)</span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">define</span> NPROC           (16)  <span class="comment">// 最大进程数</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">define</span> MAX_SYSCALL_NUM (500) <span class="comment">// 最大系统调用数</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// Saved registers for kernel context switches.</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">context</span> &#123;</span></span><br><span class="line">@@ <span class="number">-42</span>,<span class="number">14</span> +<span class="number">43</span>,<span class="number">28</span> @@ <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">     uint64            kstack;    <span class="comment">// 进程内核栈虚拟地址 (内核页表)</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">trapframe</span>;</span> <span class="comment">// 进程中断帧</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">context</span>    <span class="title">context</span>;</span> <span class="comment">// 用于保存进程内核态的寄存器信息，进程切换时使用</span></span><br><span class="line">-                               <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to add some new fields here</span></span><br><span class="line"><span class="comment">+    /*</span></span><br><span class="line"><span class="comment">+* LAB1: 添加一些新的成员用于新的 sys_task_info 系统调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+    uint32 syscall_times[MAX_SYSCALL_NUM]; <span class="comment">// 系统调用次数统计 <span class="doctag">TODO:</span> 后续改为指针</span></span><br><span class="line">+    uint64 start_time;                     <span class="comment">// 进程开始运行时间</span></span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to define struct for TaskInfo here</span></span><br><span class="line"><span class="comment">+* LAB1: 定义 TaskInfo 结构体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+<span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">+    UnInit,</span><br><span class="line">+    Ready,</span><br><span class="line">+    Running,</span><br><span class="line">+    Exited,</span><br><span class="line">+&#125; TaskStatus;</span><br><span class="line">+</span><br><span class="line">+<span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">+    TaskStatus status;</span><br><span class="line">+    uint32     syscall_times[MAX_SYSCALL_NUM];</span><br><span class="line">+    <span class="keyword">int</span>        time; <span class="comment">// 进程运行时间统计</span></span><br><span class="line">+&#125; TaskInfo;</span><br><span class="line"> </span><br><span class="line"> <span class="function">struct proc *<span class="title">curr_proc</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span>         <span class="title">exit</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">diff --git a/os/syscall.c b/os/syscall.c</span><br><span class="line">index <span class="number">1</span>cc5aeb..f54ed86 <span class="number">100644</span></span><br><span class="line">--- a/os/syscall.c</span><br><span class="line">+++ b/os/syscall.c</span><br><span class="line">@@ <span class="number">-4</span>,<span class="number">6</span> +<span class="number">4</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;syscall_ids.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;timer.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;trap.h&quot;</span></span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;proc.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="function">uint64 <span class="title">sys_write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *str, uint len)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">@@ <span class="number">-31</span>,<span class="number">14</span> +<span class="number">32</span>,<span class="number">46</span> @@ <span class="function">uint64 <span class="title">sys_sched_yield</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> uint64 <span class="title">sys_gettimeofday</span><span class="params">(TimeVal *val, <span class="keyword">int</span> _tz)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     uint64 cycle = get_cycle();</span><br><span class="line">-    val-&gt;sec     = cycle / CPU_FREQ;</span><br><span class="line">-    val-&gt;usec    = (cycle % CPU_FREQ) * MICROSECONDS_PER_SECOND / CPU_FREQ;</span><br><span class="line">+    tracef(<span class="string">&quot;sys_gettimeofday cycle = %d&quot;</span>, cycle);</span><br><span class="line">+    val-&gt;sec  = cycle / CPU_FREQ;</span><br><span class="line">+    val-&gt;msec = (cycle % CPU_FREQ) * MILLISECONDS_PER_SECOND / CPU_FREQ;</span><br><span class="line">+    val-&gt;usec = (cycle % CPU_FREQ) * MICROSECONDS_PER_SECOND / CPU_FREQ;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">-<span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to define sys_task_info here</span></span><br><span class="line"><span class="comment">-*/</span></span><br><span class="line">+<span class="comment">/** </span></span><br><span class="line"><span class="comment">+ * LAB1：此处定义 sys_task_info 函数</span></span><br><span class="line"><span class="comment">+ * 查询当前正在执行的任务信息，任务信息包括任务控制块相关信息（任务状态）、任务使用的系统调用次数、任务总运行时长。 </span></span><br><span class="line"><span class="comment">+ */</span></span><br><span class="line">+<span class="function"><span class="keyword">int</span> <span class="title">sys_task_info</span><span class="params">(TaskInfo *ti)</span></span></span><br><span class="line"><span class="function">+</span>&#123;</span><br><span class="line">+    <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">proc</span> =</span> curr_proc();</span><br><span class="line">+    <span class="comment">// <span class="doctag">TODO:</span> proc 检查为空</span></span><br><span class="line">+    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_SYSCALL_NUM; i++) &#123;</span><br><span class="line">+        ti-&gt;syscall_times[i] = proc-&gt;syscall_times[i];</span><br><span class="line">+    &#125;</span><br><span class="line">+    uint64 cycle = get_cycle();</span><br><span class="line">+    uint64 current_time =</span><br><span class="line">+        (cycle % CPU_FREQ) * MILLISECONDS_PER_SECOND / CPU_FREQ;</span><br><span class="line">+    infof(<span class="string">&quot;sys_task_info current_time = %d&quot;</span>, current_time);</span><br><span class="line">+    infof(<span class="string">&quot;proc-&gt;start_time = %d&quot;</span>, proc-&gt;start_time);</span><br><span class="line">+    infof(<span class="string">&quot;ti-&gt;time = %d&quot;</span>, current_time - proc-&gt;start_time);</span><br><span class="line">+</span><br><span class="line">+    <span class="keyword">if</span> (proc-&gt;state == RUNNING) &#123;</span><br><span class="line">+        ti-&gt;status = Running;</span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;state == RUNNABLE) &#123;</span><br><span class="line">+        ti-&gt;status = Ready;</span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;state == SLEEPING) &#123;</span><br><span class="line">+        ti-&gt;status = Ready;</span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;state == ZOMBIE) &#123;</span><br><span class="line">+        ti-&gt;status = Exited;</span><br><span class="line">+    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc-&gt;state == UNUSED) &#123;</span><br><span class="line">+        ti-&gt;status = UnInit;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    ti-&gt;time = current_time - proc-&gt;start_time;</span><br><span class="line">+    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">+&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">extern</span> <span class="keyword">char</span> trap_page[];</span><br><span class="line"> </span><br><span class="line">@@ <span class="number">-51</span>,<span class="number">8</span> +<span class="number">84</span>,<span class="number">9</span> @@ <span class="function"><span class="keyword">void</span> <span class="title">syscall</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     <span class="title">tracef</span><span class="params">(<span class="string">&quot;syscall %d args = [%x, %x, %x, %x, %x, %x]&quot;</span>, id, args[<span class="number">0</span>], args[<span class="number">1</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">            args[<span class="number">2</span>], args[<span class="number">3</span>], args[<span class="number">4</span>], args[<span class="number">5</span>])</span></span>;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to update syscall counter for task info here</span></span><br><span class="line"><span class="comment">+* LAB1: 更新系统调用次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+    curr_proc()-&gt;syscall_times[id]++;</span><br><span class="line">     <span class="keyword">switch</span> (id) &#123;</span><br><span class="line">     <span class="keyword">case</span> SYS_write:</span><br><span class="line">         ret = sys_write(args[<span class="number">0</span>], (<span class="keyword">char</span> *)args[<span class="number">1</span>], args[<span class="number">2</span>]);</span><br><span class="line">@@ <span class="number">-67</span>,<span class="number">8</span> +<span class="number">101</span>,<span class="number">15</span> @@ <span class="function"><span class="keyword">void</span> <span class="title">syscall</span><span class="params">()</span></span></span><br><span class="line"><span class="function">         ret </span>= sys_gettimeofday((TimeVal *)args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to add SYS_taskinfo case here</span></span><br><span class="line"><span class="comment">+* LAB1: 在此处添加 SYS_task_info 的系统调用处理情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+    <span class="keyword">case</span> SYS_task_info:</span><br><span class="line">+        ret = sys_task_info((TaskInfo *)args[<span class="number">0</span>]);</span><br><span class="line">+        <span class="keyword">break</span>;</span><br><span class="line">+    <span class="keyword">case</span> SYS_getpid:</span><br><span class="line">+        infof(<span class="string">&quot;SYS_getpid %d&quot;</span>, SYS_getpid);</span><br><span class="line">+        ret = curr_proc()-&gt;pid;</span><br><span class="line">+        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">         ret = <span class="number">-1</span>;</span><br><span class="line">         errorf(<span class="string">&quot;unknown syscall %d&quot;</span>, id);</span><br><span class="line">diff --git a/os/syscall_ids.h b/os/syscall_ids.h</span><br><span class="line">index <span class="number">05</span>a6cb9.<span class="number">.3</span>c1a5a9 <span class="number">100644</span></span><br><span class="line">--- a/os/syscall_ids.h</span><br><span class="line">+++ b/os/syscall_ids.h</span><br><span class="line">@@ <span class="number">-277</span>,<span class="number">9</span> +<span class="number">277</span>,<span class="number">8</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_io_pgetevents          292</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_rseq                   293</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_kexec_file_load        294</span></span><br><span class="line">-<span class="comment">/*</span></span><br><span class="line"><span class="comment">-* LAB1: you may need to define SYS_task_info here</span></span><br><span class="line"><span class="comment">-*/</span></span><br><span class="line">+<span class="comment">// LAB1：添加 SYS_task_info 的系统调用号</span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">define</span> SYS_task_info          410</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_pidfd_send_signal  424</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_io_uring_setup     425</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> SYS_io_uring_enter     426</span></span><br><span class="line">diff --git a/os/timer.h b/os/timer.h</span><br><span class="line">index c6ebd14.<span class="number">.63</span>ab45c <span class="number">100644</span></span><br><span class="line">--- a/os/timer.h</span><br><span class="line">+++ b/os/timer.h</span><br><span class="line">@@ <span class="number">-6</span>,<span class="number">6</span> +<span class="number">6</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> TICKS_PER_SEC (100)</span></span><br><span class="line"> <span class="comment">// QEMU</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> CPU_FREQ                (12500000)</span></span><br><span class="line">+<span class="meta">#<span class="meta-keyword">define</span> MILLISECONDS_PER_SECOND (1000)</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> MICROSECONDS_PER_SECOND (1000000)</span></span><br><span class="line"> </span><br><span class="line"> <span class="function">uint64 <span class="title">get_cycle</span><span class="params">()</span></span>;</span><br><span class="line">@@ <span class="number">-14</span>,<span class="number">6</span> +<span class="number">15</span>,<span class="number">7</span> @@ <span class="function"><span class="keyword">void</span>   <span class="title">set_next_timer</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">     uint64 sec;  <span class="comment">// 自 Unix 纪元起的秒数</span></span><br><span class="line">+    uint64 msec; <span class="comment">// 毫秒数</span></span><br><span class="line">     uint64 usec; <span class="comment">// 微秒数</span></span><br><span class="line"> &#125; TimeVal;</span><br><span class="line"> </span><br><span class="line">-- </span><br><span class="line"><span class="number">2.34</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="问答作业"><a href="#问答作业" class="headerlink" title="问答作业"></a>问答作业</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>正确进入 U 态后，程序的特征还应有：使用 S 态特权指令，访问 S 态寄存器后会报错。请同学们可以自行测试这些内容（参考 前三个测例，描述程序出错行为，同时注意注明你使用的 sbi 及其版本。</p><p>测试前三个测试用例指的是<code>uCore-Tutorial-Code-2023S/user/src/</code> 目录下的三个<code>bad</code>测试用例，查看<code>user</code>项目的 Makefile 可以发现在编译时修改<code>CHAPTER</code>参数值为<code>2_bad</code>即可编译运行这些测试用例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[rustsbi] RustSBI version 0.3.0-alpha.2, adapting to RISC-V SBI v1.0.0</span><br><span class="line">.______       __    __      _______.___________.  _______..______   __</span><br><span class="line">|   _  \     |  |  |  |    /       |           | /       ||   _  \ |  |</span><br><span class="line">|  |_)  |    |  |  |  |   |   (----`---|  |----`|   (----`|  |_)  ||  |</span><br><span class="line">|      /     |  |  |  |    \   \       |  |      \   \    |   _  &lt; |  |</span><br><span class="line">|  |\  \----.|  `--<span class="string">&#x27;  |.----)   |      |  |  .----)   |   |  |_)  ||  |</span></span><br><span class="line"><span class="string">| _| `._____| \______/ |_______/       |__|  |_______/    |______/ |__|</span></span><br><span class="line"><span class="string">[rustsbi] Implementation     : RustSBI-QEMU Version 0.2.0-alpha.2</span></span><br><span class="line"><span class="string">[rustsbi] Platform Name      : riscv-virtio,qemu</span></span><br><span class="line"><span class="string">[rustsbi] Platform SMP       : 1</span></span><br><span class="line"><span class="string">[rustsbi] Platform Memory    : 0x80000000..0x88000000</span></span><br><span class="line"><span class="string">[rustsbi] Boot HART          : 0</span></span><br><span class="line"><span class="string">[rustsbi] Device Tree Region : 0x87000000..0x87000ef2</span></span><br><span class="line"><span class="string">[rustsbi] Firmware Address   : 0x80000000</span></span><br><span class="line"><span class="string">[rustsbi] Supervisor Address : 0x80200000</span></span><br><span class="line"><span class="string">[rustsbi] pmp01: 0x00000000..0x80000000 (-wr)</span></span><br><span class="line"><span class="string">[rustsbi] pmp02: 0x80000000..0x80200000 (---)</span></span><br><span class="line"><span class="string">[rustsbi] pmp03: 0x80200000..0x88000000 (xwr)</span></span><br><span class="line"><span class="string">[rustsbi] pmp04: 0x88000000..0x00000000 (-wr)</span></span><br><span class="line"><span class="string">[TRACE 0]load app 0 at 0x0000000080400000</span></span><br><span class="line"><span class="string">[TRACE 0]load app 1 at 0x0000000080420000</span></span><br><span class="line"><span class="string">[TRACE 0]load app 2 at 0x0000000080440000</span></span><br><span class="line"><span class="string">[INFO 0]start scheduler!</span></span><br><span class="line"><span class="string">[ERROR 1]unknown trap: 0x0000000000000007, stval = 0x0000000000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[INFO 1]进程 1 以代码 -1 退出</span></span><br><span class="line"><span class="string">IllegalInstruction in application, core dumped.</span></span><br><span class="line"><span class="string">[INFO 2]进程 2 以代码 -3 退出</span></span><br><span class="line"><span class="string">IllegalInstruction in application, core dumped.</span></span><br><span class="line"><span class="string">[INFO 3]进程 3 以代码 -3 退出</span></span><br><span class="line"><span class="string">[PANIC 3] os/loader.c:15: all apps over</span></span><br></pre></td></tr></table></figure><p>第一个进程测试用例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="number">0</span>;</span><br><span class="line">*p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在您提供的代码中，将空指针分配给指针变量*p 后，试图对其进行解引用并将值 0 赋给该指针。由于用户模式下禁止直接访问物理内存，操作系统会检测到这个非法操作并触发异常。因此，该程序 IllegalInstruction in application, core dumped.</p><p>在 RISC-V 架构中，U 模式是最低的用户模式，用户程序无法直接访问物理内存或其他特权级别资源。这种限制是为了确保操作系统的安全性和稳定性。</p><p>第二个进程测试用例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;sret&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试图使用汇编语言执行 sret 指令，该指令用于从中断或异常处理程序返回。由于用户模式下禁止直接访问特权级别寄存器，操作系统会检测到这个非法操作并触发异常。因此，该程序 IllegalInstruction in application, core dumped。</p><p>第三个进程测试用例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">uint64 x;</span><br><span class="line"><span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(<span class="string">&quot;csrr %0, sstatus&quot;</span> : <span class="string">&quot;=r&quot;</span>(x))</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因同上，试图使用汇编语言执行 csrr 指令，该指令用于从特权级别寄存器中读取值。由于用户模式下禁止直接访问特权级别寄存器，操作系统会检测到这个非法操作并触发异常。因此，该程序 IllegalInstruction in application, core dumped。</p><p>在操作系统代码中，触发异常后会进入<code>void usertrap()</code> 函数，该函数会根据 <code>scause</code> 寄存器的值判断异常类型，用例中的结果进入了<code>case IllegalInstruction</code>，其中 <code>IllegalInstruction = 2</code>。我们查阅手册 <code>riscv-privileged.pdf</code> ，可以查到 <code>IllegalInstruction</code> 的值为 2，与预期相符。</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>请结合用例理解 trampoline.S 中两个函数 <code>userret</code> 和 <code>uservec</code> 的作用，并回答如下几个问题：</p><h3 id="L79-刚进入-userret-时，a0、a1-分别代表了什么值。"><a href="#L79-刚进入-userret-时，a0、a1-分别代表了什么值。" class="headerlink" title="L79: 刚进入 userret 时，a0、a1 分别代表了什么值。"></a>L79: 刚进入 <code>userret</code> 时，<code>a0</code>、<code>a1</code> 分别代表了什么值。</h3><p>在进入<code>userret</code>函数时，<code>a0</code>和<code>a1</code>分别代表以下值：</p><ul><li><code>a0</code>: TRAPFRAME 的地址，指向当前进程的陷阱帧（trapframe）结构体。</li><li><code>a1</code>: 用户页表的地址，即进程的页表（pagetable）。这个地址会被写入到<code>satp</code>寄存器中，用于切换到用户模式的页表。</li></ul><h3 id="L87-L88-sfence-指令有何作用？为什么要执行该指令，当前章节中，删掉该指令会导致错误吗？"><a href="#L87-L88-sfence-指令有何作用？为什么要执行该指令，当前章节中，删掉该指令会导致错误吗？" class="headerlink" title="L87-L88: sfence 指令有何作用？为什么要执行该指令，当前章节中，删掉该指令会导致错误吗？"></a>L87-L88: <code>sfence</code> 指令有何作用？为什么要执行该指令，当前章节中，删掉该指令会导致错误吗？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csrw satp, a1</span><br><span class="line">sfence.vma zero, zero</span><br></pre></td></tr></table></figure><p><code>sfence</code>指令（Store Fence）的作用是确保之前的存储操作完成，并且对其他处理器上的核心可见。</p><p>执行<code>sfence</code>指令的主要目的是为了保证内存访问的顺序性和一致性。在多核处理器系统中，不同的核心可能会有自己的缓存，当一个核心修改了共享内存中的数据时，为了保证其他核心能够看到这个修改，需要使用<code>sfence</code>指令来刷新缓存并将修改写回共享内存。</p><p>在代码中，<code>sfence</code>指令被用于确保对用户页表的修改对其他处理器上的核心可见。因为目前我只使用了单核处理器，所以不会出现多核处理器的情况，因此<code>sfence</code>指令的作用是确保对用户页表的修改对当前核心可见。</p><p>因此，当前章节中，<strong>删掉该指令不会导致错误</strong>。</p><h3 id="L96-L125-为何注释中说要除去-a0？哪一个地址代表-a0？现在-a0-的值存在何处？"><a href="#L96-L125-为何注释中说要除去-a0？哪一个地址代表-a0？现在-a0-的值存在何处？" class="headerlink" title="L96-L125: 为何注释中说要除去 a0？哪一个地址代表 a0？现在 a0 的值存在何处？"></a>L96-L125: 为何注释中说要除去 <code>a0</code>？哪一个地址代表 <code>a0</code>？现在 <code>a0</code> 的值存在何处？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># restore all but a0 from TRAPFRAME</span><br><span class="line">ld ra, 40(a0)</span><br><span class="line">ld sp, 48(a0)</span><br><span class="line">ld t5, 272(a0)</span><br><span class="line">ld t6, 280(a0)</span><br></pre></td></tr></table></figure><p><code>a0</code> 是<strong>保存在 <code>sscratch</code> 寄存器中的</strong>，首先，该代码通过 <code>ld</code> 指令从 <code>TRAPFRAME</code> 中加载各个寄存器的值。然后，这些值被存储在相应的寄存器中，以便在恢复用户上下文时使用。</p><p>接下来，代码使用 <code>csrrw</code> 指令将 sscratch 寄存器的值与 <code>a0</code>（即 <code>TRAPFRAME</code>）进行交换。这样做是为了将用户的 <code>a0</code>（<code>TRAPFRAME</code>）保存在 <code>sscratch</code> 寄存器中，以便后续步骤可以正确地恢复用户上下文。</p><p>最后，通过 <code>sret</code> 指令返回到用户模式，并将控制权交给用户代码。在执行 <code>sret</code> 指令后，处理器将根据用户上下文中的 <code>sepc</code> 寄存器的值跳转到用户代码的指令地址。返回的同时，处理器还会自动恢复 <code>sstatus</code> 寄存器的值，以确保正确的特权级别和中断状态。</p><h3 id="userret：中发生状态切换在哪一条指令？为何执行之后会进入用户态？"><a href="#userret：中发生状态切换在哪一条指令？为何执行之后会进入用户态？" class="headerlink" title="userret：中发生状态切换在哪一条指令？为何执行之后会进入用户态？"></a><code>userret</code>：中发生状态切换在哪一条指令？为何执行之后会进入用户态？</h3><p>在<code>userret</code>函数中，发生状态切换的指令是<code>sret</code>指令。 </p><p><code>sret</code>指令用于从内核模式切换到用户模式，并将控制权交给用户代码。执行<code>sret</code>指令后，处理器会根据用户上下文中的<code>sepc</code>寄存器的值跳转到用户代码的指令地址。</p><p>执行<code>sret</code>指令之后进入用户态的原因是，该指令会自动恢复<code>sstatus</code>寄存器的值，以确保正确的特权级别和中断状态。当<code>sret</code>指令执行后，处理器将从内核态切换回用户态，程序将继续执行用户代码。这意味着<code>userret</code>函数成功完成了从内核切换到用户模式的过程。</p><h3 id="L29：执行之后，a0-和-sscratch-中各是什么值，为什么？"><a href="#L29：执行之后，a0-和-sscratch-中各是什么值，为什么？" class="headerlink" title="L29：执行之后，a0 和 sscratch 中各是什么值，为什么？"></a>L29：执行之后，a0 和 sscratch 中各是什么值，为什么？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrrw a0, sscratch, a0     </span><br></pre></td></tr></table></figure><p>在执行指令后，<code>a0</code>和<code>sscratch</code>中的值发生了互换。</p><p>假设原始<code>a0</code>寄存器中的值为 X，而<code>sscratch</code>寄存器中的值为 Y。执行<code>csrrw a0, sscratch, a0</code>指令后，<code>a0</code>寄存器中的值变为 Y，而<code>sscratch</code>寄存器中的值变为 X。</p><p>这是因为<code>csrrw</code>指令是一个特权指令，用于将某个 CSR（Control and Status Register）的值读取到目标寄存器，然后将目标寄存器的值写回到该 CSR 中。在这里，<code>csrrw a0, sscratch, a0</code>指令将<code>sscratch</code>寄存器的值读取到<code>a0</code>寄存器中，同时将<code>a0</code>寄存器中的值写回到<code>sscratch</code>寄存器中，从而实现了两者之间的数据交换。</p><h3 id="L32-L61-从-trapframe-第几项开始保存？为什么？是否从该项开始保存了所有的值，如果不是，为什么？"><a href="#L32-L61-从-trapframe-第几项开始保存？为什么？是否从该项开始保存了所有的值，如果不是，为什么？" class="headerlink" title="L32-L61: 从 trapframe 第几项开始保存？为什么？是否从该项开始保存了所有的值，如果不是，为什么？"></a>L32-L61: 从 trapframe 第几项开始保存？为什么？是否从该项开始保存了所有的值，如果不是，为什么？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sd ra, 40(a0)</span><br><span class="line">sd sp, 48(a0)</span><br><span class="line">...</span><br><span class="line">sd t5, 272(a0)</span><br><span class="line">sd t6, 280(a0)</span><br></pre></td></tr></table></figure><h3 id="进入-S-态是哪一条指令发生的？"><a href="#进入-S-态是哪一条指令发生的？" class="headerlink" title="进入 S 态是哪一条指令发生的？"></a>进入 S 态是哪一条指令发生的？</h3><h3 id="L75-L76-ld-t0-16-a0-执行之后，t0中的值是什么，解释该值的由来？"><a href="#L75-L76-ld-t0-16-a0-执行之后，t0中的值是什么，解释该值的由来？" class="headerlink" title="L75-L76: ld t0, 16(a0) 执行之后，t0中的值是什么，解释该值的由来？"></a>L75-L76: <code>ld t0, 16(a0)</code> 执行之后，<code>t0</code>中的值是什么，解释该值的由来？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld t0, 16(a0)</span><br><span class="line">jr t0</span><br></pre></td></tr></table></figure><p><code>ld t0, 16(a0)</code>就是从 <code>trapframe</code> 中恢复 <code>t0</code>寄存器值，<code>t0</code>保存了<code>kernel_trap</code>的入口地址。使用 <code>jr t0</code>，就跳转到了我们早先设定在 <code>trapframe-&gt;kernel_trap</code> 中的地址，也就是 <code>trap.c</code> 之中的 <code>usertrap</code> 函数。这个函数在 <code>main</code> 的初始化之中已经调用了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>yq 为 yaml 文件内容排序</title>
    <link href="http://example.com/2023/09/01/yq%E4%B8%BAyaml%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2023/09/01/yq%E4%B8%BAyaml%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8E%92%E5%BA%8F/</id>
    <published>2023-09-01T13:37:25.000Z</published>
    <updated>2023-09-01T13:48:35.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>配置 <code>yaml</code> 文件时会遇到需要将配置的内容按照键值排序的情况，比如下面这样<code>riscv_fork_list.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">accumulo</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">abseil-cpp</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">acpica-tools</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">acpid</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">activemq</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">afflib</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">adcli</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">adwaita-icon-theme</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aide</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alsa-lib</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amtk</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">anaconda</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-sshd</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">annobin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">antlr3</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-csv</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aom</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-beanutils</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-daemon</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-el</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-exec</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-jexl</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-poi</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-rat</span></span><br></pre></td></tr></table></figure><p>我想按照 <code>name</code> 的字母顺序排序，可以使用 <code>yq</code> 工具来实现。</p><h1 id="安装-yq"><a href="#安装-yq" class="headerlink" title="安装 yq"></a>安装 yq</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &amp;&amp;\</span><br><span class="line">    chmod +x /usr/bin/yq</span><br></pre></td></tr></table></figure><h1 id="使用-yq"><a href="#使用-yq" class="headerlink" title="使用 yq"></a>使用 yq</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yq -i <span class="string">&#x27;.packages |= sort_by(.name)&#x27;</span> riscv_fork_list.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">abseil-cpp</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">accumulo</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">acpica-tools</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">acpid</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">activemq</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">adcli</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">adwaita-icon-theme</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">afflib</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aide</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alsa-lib</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amtk</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">anaconda</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">annobin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">antlr3</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aom</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-beanutils</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-csv</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-daemon</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-el</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-exec</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-commons-jexl</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-poi</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-rat</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apache-sshd</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;配置 &lt;code&gt;yaml&lt;/code&gt; 文件时会遇到需要将配置的内容按照键值排序的情况，比如下面这样&lt;code&gt;riscv_fork_li</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="yaml" scheme="http://example.com/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>解决复制 Markdown 文本到思源笔记无法转义为 Markdown 格式</title>
    <link href="http://example.com/2023/09/01/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6Markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAMarkdown%E6%A0%BC%E5%BC%8F/"/>
    <id>http://example.com/2023/09/01/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6Markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAMarkdown%E6%A0%BC%E5%BC%8F/</id>
    <published>2023-09-01T12:25:05.000Z</published>
    <updated>2023-09-01T12:33:38.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 VSCode 中编辑 Markdown 文本，复制到思源笔记后，思源笔记无法转义为 Markdown 格式。会变成一个代码块，但是代码块内的内容并不是复制的内容。</p><p>比如上面这段话复制到思源笔记成了下图这样：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/09/01/264c4a2f58447a13c50012a676bf0ed7.png"></p><p>但是我需要的是能够转义为 Markdown 的阅读模式。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>问题的原因在于 VSCode 复制的文本是带格式的，而思源笔记默认的粘贴模式是纯文本模式，所以会出现上面的问题。</p><p>解决方法就是从 VSCode 复制的内容为纯文本，一种可以把文本复制到 <code>txt</code> 文件中，再复制，但是比较麻烦。</p><p>第二种方法是使用 VSCode 的插件 <code>Copy Plain Text</code>，搜索下载后，默认快捷键为 <code>Ctrl+Alt+C</code>，可以复制为纯文本。</p><p>再次粘贴到思源笔记中，就可以转义为 Markdown 格式了。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/09/01/4f9aa2d7cb07f061aabbc5977977b6cb.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在 VSCode 中编辑 Markdown 文本，复制到思源笔记后，思源笔记无法转义为 Markdown 格式。会变成一个代</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="VSCode" scheme="http://example.com/tags/VSCode/"/>
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
    <category term="思源笔记" scheme="http://example.com/tags/%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>uCore 实验第 2 章 - 批处理系统</title>
    <link href="http://example.com/2023/08/31/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC2%E7%AB%A0-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/08/31/uCore-%E5%AE%9E%E9%AA%8C%E7%AC%AC2%E7%AB%A0-%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-08-31T15:16:38.000Z</published>
    <updated>2023-09-09T04:01:37.231Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    subgraph entry.S</span><br><span class="line">        _entry[_entry]</span><br><span class="line">    end</span><br><span class="line">    subgraph link_app.S</span><br><span class="line">        _app_num[_app_num]</span><br><span class="line">    end</span><br><span class="line">    subgraph main.c</span><br><span class="line">        main[main]</span><br><span class="line">    end</span><br><span class="line">    subgraph loader.c</span><br><span class="line">        loader_init[loader_init]</span><br><span class="line">        run_next_app[run_next_app]</span><br><span class="line">        load_app[load_app]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    _entry --&gt; main</span><br><span class="line">    main --&gt; loader_init</span><br><span class="line">    main --&gt; run_next_app</span><br><span class="line">    run_next_app --&gt; load_app</span><br><span class="line">    loader_init --&gt; _app_num</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="uCore 实验" scheme="http://example.com/categories/uCore-%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="uCore" scheme="http://example.com/tags/uCore/"/>
    
    <category term="Lab" scheme="http://example.com/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>如何离线安装 VSCode 插件</title>
    <link href="http://example.com/2023/08/29/%E5%A6%82%E4%BD%95%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VSCode%E6%8F%92%E4%BB%B6/"/>
    <id>http://example.com/2023/08/29/%E5%A6%82%E4%BD%95%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85VSCode%E6%8F%92%E4%BB%B6/</id>
    <published>2023-08-29T12:59:19.000Z</published>
    <updated>2023-08-29T14:23:50.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h1><p>在使用 VSCode 的过程中，我们经常会安装一些插件来提高开发效率。但是，由于某些原因，我们可能无法直接访问 VSCode 的插件市场，这时候我们就需要离线安装插件了。</p><p>这里存在两种情况，一种是为本地的 VSCode 安装插件，另一种是为远程的 VSCode 安装插件。本文将分别介绍这两种情况下的离线安装方法。</p><blockquote><p>远程 VSCode 也就是 VSCode 的<a href="https://code.visualstudio.com/docs/remote/remote-overview">Remote Development</a>功能，可以通过 SSH、Docker、WSL 等方式远程连接到远程主机上的 VSCode。</p></blockquote><h1 id="方法一：使用已安装的插件目录"><a href="#方法一：使用已安装的插件目录" class="headerlink" title="方法一：使用已安装的插件目录"></a>方法一：使用已安装的插件目录</h1><ul><li>从已经安装插件的电脑上拷贝所有插件，路径一般为 <code>C:\用户\用户名\.vscode\extensions</code></li><li>拷贝到离线安装的电脑上的 <code>.vscode/extensions</code> 文件夹下即可，重启 VScode 即可安装成功。</li></ul><p>对于远程 VSCode 我们需要知道，插件不区分操作系统，所以我们可以在本地的 Windows 上的 VSCode 上安装插件，然后将插件目录压缩后整个拷贝到远程主机上即可。</p><p>远程主机上的插件目录一般在 <code>~/.vscode-server/extensions</code> 下。将压缩的文件解药到这个目录下，重启 VSCode 即可。</p><h1 id="方法二：下载离线安装包-vslx-安装"><a href="#方法二：下载离线安装包-vslx-安装" class="headerlink" title="方法二：下载离线安装包 vslx 安装"></a>方法二：下载离线安装包 vslx 安装</h1><ul><li><p>到 <a href="https://marketplace.visualstudio.com/vscode">VScode 插件中心</a> 搜索需要使用的插件名称</p></li><li><p>下载对应的拓展程序文件，下载的文件的后缀是<code>.vslx</code><br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/29/f4349bbfc8cf734951fc70e2f5b0eabd.png"></p></li><li><p>VSCode 中安装<br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/29/25b2839add215a8a61449f0ac9b1ca81.png"></p></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景简介&quot;&gt;&lt;a href=&quot;#背景简介&quot; class=&quot;headerlink&quot; title=&quot;背景简介&quot;&gt;&lt;/a&gt;背景简介&lt;/h1&gt;&lt;p&gt;在使用 VSCode 的过程中，我们经常会安装一些插件来提高开发效率。但是，由于某些原因，我们可能无法直接访问 VSCode</summary>
      
    
    
    
    <category term="万能 VSCode" scheme="http://example.com/categories/%E4%B8%87%E8%83%BD-VSCode/"/>
    
    
    <category term="VSCode" scheme="http://example.com/tags/VSCode/"/>
    
    <category term="Efficiency" scheme="http://example.com/tags/Efficiency/"/>
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Windows 端口映射</title>
    <link href="http://example.com/2023/08/28/Windows%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/"/>
    <id>http://example.com/2023/08/28/Windows%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</id>
    <published>2023-08-28T15:24:53.000Z</published>
    <updated>2023-08-28T15:29:20.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>在 Windows 中，可以使用 netsh 命令来添加、查看和删除端口转发规则。</p><p>要<strong>添加一个端口转发规则</strong>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=&lt;local_address&gt; listenport=&lt;local_port&gt; connectaddress=&lt;remote_address&gt; connectport=&lt;remote_port&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>&lt;local_address&gt;</code>是本地监听的地址（可以是 IP 地址或 0.0.0.0 表示所有地址）。</li><li><code>&lt;local_port&gt;</code>是本地监听的端口。</li><li><code>&lt;remote_address&gt;</code>是转发连接到的远程地址。</li><li><code>&lt;remote_port&gt;</code>是转发连接到的远程端口。</li></ul><p>例如，要将本地的 8080 端口转发到远程服务器上的 80 端口，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=192.168.0.100 connectport=80</span><br></pre></td></tr></table></figure><p>要<strong>查看当前的端口转发规则</strong>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show v4tov4</span><br></pre></td></tr></table></figure><p>要<strong>删除特定的端口转发规则</strong>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenaddress=&lt;local_address&gt; listenport=&lt;local_port&gt;</span><br></pre></td></tr></table></figure><p>其中的<code>&lt;local_address&gt;</code>和<code>&lt;local_port&gt;</code>应该与你想删除的规则匹配。</p><p>请注意，执行这些操作通常需要管理员权限。</p><h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><p>使用开源工具<a href="https://github.com/zmjack/PortProxyGUI/releases">PortProxyGUI</a>可以在 UI 界面快速增删改查端口映射。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/28/e5bf0ce1f4a25150f69586825c2e7309.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h1&gt;&lt;p&gt;在 Windows 中，可以使用 netsh 命令来添加、查看和删除端口转发规则。&lt;/p&gt;
&lt;p&gt;要&lt;strong&gt;添加一个端口转发</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="工具，Efficiency，内网穿透" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%EF%BC%8CEfficiency%EF%BC%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透远程访问家里的 WSL2</title>
    <link href="http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%AE%B6%E9%87%8C%E7%9A%84WSL2/"/>
    <id>http://example.com/2023/08/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%AE%B6%E9%87%8C%E7%9A%84WSL2/</id>
    <published>2023-08-28T14:45:01.000Z</published>
    <updated>2023-08-29T12:35:19.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h1><p>WSL2 是 Windows 的子系统，可以在 Windows 上运行 Linux，但是 WSL2 是运行在虚拟机中的，所以无法直接访问 WSL2 中的服务，比如 SSH 服务。本文介绍如何使用内网穿透工具<strong>花生壳</strong>来实现远程访问 WSL2 中的服务。</p><p>实现这一需求需要完成两个功能。</p><ol><li>WSL2 中的服务是运行在虚拟机中的，如何将公网的访问转发到 WSL2 中。</li><li>Windows 没有公网 IP，如何通过公网来访问。</li></ol><h1 id="WSL2-端口转发"><a href="#WSL2-端口转发" class="headerlink" title="WSL2 端口转发"></a>WSL2 端口转发</h1><p>获取 WSL2 的 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname -I | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class="line">172.26.13.98</span><br></pre></td></tr></table></figure><p>Windows 自带的<code>netsh interface portproxy</code>可以实现端口转发。管理员身份打开 cmd，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=2222 connectaddress=172.26.13.98 connectport=22</span><br></pre></td></tr></table></figure><ul><li>listenport：公网访问的端口（改一个不冲突的就行）</li><li>connectaddress：WSL2 的 IP 地址</li><li>connectport：WSL2 中 SSH 服务的端口 (默认为 22，不需要更改)</li></ul><p>开启 Windows 防火墙入站规则，管理员身份打开 cmd，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=WSL2 dir=<span class="keyword">in</span> action=allow protocol=TCP localport=2222</span><br></pre></td></tr></table></figure><p>这个命令是用于在 Windows 高级防火墙中添加一条规则。下面是对每个参数的解释：</p><ul><li><code>name=WSL2</code>：将规则命名为 “WSL2”。</li><li><code>dir=in</code>：指定规则适用于传入的网络流量。</li><li><code>action=allow</code>：允许通过该规则的流量通过防火墙。</li><li><code>protocol=TCP</code>：指定规则适用于 TCP 协议的流量。</li><li><code>localport=2222</code>：指定本地端口号为 2222。</li></ul><p>验证端口转发是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 user@localhost</span><br></pre></td></tr></table></figure><ul><li>user 修改成 WSL2 的用户名</li></ul><p>如果配置成功，则会成功登录 WSL2。</p><h1 id="安装配置花生壳"><a href="#安装配置花生壳" class="headerlink" title="安装配置花生壳"></a>安装配置花生壳</h1><p>进入官网<a href="https://hsk.oray.com/download">下载花生壳客户端</a>，安装后打开，注册账号，登录。<strong>需要实名认证</strong></p><blockquote><p>免费账户可以绑定<strong>2 个映射</strong>，对我来说暂时够用了，免费流量 1G/月。实测阅读代码不编译的话大概<strong>每天 50M</strong>左右。</p></blockquote><p>打开客户端，添加映射，配置如下：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/28/3423c43e8d319abd89c11afd7be03a11.png"></p><p>保存即可。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/28/fddec1e9e0cc03c7208b4244dd35ad01.png"></p><p>验证是否配置成功，找一台不在同一个局域网的电脑，使用 SSH 连接 WSL2：</p><p>如果复制出来的访问地址为<code>abcdjsj.goho.co:33445</code>，那么 SSH 命令修改为如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 33445  user@abcdjsj.goho.co</span><br></pre></td></tr></table></figure><ul><li>user 修改成 WSL2 的用户名</li></ul><p>如果配置成功，则会成功登录 WSL2。</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><ol><li>WSL2 的 <strong>IP 会经常变化</strong>，如果连不上了，可以重新获取一下 IP，然后修改一下各个配置。或者想办法将 WSL2 的 IP 固定下来。</li><li>带宽有限，登录时比较慢，耐心等待。后续准备使用 frp 自建一个穿透服务。</li><li>PC 耗电伤不起啊，一百多瓦赶上三四台 NAS 了。这玩意只能应急，长时间挂机电费都够买个云服务器了。</li></ol><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="“System-is-booting-up-Unprivileged-users-are-not-permitted-to-log-in-yet”"><a href="#“System-is-booting-up-Unprivileged-users-are-not-permitted-to-log-in-yet”" class="headerlink" title="“System is booting up. Unprivileged users are not permitted to log in yet”"></a>“System is booting up. Unprivileged users are not permitted to log in yet”</h2><p>登录服务端，也就是 WSL2，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /run/nologin</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景简介&quot;&gt;&lt;a href=&quot;#背景简介&quot; class=&quot;headerlink&quot; title=&quot;背景简介&quot;&gt;&lt;/a&gt;背景简介&lt;/h1&gt;&lt;p&gt;WSL2 是 Windows 的子系统，可以在 Windows 上运行 Linux，但是 WSL2 是运行在虚拟机中的，所以</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="工具，Efficiency，内网穿透" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%EF%BC%8CEfficiency%EF%BC%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
</feed>
