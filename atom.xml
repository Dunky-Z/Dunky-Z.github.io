<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如云泊</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-17T15:16:37.838Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Dominic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker 部署 Radarr 刮削电影</title>
    <link href="http://example.com/2023/08/17/Docker%E9%83%A8%E7%BD%B2Radarr%E5%88%AE%E5%89%8A%E7%94%B5%E5%BD%B1/"/>
    <id>http://example.com/2023/08/17/Docker%E9%83%A8%E7%BD%B2Radarr%E5%88%AE%E5%89%8A%E7%94%B5%E5%BD%B1/</id>
    <published>2023-08-17T14:46:26.000Z</published>
    <updated>2023-08-17T15:16:37.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">radarr:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">radarr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockerproxy.com/linuxserver/radarr:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7878:7878&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UMASK=002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/sharedfolder/appdata/radarr:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/sharedfolder/media:/movies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/sharedfolder/downloads/qbittorrent:/downloads</span></span><br></pre></td></tr></table></figure><p>配置中文界面：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/17/9dbfcaa5f918bccfa99ce64cc97a7e16.png"></p><p>导入视频：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/08/17/81a242b30d3ab2d29b7f4bf92ba246de.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yml&quot;&gt;&lt;a href=&quot;#docker-compose-yml&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yml&quot;&gt;&lt;/a&gt;docker-compose.yml&lt;/h1&gt;&lt;figure c</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="NAS,Docker,Radarr,Docker-Compose" scheme="http://example.com/tags/NAS-Docker-Radarr-Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>SSH 免密登录</title>
    <link href="http://example.com/2023/08/12/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>http://example.com/2023/08/12/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</id>
    <published>2023-08-12T01:22:56.000Z</published>
    <updated>2023-08-12T02:35:00.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h1><p>宿主机任意下目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/user/.ssh/id_rsa): host2servera_id_rsa</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> host2servera_id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> host2servera_id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:OkWcw+R3x6Z2mzeYQuG033H3N9qIeym3TZKzz6YD8tQ user@ubuntu18</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        .        |</span></span><br><span class="line"><span class="string">|       = .   .   |</span></span><br><span class="line"><span class="string">|        B .o. +  |</span></span><br><span class="line"><span class="string">|       . oo.o+   |</span></span><br><span class="line"><span class="string">|        S  ++ ..o|</span></span><br><span class="line"><span class="string">|       o ..+.A=o=|</span></span><br><span class="line"><span class="string">|      o   +..B+=+|</span></span><br><span class="line"><span class="string">|       .   oo=@o+|</span></span><br><span class="line"><span class="string">|           o=ss= |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>一直回车确定，生成公私钥，保存在<code>~/.ssh</code>目录下。</p><blockquote><p>我在宿主机上生成的公私钥名称为，分别是<code>host2servera_id_rsa</code>,<code>host2servera_id_rsa.pub</code>方便我记忆。如果一直回车，那么生成的公私钥名称为<code>id_rsa</code>，<code>id_rsa.pub</code>。</p></blockquote><h1 id="发送公钥"><a href="#发送公钥" class="headerlink" title="发送公钥"></a>发送公钥</h1><p>将公钥复制到服务器 ServerA 上，以 IP：<code>10.12.193.53</code> 为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id 10.12.193.53</span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">user@10.12.193.53<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>10.12.193.53<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure><p>默认是把 ServerA 的用户当做 user 进行登录。如果有确定的用户如<code>userA</code>，就使用<code>ssh-copy-id userA@10.12.193.53</code></p><p>然后就可以直接免密码登录了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh user@10.12.193.53</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ssh userA@10.12.193.53</span><br></pre></td></tr></table></figure><p>如果还是需要输入密码，可能<code>ssh-agent</code>没有启动，执行<code>eval $(ssh-agent)</code>启动<code>ssh-agent</code>，然后再次登录即可。然后将私钥添加到<code>ssh-agent</code>中，执行<code>ssh-add ~/.ssh/host2servera_id_rsa</code>，然后再次登录即可。</p><h1 id="配置快捷登录"><a href="#配置快捷登录" class="headerlink" title="配置快捷登录"></a>配置快捷登录</h1><p>即使免密登录，输入一长串 IP 也太麻烦了，能不能配置更简单的登录方式，比如给服务器起个名字如<code>ServerA</code>直接使用<code>ssh ServerA</code>就登录服务器，能。</p><p>打开<code>~/.ssh/config</code>配置如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host ServerA</span><br><span class="line">    HostName 10.12.193.53</span><br><span class="line">    Port 22</span><br><span class="line">    User userA</span><br><span class="line">    IdentityFile ~/.ssh/host2servera_id_rsa</span><br></pre></td></tr></table></figure><p>然后就可以直接使用<code>ssh ServerA</code>登录了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成密钥对&quot;&gt;&lt;a href=&quot;#生成密钥对&quot; class=&quot;headerlink&quot; title=&quot;生成密钥对&quot;&gt;&lt;/a&gt;生成密钥对&lt;/h1&gt;&lt;p&gt;宿主机任意下目录执行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="SSH,Linux" scheme="http://example.com/tags/SSH-Linux/"/>
    
  </entry>
  
  <entry>
    <title>QEMU常用命令</title>
    <link href="http://example.com/2023/08/06/QEMU%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/08/06/QEMU%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-08-06T09:22:12.000Z</published>
    <updated>2023-08-06T09:22:28.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QEMU-常用命令总结"><a href="#QEMU-常用命令总结" class="headerlink" title="QEMU 常用命令总结"></a>QEMU 常用命令总结</h1><p>QEMU 是一个开源的虚拟化软件，它能够模拟不同的硬件平台，让用户在不同的操作系统之间进行切换和测试。以下是 QEMU 常用命令的总结文档，包含每个命令的功能说明。</p><h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><p>以下命令用于启动虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -boot d -cdrom /path/to/iso -m 1024 -hda /path/to/hda.img</span><br></pre></td></tr></table></figure><ul><li>-boot d：从 CD/DVD 启动</li><li>-cdrom /path/to/iso：指定 ISO 文件的路径</li><li>-m 1024：设置虚拟机的内存大小为 1024MB</li><li>-hda /path/to/hda.img：指定虚拟硬盘的路径</li></ul><h2 id="安装系统至磁盘"><a href="#安装系统至磁盘" class="headerlink" title="安装系统至磁盘"></a>安装系统至磁盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -cdrom ~/Downloads/ubuntu.iso \</span><br><span class="line">    -drive file=ubuntu.qcow2 \</span><br><span class="line">    -enable-kvm \</span><br><span class="line">    -cpu host \</span><br><span class="line">    -smp cores=2,threads=2 \</span><br><span class="line">    -m 2G \</span><br><span class="line">    -vga virtio \</span><br><span class="line">    -display sdl,gl=on </span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>以下命令用于配置虚拟机的网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -net nic -net user,hostfwd=tcp::2222-:22</span><br></pre></td></tr></table></figure><ul><li>-net nic：启用虚拟网卡</li><li>-net user：使用用户模式网络堆栈</li><li>hostfwd=tcp::2222-:22：将主机的 2222 端口转发到虚拟机的 22 端口</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>以下命令用于启用调试模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -s -S</span><br></pre></td></tr></table></figure><ul><li>-s：启用 GDB 调试</li><li>-S：在启动时暂停虚拟机，等待调试器连接</li></ul><h2 id="快照管理"><a href="#快照管理" class="headerlink" title="快照管理"></a>快照管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拍快照</span></span><br><span class="line">qemu-img snapshot -c oe-rv-snapshot1  openEuler-22.09-riscv64-qemu.qcow2</span><br><span class="line"><span class="comment"># 列举快照</span></span><br><span class="line">qemu-img snapshot-l openEuler-22.09-riscv64-qemu.qcow2</span><br><span class="line"><span class="comment"># 恢复快照</span></span><br><span class="line">qemu-img snapshot -a my_snapshot mydisk.qcow2</span><br></pre></td></tr></table></figure><h2 id="查看虚拟硬盘信息"><a href="#查看虚拟硬盘信息" class="headerlink" title="查看虚拟硬盘信息"></a>查看虚拟硬盘信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img info /path/to/image</span><br></pre></td></tr></table></figure><h2 id="将虚拟硬盘转换为-QCOW2-格式"><a href="#将虚拟硬盘转换为-QCOW2-格式" class="headerlink" title="将虚拟硬盘转换为 QCOW2 格式"></a>将虚拟硬盘转换为 QCOW2 格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img convert -O qcow2 /path/to/image /path/to/new/image</span><br></pre></td></tr></table></figure><h3 id="调整磁盘大小"><a href="#调整磁盘大小" class="headerlink" title="调整磁盘大小"></a>调整磁盘大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize ubuntu.qcow2 +5G</span><br></pre></td></tr></table></figure><h2 id="显示器选项"><a href="#显示器选项" class="headerlink" title="显示器选项"></a>显示器选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -vga std</span><br><span class="line">qemu-system-x86_64 -display sdl</span><br><span class="line">qemu-system-x86_64 -display gtk</span><br></pre></td></tr></table></figure><ul><li>-vga std：使用标准 VGA 显示器</li><li>-display sdl：使用 SDL 显示器</li><li>-display gtk：使用 GTK 显示器</li></ul><h2 id="输入选项"><a href="#输入选项" class="headerlink" title="输入选项"></a>输入选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -k en-us</span><br><span class="line">qemu-system-x86_64 -usb</span><br><span class="line">qemu-system-x86_64 -device usb-mouse</span><br></pre></td></tr></table></figure><ul><li>-k en-us：使用英文键盘布局</li><li>-usb：启用 USB 支持</li><li>-device usb-mouse：使用 USB 鼠标设备</li></ul><h2 id="声音选项"><a href="#声音选项" class="headerlink" title="声音选项"></a>声音选项</h2><p>以下命令用于配置虚拟机的声音：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -soundhw all</span><br><span class="line">qemu-system-x86_64 -soundhw sb16</span><br><span class="line">qemu-system-x86_64 -audiodev pa,id=pa1,out.mixing-engine=off</span><br></pre></td></tr></table></figure><ul><li>-soundhw all：启用所有声卡</li><li>-soundhw sb16：启用 SoundBlaster 16 声卡</li><li>-audiodev pa,id=pa1,out.mixing-engine=off：使用 PulseAudio 声音设备</li></ul><h2 id="USB-设备管理"><a href="#USB-设备管理" class="headerlink" title="USB 设备管理"></a>USB 设备管理</h2><p>以下命令用于管理虚拟机的 USB 设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -usbdevice host:1234:5678</span><br><span class="line">qemu-system-x86_64 -usbdevice tablet</span><br><span class="line">qemu-system-x86_64 -usbdevice keyboard</span><br></pre></td></tr></table></figure><ul><li>-usbdevice host:1234:5678：将主机的 USB 设备 1234:5678 分配给虚拟机</li><li>-usbdevice tablet：使用 USB 触摸板</li><li>-usbdevice keyboard：使用 USB 键盘</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QEMU-常用命令总结&quot;&gt;&lt;a href=&quot;#QEMU-常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;QEMU 常用命令总结&quot;&gt;&lt;/a&gt;QEMU 常用命令总结&lt;/h1&gt;&lt;p&gt;QEMU 是一个开源的虚拟化软件，它能够模拟不同的硬件平台，让用户在</summary>
      
    
    
    
    
    <category term="QEMU" scheme="http://example.com/tags/QEMU/"/>
    
  </entry>
  
  <entry>
    <title>Linux 网络配置常用命令</title>
    <link href="http://example.com/2023/08/05/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/08/05/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-08-05T07:29:58.000Z</published>
    <updated>2023-08-05T07:30:42.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置网桥-brctl"><a href="#配置网桥-brctl" class="headerlink" title="配置网桥 brctl"></a>配置网桥 brctl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为 br0 的网桥</span></span><br><span class="line">sudo brctl addbr br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网桥 br0</span></span><br><span class="line">sudo brctl delbr br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的网桥及其接口信息</span></span><br><span class="line">sudo brctl show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将网络接口 `eth0` 添加到网桥 `br0` 中</span></span><br><span class="line">sudo brctl addif br0 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从网桥 `br0` 中删除网络接口 `eth0`</span></span><br><span class="line">sudo brctl delif br0 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment">### 显示网桥 `br0` 的 Spanning Tree Protocol (STP)配置</span></span><br><span class="line">sudo brctl showstp br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 Linux 内核中桥接器对数据包进行处理时调用 iptables 的功能。这种配置通常用于提高桥接速度，减少桥接过程中的 CPU 开销。</span></span><br><span class="line">sudo sysctl net.bridge.bridge-nf-call-iptables=0</span><br><span class="line">sudo sysctl net.bridge.bridge-nf-call-iptables=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为虚拟网卡设置IP并启动</span></span><br><span class="line">sudo ifconfig tap0 192.168.2.1 up</span><br></pre></td></tr></table></figure><h1 id="虚拟网络设备-tunctl"><a href="#虚拟网络设备-tunctl" class="headerlink" title="虚拟网络设备 tunctl"></a>虚拟网络设备 tunctl</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为tun0的虚拟网络设备</span></span><br><span class="line">sudo tunctl -t tun0 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将虚拟网卡设置为任何人都有权限使用：</span></span><br><span class="line">sudo chmod 0666 /dev/net/tun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除名为tun0的虚拟网络设备</span></span><br><span class="line">sudo tunctl -d tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建名为tun0的虚拟网络设备并指定其拥有者和组</span></span><br><span class="line">sudo tunctl -u user -g group -t tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有活跃的虚拟网络设备及其接口信息</span></span><br><span class="line">sudo tunctl -s </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定虚拟网络设备的MAC地址</span></span><br><span class="line">sudo tunctl -m [mac_address] -t tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出具有给定设备名称前缀的所有已分配的虚拟网络设备</span></span><br><span class="line">sudo tunctl -g [device_name_prefix]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分配虚拟网络设备的文件描述符，将结果输出到标准输出</span></span><br><span class="line">sudo tunctl -p -t tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将虚拟网络设备关联到现有的桥接设备</span></span><br><span class="line">sudo tunctl -b -t tun0 -g br0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从现有虚拟网络设备解除关联</span></span><br><span class="line">sudo tunctl -B -t tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定虚拟网络设备的最大传输单元(MTU)</span></span><br><span class="line">sudo ip link <span class="built_in">set</span> tun0 mtu [value]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用虚拟网络设备</span></span><br><span class="line">sudo ip link <span class="built_in">set</span> tun0 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用虚拟网络设备</span></span><br><span class="line">sudo ip link <span class="built_in">set</span> tun0 down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示由Linux内核管理的虚拟网络设备的状态信息</span></span><br><span class="line">sudo ip link show tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改虚拟网络设备的MAC地址</span></span><br><span class="line">sudo ip link <span class="built_in">set</span> dev tun0 address [mac_address]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为虚拟网络设备分配一个IPv4地址</span></span><br><span class="line">sudo ip addr add [ip_address/cidr] dev tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从虚拟网络设备中删除一个IPv4地址</span></span><br><span class="line">sudo ip addr del [ip_address/cidr] dev tun0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查虚拟网络设备是否已分配IPv4地址</span></span><br><span class="line">ip addr show tun0 | grep inet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用DLADDR命令获取虚拟网络设备的MAC地址</span></span><br><span class="line">sudo ethtool -P tun0 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前所有活动的网络接口</span></span><br><span class="line">ip a </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查虚拟网络设备是否已分配IPv6地址</span></span><br><span class="line">ip addr show tun0 | grep inet6 </span><br></pre></td></tr></table></figure><h1 id="网络接口管理（ifconfig）"><a href="#网络接口管理（ifconfig）" class="headerlink" title="网络接口管理（ifconfig）"></a>网络接口管理（ifconfig）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有网络接口信息</span></span><br><span class="line">ifconfig -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活指定接口(如 eth0)</span></span><br><span class="line">ifconfig eth0 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭指定接口(如 eth0)</span></span><br><span class="line">ifconfig eth0 down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 IP 地址，例如添加 IP 地址为 192.168.2.100 的网卡 eth0</span></span><br><span class="line">ifconfig eth0 192.168.2.100 netmask 255.255.255.0 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 IP 地址，例如删除网卡 eth0 上的 IP 地址</span></span><br><span class="line">ifconfig eth0 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用或禁用广播地址</span></span><br><span class="line">ifconfig eth0 broadcast 192.168.2.255 up</span><br><span class="line">ifconfig eth0 -broadcast</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网卡 mtu 大小为 9000</span></span><br><span class="line">ifconfig eth0 mtu 9000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个虚拟网络接口 eth0:1，并配置 IP 地址为 192.168.2.100</span></span><br><span class="line">ifconfig eth0:1 192.168.2.100 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><h1 id="路由管理（route）"><a href="#路由管理（route）" class="headerlink" title="路由管理（route）"></a>路由管理（route）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前路由表</span></span><br><span class="line">route -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加默认路由</span></span><br><span class="line">route add default gw 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除默认路由</span></span><br><span class="line">route del default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个到目标网络的静态路由</span></span><br><span class="line">route add -net 192.168.100.0 netmask 255.255.255.0 gw 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除静态路由</span></span><br><span class="line">route del -net 192.168.100.0 netmask 255.255.255.0 gw 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除所有路由缓存项</span></span><br><span class="line">route flush cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 IP 地址对应网卡接口的 MAC 地址</span></span><br><span class="line">arping -I eth0 192.168.2.1</span><br></pre></td></tr></table></figure><h1 id="DNS-解析（nslookup-和-dig）"><a href="#DNS-解析（nslookup-和-dig）" class="headerlink" title="DNS 解析（nslookup 和 dig）"></a>DNS 解析（nslookup 和 dig）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用域名服务器解析域名</span></span><br><span class="line">nslookup www.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定域名服务器，并解析域名</span></span><br><span class="line">nslookup www.example.com 8.8.8.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询DNS地址</span></span><br><span class="line">dig example.com +nssearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有的 NS 记录</span></span><br><span class="line">dig example.com NS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某个域名的 MX 记录</span></span><br><span class="line">dig example.com MX</span><br></pre></td></tr></table></figure><h1 id="网络诊断工具（ping-和-traceroute）"><a href="#网络诊断工具（ping-和-traceroute）" class="headerlink" title="网络诊断工具（ping 和 traceroute）"></a>网络诊断工具（ping 和 traceroute）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试与目标主机之间的连通性，查看网络是否可达</span></span><br><span class="line">ping 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping 命令的高级选项，控制发送的数据包数量、大小和时间间隔等参数</span></span><br><span class="line">ping -c 5 -s 100 -i 1 192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据包在网络上的传输路径，检测网络故障</span></span><br><span class="line">traceroute www.google.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每一跳所经过的路由器名称和 IP 地址</span></span><br><span class="line">traceroute -n www.google.com</span><br></pre></td></tr></table></figure><h1 id="网络流量分析工具（tcpdump-和-wireshark）"><a href="#网络流量分析工具（tcpdump-和-wireshark）" class="headerlink" title="网络流量分析工具（tcpdump 和 wireshark）"></a>网络流量分析工具（tcpdump 和 wireshark）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听指定的网络接口上的数据包，显示每个数据包的详细信息</span></span><br><span class="line">tcpdump -i eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听指定端口上的数据包</span></span><br><span class="line">tcpdump port 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示从指定源地址到目标地址的所有网络流量</span></span><br><span class="line">tcpdump src 192.168.2.100 and dst 192.168.2.200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有 IP 流量，并将结果保存到文件 tcp.pcap 中，以便使用 Wireshark 分析</span></span><br><span class="line">tcpdump -i eth0 -w tcp.pcap ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形化的网络协议分析工具，用于分析网络流量</span></span><br><span class="line">wireshark</span><br></pre></td></tr></table></figure><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示网络连接状态和统计信息</span></span><br><span class="line">netstat -an</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 TCP/IP 配置参数</span></span><br><span class="line">sysctl net.ipv4.tcp_*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 TCP/IP 参数，例如设置 SYN 攻击保护</span></span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 /etc/resolv.conf 文件</span></span><br><span class="line">systemd-resolve --flush-caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前 DNS 服务器</span></span><br><span class="line">systemd-resolve --status | grep <span class="string">&#x27;DNS Servers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启网络</span></span><br><span class="line">systemctl restart NetworkManager</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置网桥-brctl&quot;&gt;&lt;a href=&quot;#配置网桥-brctl&quot; class=&quot;headerlink&quot; title=&quot;配置网桥 brctl&quot;&gt;&lt;/a&gt;配置网桥 brctl&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Linux, 网络配置" scheme="http://example.com/tags/Linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>QEMU 虚拟机网络配置</title>
    <link href="http://example.com/2023/08/05/QEMU%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/08/05/QEMU%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2023-08-05T06:47:54.000Z</published>
    <updated>2023-08-12T02:37:10.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quick-Setup"><a href="#Quick-Setup" class="headerlink" title="Quick Setup"></a>Quick Setup</h1><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>安装两个网络管理工具用于建立网桥以及虚拟网卡：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装虚拟网桥工具</span></span><br><span class="line">sudo apt install bridge-utils -y</span><br><span class="line"><span class="comment"># UML（User-mode linux）工具        </span></span><br><span class="line">sudo apt install uml-utilities  -y   </span><br></pre></td></tr></table></figure><h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><h3 id="qemu-ifup"><a href="#qemu-ifup" class="headerlink" title="qemu-ifup"></a>qemu-ifup</h3><p>将下面的脚本保存为文件 <code>qemu-ifup</code>，并赋予可执行权限：</p><blockquote><p>为了方便复制脚本，在 confluence 页面提供了脚本内容，可以直接复制。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/qemu</span><br><span class="line">mv qemu-ifup /etc/qemu &amp;&amp; mv qemu-ifdown /etc/qemu </span><br><span class="line">sudo chmod +x qemu-ifup</span><br><span class="line">sudo chmod +x qemu-ifdown</span><br></pre></td></tr></table></figure><p>因为网卡信息不容易定位，可能一台机器有多个网卡，所以不方便用脚本获取，需要手动设置一下。将下面的<code>NIC</code>值修改为宿主机可以上网的网卡名称。可以通过<code>ifconfig</code>命令查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 设置默认网卡信息</span></span><br><span class="line">NIC=enp2s0</span><br><span class="line"><span class="comment"># 设置用户名</span></span><br><span class="line">USER_NAME=user</span><br><span class="line"><span class="comment"># 设置网桥名称</span></span><br><span class="line">BRIDGE=br0</span><br><span class="line"><span class="comment"># 设置网络信息</span></span><br><span class="line">NIC_IP=$(ifconfig <span class="variable">$NIC</span> | grep <span class="string">&quot;inet\b&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">NIC_NETMAST=$(ifconfig <span class="variable">$NIC</span> | grep <span class="string">&quot;inet\b&quot;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">NIC_BROADCAST=$(ifconfig <span class="variable">$NIC</span> | grep <span class="string">&quot;inet\b&quot;</span> | awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">NETMASK=255.255.240.0</span><br><span class="line"><span class="comment"># 设置默认网关地址</span></span><br><span class="line">GATEWAY=10.12.192.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取宿主机网卡MAC地址，因为创建的网桥MAC地址是随机的，</span></span><br><span class="line"><span class="comment"># 无法接入公司，需要从开发机网卡将其MAC地址赋值给网桥</span></span><br><span class="line">MAC=$(ifconfig <span class="variable">$NIC</span> | grep <span class="string">&quot;ether\b&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网桥是否已创建，已创建就忽略</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_bridge</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">    echO <span class="string">&quot;Check bridge...&quot;</span></span><br><span class="line">    <span class="keyword">if</span> brctl show | grep <span class="string">&quot;^<span class="variable">$BRIDGE</span>&quot;</span> &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_bridge</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Start Create bridge...&quot;</span></span><br><span class="line">    brctl addbr <span class="string">&quot;<span class="variable">$BRIDGE</span>&quot;</span></span><br><span class="line">    brctl addif <span class="string">&quot;<span class="variable">$BRIDGE</span>&quot;</span>  <span class="string">&quot;<span class="variable">$NIC</span>&quot;</span></span><br><span class="line">    ifconfig br0 0.0.0.0 promisc up</span><br><span class="line">    dhclient <span class="variable">$BRIDGE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ifconfig &quot;$BRIDGE&quot; &quot;$NIC_IP&quot; netmask &quot;$NIC_NETMAST&quot; broadcast &quot;$NIC_BROADCAST&quot;  hw ether &quot;$MAC&quot; promisc up</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用IP转发</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">enable_ip_forward</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网桥</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setup_bridge</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    check_bridge <span class="string">&quot;<span class="variable">$BRIDGE</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        create_bridge</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    enable_ip_forward</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    setup_bridge</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Creating <span class="variable">$1</span>...&quot;</span></span><br><span class="line">    tunctl -t <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -u <span class="string">&quot;<span class="variable">$USER_NAME</span>&quot;</span></span><br><span class="line">    ifconfig <span class="string">&quot;<span class="variable">$1</span>&quot;</span> 0.0.0.0 up</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Adding <span class="variable">$1</span> to <span class="variable">$BRIDGE</span>...&quot;</span></span><br><span class="line">    brctl addif <span class="string">&quot;<span class="variable">$BRIDGE</span>&quot;</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    sleep 5</span><br><span class="line">    ifconfig <span class="string">&quot;<span class="variable">$BRIDGE</span>&quot;</span>  hw ether <span class="string">&quot;<span class="variable">$MAC</span>&quot;</span> promisc up</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: no interface specified.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="qemu-ifdown"><a href="#qemu-ifdown" class="headerlink" title="qemu-ifdown"></a>qemu-ifdown</h3><p>以下是<code>qemu-ifdown</code>脚本，用于在关闭 QEMU 时关闭虚拟网卡，将其从网桥中移除，删除虚拟网卡。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 设置网桥名称</span></span><br><span class="line">BRIDGE=br0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 将tap设备从网桥中移除</span></span><br><span class="line">brctl delif <span class="variable">$&#123;BRIDGE&#125;</span> <span class="variable">$1</span></span><br><span class="line"><span class="comment"># 关闭tap设备</span></span><br><span class="line">ip link link <span class="variable">$1</span> down</span><br><span class="line">    <span class="comment"># 删除tap设备</span></span><br><span class="line">    ip link del <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">tunctl -d <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Error: no interface specified&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>将系统镜像复制一份并修改文件名，QEMU 不能同时使用一个镜像启动两个虚拟机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp openEuler-22.09-riscv64-qemu.qcow2 openEuler-22.09-riscv64-qemu-vm1.qcow2</span><br></pre></td></tr></table></figure><p>需要修改启动脚本中的镜像文件名，以及启动参数，将<code>drive</code>以及<code>cmd</code>变量的内容覆盖为下面的内容，修改<code>mac</code>为分配给自己的虚拟机的 MAC 地址，<code>script</code>为上面的脚本<code>qemu-ifup</code>的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本用于启动VM0</span></span><br><span class="line">drive=<span class="string">&quot;openEuler-22.09-riscv64-qemu.qcow2&quot;</span></span><br><span class="line">....</span><br><span class="line">cmd=<span class="string">&quot;qemu-system-riscv64 \</span></span><br><span class="line"><span class="string">  -nographic -machine virt \</span></span><br><span class="line"><span class="string">  -smp &quot;</span><span class="variable">$vcpu</span><span class="string">&quot; -m &quot;</span><span class="variable">$memory</span><span class="string">&quot;G \</span></span><br><span class="line"><span class="string">  -bios &quot;</span><span class="variable">$fw</span><span class="string">&quot; \</span></span><br><span class="line"><span class="string">  -drive file=&quot;</span><span class="variable">$drive</span><span class="string">&quot;,format=qcow2,id=hd0 \</span></span><br><span class="line"><span class="string">  -object rng-random,filename=/dev/urandom,id=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-vga \</span></span><br><span class="line"><span class="string">  -device virtio-rng-device,rng=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-blk-device,drive=hd0 \</span></span><br><span class="line"><span class="string">  -device virtio-net-device,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span></span><br><span class="line"><span class="string">  -netdev tap,id=tapnet,script=/etc/qemu/qemu-ifup,downscript=/etc/qemu/qemu-ifdown \</span></span><br><span class="line"><span class="string">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet&quot;</span></span><br></pre></td></tr></table></figure><p>以<code>sudo</code>权限启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./preview_start_vm0.sh</span><br></pre></td></tr></table></figure><p>以下为配置 VM1 过程，VM1 的启动脚本与 VM0 的启动脚本类似，只需要修改<code>drive</code>以及<code>MAC</code>，必须保证<code>MAC</code>与 VM0 的<code>MAC</code>不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该脚本用于启动VM1</span></span><br><span class="line">drive=<span class="string">&quot;openEuler-22.09-riscv64-qemu.qcow2&quot;</span></span><br><span class="line">....</span><br><span class="line">cmd=<span class="string">&quot;qemu-system-riscv64 \</span></span><br><span class="line"><span class="string">  -nographic -machine virt \</span></span><br><span class="line"><span class="string">  -smp &quot;</span><span class="variable">$vcpu</span><span class="string">&quot; -m &quot;</span><span class="variable">$memory</span><span class="string">&quot;G \</span></span><br><span class="line"><span class="string">  -bios &quot;</span><span class="variable">$fw</span><span class="string">&quot; \</span></span><br><span class="line"><span class="string">  -drive file=&quot;</span><span class="variable">$drive</span><span class="string">&quot;,format=qcow2,id=hd0 \</span></span><br><span class="line"><span class="string">  -object rng-random,filename=/dev/urandom,id=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-vga \</span></span><br><span class="line"><span class="string">  -device virtio-rng-device,rng=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-blk-device,drive=hd0 \</span></span><br><span class="line"><span class="string">  -device virtio-net-device,netdev=tapnet,mac=80:d4:09:62:cd:3c \</span></span><br><span class="line"><span class="string">  -netdev tap,id=tapnet,script=/etc/qemu/qemu-ifup,downscript=/etc/qemu/qemu-ifdown \</span></span><br><span class="line"><span class="string">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet&quot;</span></span><br></pre></td></tr></table></figure><h2 id="网络通信测试"><a href="#网络通信测试" class="headerlink" title="网络通信测试"></a>网络通信测试</h2><p>当前网络状态如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOST:10.12.192.177</span><br><span class="line">VM0:10.12.193.53</span><br><span class="line">VM1:10.12.193.101</span><br></pre></td></tr></table></figure><h3 id="HOST-–-gt-VM0"><a href="#HOST-–-gt-VM0" class="headerlink" title="HOST –&gt; VM0"></a>HOST –&gt; VM0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user @ ubuntu18 in ~/openeuler/openEuler2209 [18:41:54] </span></span><br><span class="line">$ ping -c 3 10.12.193.101</span><br><span class="line">PING 10.12.193.101 (10.12.193.101) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.12.193.101: icmp_seq=1 ttl=64 time=1.37 ms</span><br><span class="line">64 bytes from 10.12.193.101: icmp_seq=2 ttl=64 time=0.897 ms</span><br><span class="line">64 bytes from 10.12.193.101: icmp_seq=3 ttl=64 time=0.890 ms</span><br><span class="line"></span><br><span class="line">--- 10.12.193.101 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.890/1.055/1.378/0.228 ms</span><br></pre></td></tr></table></figure><p>Host –&gt; VM1 的测试结果与 Host –&gt; VM0 的测试结果相同。</p><h3 id="VM0-–-gt-HOST"><a href="#VM0-–-gt-HOST" class="headerlink" title="VM0 –&gt; HOST"></a>VM0 –&gt; HOST</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># ping -c 3 10.12.193.53 </span></span><br><span class="line">PING 10.12.193.53 (10.12.193.53) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=1 ttl=64 time=0.716 ms</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=2 ttl=64 time=1.74 ms</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=3 ttl=64 time=1.81 ms</span><br><span class="line"></span><br><span class="line">--- 10.12.193.53 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2009ms</span><br><span class="line">rtt min/avg/max/mdev = 0.716/1.424/1.812/0.501 ms</span><br></pre></td></tr></table></figure><p>VM1 –&gt; Host 的测试结果与 Host –&gt; VM0 的测试结果相同。</p><h3 id="VM1-–-gt-VM0"><a href="#VM1-–-gt-VM0" class="headerlink" title="VM1 –&gt; VM0"></a>VM1 –&gt; VM0</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># ping -c 3 10.12.193.53 </span></span><br><span class="line">PING 10.12.193.53 (10.12.193.53) 56(84) bytes of data.</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=1 ttl=64 time=0.716 ms</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=2 ttl=64 time=1.74 ms</span><br><span class="line">64 bytes from 10.12.193.53: icmp_seq=3 ttl=64 time=1.81 ms</span><br><span class="line"></span><br><span class="line">--- 10.12.193.53 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2009ms</span><br><span class="line">rtt min/avg/max/mdev = 0.716/1.424/1.812/0.501 ms</span><br></pre></td></tr></table></figure><p>VM0 –&gt; VM1 与 VM1 –&gt; VM0 的测试结果相同。</p><h3 id="VM0-–-gt-github"><a href="#VM0-–-gt-github" class="headerlink" title="VM0 –&gt; github"></a>VM0 –&gt; github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># ping -c 4 github.com</span></span><br><span class="line">PING github.com (192.30.255.113) 56(84) bytes of data.</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=1 ttl=46 time=221 ms</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=2 ttl=46 time=277 ms</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=3 ttl=46 time=216 ms</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=4 ttl=46 time=218 ms</span><br><span class="line"></span><br><span class="line">--- github.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3014ms</span><br><span class="line">rtt min/avg/max/mdev = 215.984/232.733/276.593/25.374 ms</span><br></pre></td></tr></table></figure><h3 id="HOST-–-gt-github"><a href="#HOST-–-gt-github" class="headerlink" title="HOST –&gt; github"></a>HOST –&gt; github</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user @ ubuntu18 in ~/openeuler/openEuler2209 [17:59:40] </span></span><br><span class="line">$ ping -c 3  github.com</span><br><span class="line">PING github.com (192.30.255.113) 56(84) bytes of data.</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=1 ttl=46 time=218 ms</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=2 ttl=46 time=216 ms</span><br><span class="line">64 bytes from lb-192-30-255-113-sea.github.com (192.30.255.113): icmp_seq=3 ttl=46 time=216 ms</span><br><span class="line"></span><br><span class="line">--- github.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 216.252/217.087/218.409/0.945 ms</span><br></pre></td></tr></table></figure><h1 id="原理探究-Ongoing"><a href="#原理探究-Ongoing" class="headerlink" title="原理探究 (Ongoing)"></a>原理探究 (Ongoing)</h1><h2 id="Step-by-Step-解析"><a href="#Step-by-Step-解析" class="headerlink" title="Step by Step 解析"></a>Step by Step 解析</h2><p>查看一下网络接口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">enp3s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.12.192.173  netmask 255.255.240.0  broadcast 10.12.207.255</span><br><span class="line">        inet6 fe80::a00:27ff:fe32:e709  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:32:e7:09  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 6017  bytes 5412928 (5.4 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1979  bytes 179467 (179.4 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 125  bytes 10142 (10.1 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 125  bytes 10142 (10.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>创建一个名为<code>br0</code>的网桥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addbr br0</span><br></pre></td></tr></table></figure><p>将网桥与宿主机的网卡绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addif br0 enp3s0</span><br></pre></td></tr></table></figure><p>启用 <code>br0</code> 接口，并从 DHCP 服务器获得 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig br0 0.0.0.0 promisc up</span><br><span class="line">sudo dhclient br0</span><br></pre></td></tr></table></figure><p>查看虚拟网桥列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl show br0</span><br><span class="line"></span><br><span class="line">bridge name    bridge id    STP enabled    interfaces</span><br><span class="line">br0            8000.e0be0388eec9  no             enp3s0</span><br></pre></td></tr></table></figure><p>查看 <code>br0</code> 的各接口信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl showstp br0</span><br><span class="line">br0</span><br><span class="line"> bridge id8000.e0be0388eec9</span><br><span class="line"> designated root8000.e0be0388eec9</span><br><span class="line"> root port0path cost 0</span><br><span class="line"> max age20.00s</span><br><span class="line"> forward delay15.00s</span><br><span class="line"> hello time2.00s</span><br><span class="line"> ageing time300.00s</span><br><span class="line"> hello timer0.00s&lt;tbd&gt;</span><br><span class="line"> forward timer0.00s&lt;tbd&gt;</span><br><span class="line"> ageing timer0.00s&lt;tbd&gt;</span><br><span class="line"> </span><br><span class="line"> enp3s0 (1)</span><br><span class="line"> port id8001<span class="built_in">local</span> state forwarding</span><br><span class="line"> designated root8000.08002732e709</span><br><span class="line"> path cost100</span><br><span class="line"> designated bridge8000.08002732e709</span><br><span class="line"> designated port8001</span><br><span class="line"> forward delay15.00s</span><br><span class="line"> hello time2.00s</span><br><span class="line"> max age20.00s</span><br><span class="line"> ageing time300.00s</span><br><span class="line"> priority128</span><br></pre></td></tr></table></figure><p>当前网络拓扑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">            +-----------------------------------+</span><br><span class="line">            |          Internet                 |</span><br><span class="line">            +-----------------------------------+</span><br><span class="line">                             |</span><br><span class="line">                             |</span><br><span class="line">                             v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                   enp3s0 (Host Interface)               |</span><br><span class="line">|                   IP: 10.12.192.173                     |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                         br0 (Bridge)                    |</span><br><span class="line">|                      IP: 10.12.192.173                  |</span><br><span class="line">+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>创建一个 <code>tap0</code> 接口用于<code>VM0</code>使用，允许 <code>user</code> 用户访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tunctl -t tap0 -u user       </span><br></pre></td></tr></table></figure><p>在虚拟网桥中增加 <code>tap0</code> 接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo brctl addif br0 tap0</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">启用 tap0 接口，混杂模式</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">sudo ifconfig tap0 0.0.0.0 promisc up</span><br></pre></td></tr></table></figure><p>将网桥的 MAC 地址修改为宿主机的 MAC 地址，这样就可以接入公司网络了。否则因为内网的 MAC 地址过滤，无法接入公司网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig br0  hw ether 08:00:27:32:e7:09  promisc up</span><br></pre></td></tr></table></figure><p>查看虚拟网桥列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl show br0</span><br><span class="line"></span><br><span class="line">bridge name    bridge id    STP enabled    interfaces</span><br><span class="line">br0            8000.08002732e709  no             enp3s0</span><br><span class="line">                                                        tap0</span><br></pre></td></tr></table></figure><p>查看当前的网桥状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl showstp br0 </span><br><span class="line">br0</span><br><span class="line"> bridge id8000.08002732e709</span><br><span class="line"> designated root8000.08002732e709</span><br><span class="line"> root port   0path cost   0</span><br><span class="line"> max age  20.00bridge max age  20.00</span><br><span class="line"> hello time   2.00bridge hello time   2.00</span><br><span class="line"> forward delay  15.00bridge forward delay  15.00</span><br><span class="line"> ageing time 300.00</span><br><span class="line"> hello timer   0.00tcn timer   0.00</span><br><span class="line"> topology change timer   0.00gc timer   7.75</span><br><span class="line"> flags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enp2s0 (1)</span><br><span class="line"> port id8001state     forwarding</span><br><span class="line"> designated root8000.08002732e709path cost   4</span><br><span class="line"> designated bridge8000.08002732e709message age timer   0.00</span><br><span class="line"> designated port8001forward delay timer   0.00</span><br><span class="line"> designated cost   0hold timer   0.00</span><br><span class="line"> flags</span><br><span class="line"></span><br><span class="line">tap0 (2)</span><br><span class="line"> port id8002state     disabled</span><br><span class="line"> designated root8000.08002732e709path cost 100</span><br><span class="line"> designated bridge8000.08002732e709message age timer   0.00</span><br><span class="line"> designated port8002forward delay timer   0.00</span><br><span class="line"> designated cost   0hold timer   0.00</span><br><span class="line"> flags</span><br></pre></td></tr></table></figure><p><code>tap0</code>可能处于<code>disabled</code>状态，因为还没有虚拟机使用它。启动虚拟机之后会自动切换到<code>forwarding</code>状态。</p><p>当前网络拓扑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">            +-----------------------------------+</span><br><span class="line">            |          Internet                 |</span><br><span class="line">            +-----------------------------------+</span><br><span class="line">                             |</span><br><span class="line">                             |</span><br><span class="line">                             v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                   enp3s0 (Host Interface)               |</span><br><span class="line">|                   IP: 10.12.192.173                     |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                         br0 (Bridge)                    |</span><br><span class="line">|                      IP: 10.12.192.173                  |</span><br><span class="line">|                  +---------------------+                |</span><br><span class="line">|                  |        tap0         |                |</span><br><span class="line">|                  |     IP: 0.0.0.0     |                |</span><br><span class="line">+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>启动 QEMU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="string">&quot;qemu-system-riscv64 \</span></span><br><span class="line"><span class="string">  -nographic -machine virt \</span></span><br><span class="line"><span class="string">  -smp &quot;</span><span class="variable">$vcpu</span><span class="string">&quot; -m &quot;</span><span class="variable">$memory</span><span class="string">&quot;G \</span></span><br><span class="line"><span class="string">  -bios &quot;</span><span class="variable">$fw</span><span class="string">&quot; \</span></span><br><span class="line"><span class="string">  -drive file=&quot;</span><span class="variable">$drive</span><span class="string">&quot;,format=qcow2,id=hd0 \</span></span><br><span class="line"><span class="string">  -object rng-random,filename=/dev/urandom,id=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-vga \</span></span><br><span class="line"><span class="string">  -device virtio-rng-device,rng=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-blk-device,drive=hd0 \</span></span><br><span class="line"><span class="string">  -device virtio-net-device,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span></span><br><span class="line"><span class="string">  -netdev tap,id=tapnet,ifname=tap0,script=no,downscript=no \</span></span><br><span class="line"><span class="string">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet&quot;</span></span><br></pre></td></tr></table></figure><p>关注这段脚本的网络配置部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-device virtio-net-device,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span><br><span class="line">-netdev tap,id=tapnet,ifname=tap0,script=no,downscript=no \</span><br></pre></td></tr></table></figure><p>详细解释可以查看“QEMU 网络虚拟化章节”，第一个参数 <code>-device virtio-net-device</code> 定义了名为 <code>virtio-net-device</code> 的网络设备，并将其连接到一个名为 <code>tapnet</code> 的网络设备上，指定它的 MAC 地址为 <code>e0:be:03:88:54:e8</code>。第二个参数 <code>-netdev tap</code> 用于指定后端实现，使用<code>tap</code>方式，并且指定唯一 ID 为<code>tapnet</code>由<code>-device</code>参数中的子参数<code>netdev</code>使用，指定<code>ifname=tap0</code>，表示使用<code>tap0</code>接口作为虚拟化的后端。<code>script=no</code>和<code>downscript=no</code>表示不使用脚本来启动和关闭<code>tap0</code>接口。</p><p>查看当前的网络接口信息<code>ifconfig</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">br0: flags=4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.12.192.173  netmask 255.255.240.0  broadcast 10.12.207.255</span><br><span class="line">        inet6 fe80::e2be:3ff:fe88:eec9  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:32:e7:09  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 861148  bytes 310707296 (310.7 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17556062  bytes 1516515693 (1.5 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp2s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.12.192.173  netmask 255.255.240.0  broadcast 10.12.207.255</span><br><span class="line">        inet6 fe80::4964:61f8:420d:6781  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:32:e7:09  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 894523  bytes 325547917 (325.5 MB)</span><br><span class="line">        RX errors 0  dropped 1926  overruns 0  frame 0</span><br><span class="line">        TX packets 17563568  bytes 1516947572 (1.5 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 1654925876  bytes 134933568498 (134.9 GB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1654925876  bytes 134933568498 (134.9 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tap0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::f8ae:85ff:fed7:f9cd  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fa:ae:85:d7:f9:<span class="built_in">cd</span>  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 557  bytes 44913 (44.9 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 7165  bytes 832171 (832.1 KB)</span><br><span class="line">        TX errors 0  dropped 55942 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>当前网络拓扑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">            +-----------------------------------+</span><br><span class="line">            |          Internet                 |</span><br><span class="line">            +-----------------------------------+</span><br><span class="line">                             |</span><br><span class="line">                             |</span><br><span class="line">                             v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                   enp3s0 (Host Interface)               |</span><br><span class="line">|                   IP: 10.12.192.173                     |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                         br0 (Bridge)                    |</span><br><span class="line">|                      IP: 10.12.192.173                  |</span><br><span class="line">|                  +---------------------+                |</span><br><span class="line">|                  |        tap0         |                |</span><br><span class="line">|                  |     IP: 0.0.0.0     |                |</span><br><span class="line">+---------------------------|-----------------------------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">+---------------------------|-----------------------------+</span><br><span class="line">|                  |        eth0         |                |</span><br><span class="line">|                  |     IP:10.12.193.53 |                |</span><br><span class="line">|                  +---------------------+                |</span><br><span class="line">|                     VM0 (QEMU)                          |</span><br><span class="line">+---------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>查看当前的网桥状态，可以看到 tap0 已经处于 forwarding 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl showstp br0 </span><br><span class="line">br0</span><br><span class="line"> bridge id8000.08002732e709</span><br><span class="line"> designated root8000.08002732e709</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enp2s0 (1)</span><br><span class="line"> port id8001state     forwarding</span><br><span class="line"> designated root8000.08002732e709path cost   4</span><br><span class="line"> designated bridge8000.08002732e709message age </span><br><span class="line"></span><br><span class="line">tap0 (2)</span><br><span class="line"> port id8002state     forwarding</span><br><span class="line"> designated root8000.08002732e709path cost 100</span><br><span class="line"> designated bridge8000.08002732e709message age </span><br></pre></td></tr></table></figure><p>添加 VM1 过程就忽略了，添加后的网络拓扑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">            +-----------------------------------+</span><br><span class="line">            |          Internet                 |</span><br><span class="line">            +-----------------------------------+</span><br><span class="line">                             |</span><br><span class="line">                             |</span><br><span class="line">                             v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                   enp3s0 (Host Interface)               |</span><br><span class="line">|                   IP: 10.12.192.173                     |</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">                            |</span><br><span class="line">                            v</span><br><span class="line">+---------------------------------------------------------+</span><br><span class="line">|                         br0 (Bridge)                    |</span><br><span class="line">|                      IP: 10.12.192.173                  |</span><br><span class="line">|    +---------------------+  +-------------------+       |</span><br><span class="line">|    |        tap0         |  |        tap1       |       |</span><br><span class="line">|    |     IP: 0.0.0.0     |  |     IP: 0.0.0.0   |       |</span><br><span class="line">+---------------|-------------------------|---------------+</span><br><span class="line">                |                         |</span><br><span class="line">                v                         v</span><br><span class="line">+---------------|----------+  +-----------|---------------+</span><br><span class="line">|   |     eth0         |   |  |   |        eth0       |   |</span><br><span class="line">|   |  IP:10.12.193.53 |   |  |   |  IP:10.12.193.101 |   |</span><br><span class="line">|   +---------------------+|  |   +-------------------+   |</span><br><span class="line">|         VM0 (QEMU)       |  |         VM1 (QEMU)        |</span><br><span class="line">+--------------------------+  +---------------------------+</span><br></pre></td></tr></table></figure><h2 id="QEMU-网络虚拟化"><a href="#QEMU-网络虚拟化" class="headerlink" title="QEMU 网络虚拟化"></a>QEMU 网络虚拟化</h2><p>QEMU 对于网络的虚拟化需要两个参数来指定：</p><ul><li>其中一个用于指定网络的前端驱动，也就是 Guest 中的实现</li><li>另一个用于指定网络的后端实现，也就是在 Host 中的实现。</li></ul><p>QEMU 支持两种方式来实现网络虚拟化，一种是旧版本上使用的参数为 <code>-net</code> 配合 <code>-net</code> ，另一种是在新版本上支持的 <code>-device</code> 配合 <code>-netdev</code> 。QEMU 的发展趋势是倾向于用 <code>-device</code> 一种命令格式来虚拟出不同的设备，其中包括网卡设备。</p><h3 id="net-amp-net-legacy"><a href="#net-amp-net-legacy" class="headerlink" title="-net &amp; -net (legacy)"></a>-net &amp; -net (legacy)</h3><p>虽然仍然支持，但是逐步被废弃，不推荐使用。</p><p>我们以以下命令为例，来说明 <code>-net</code> 和 <code>-net</code> 的使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vcpu=8</span><br><span class="line">memory=8</span><br><span class="line">drive=<span class="string">&quot;openEuler-22.09-V1-riscv64-qemu.qcow2&quot;</span></span><br><span class="line">fw=<span class="string">&quot;fw_payload_oe_qemuvirt.elf&quot;</span></span><br><span class="line"></span><br><span class="line">cmd=<span class="string">&quot;qemu-system-riscv64 \</span></span><br><span class="line"><span class="string">  -nographic -machine virt \</span></span><br><span class="line"><span class="string">  -smp &quot;</span><span class="variable">$vcpu</span><span class="string">&quot; -m &quot;</span><span class="variable">$memory</span><span class="string">&quot;G \</span></span><br><span class="line"><span class="string">  -kernel &quot;</span><span class="variable">$fw</span><span class="string">&quot; \</span></span><br><span class="line"><span class="string">  -bios none \</span></span><br><span class="line"><span class="string">  -drive file=&quot;</span><span class="variable">$drive</span><span class="string">&quot;,format=qcow2,id=hd0 \</span></span><br><span class="line"><span class="string">  -object rng-random,filename=/dev/urandom,id=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-vga \</span></span><br><span class="line"><span class="string">  -device virtio-rng-device,rng=rng0 \</span></span><br><span class="line"><span class="string">  -device virtio-blk-device,drive=hd0 \</span></span><br><span class="line"><span class="string">  -net nic,mac=52:54:00:12:34:56 \</span></span><br><span class="line"><span class="string">  -net tap,ifname=tap0,script=no,downscript=no \</span></span><br><span class="line"><span class="string">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet \</span></span><br><span class="line"><span class="string">  -append &#x27;root=/dev/vda1 rw console=ttyS0 swiotlb=1 loglevel=3 systemd.default_timeout_start_sec=600 selinux=0 highres=off mem=&quot;</span><span class="variable">$memory_append</span><span class="string">&quot;M earlycon&#x27; &quot;</span></span><br></pre></td></tr></table></figure><p>其中这两个参数即实现了虚拟化网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-net nic,mac=52:54:00:12:34:56 \</span><br><span class="line">-net tap,ifname=tap0,script=no,downscript=no \</span><br></pre></td></tr></table></figure><p>第一个参数 <code>-net nic</code> 用于指定上述所说的前端驱动，也就是 Guest 中的实现，这里使用的是 默认的驱动，这个驱动是 QEMU 中的一个虚拟网卡设备，指定它的 MAC 地址为 <code>52:54:00:12:34:56</code>。</p><p>第二个参数 <code>-net tap</code> 用于指定后端实现，也就是 Host 中的实现，这里使用的是 <code>tap</code> 驱动，它的网卡名称为 <code>tap0</code>，并且不执行任何脚本。这两个参数的组合就实现了虚拟化网络。</p><p>更多示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-net nic,model=virtio \</span><br><span class="line">-net tap,ifname=tap3,script=/ect/qemu/qemu-ifup,downscript=no \</span><br></pre></td></tr></table></figure><p>第一个参数 <code>-net nic</code> 用于指定上述所说的前端驱动，也就是 Guest 中的实现，这里使用的是 <code>virtio</code> 驱动，这个驱动是 QEMU 中的一个虚拟网卡设备。第二个参数 <code>-net tap</code> 用于指定后端实现，也就是 Host 中的实现，这里使用的是 <code>tap</code> 驱动，它的网卡名称为 <code>tap3</code>，并且执行脚本 <code>/ect/qemu/qemu-ifup</code>。</p><blockquote><p>解释<code>/ect/qemu/qemu-ifup</code><br>该脚本用于创建网桥，将网桥与宿主机的网卡绑定，然后将虚拟网卡绑定到网桥上，这样虚拟机就可以通过网桥与宿主机通信，宿主机也可以通过网桥与虚拟机通信。</p></blockquote><h3 id="device-amp-netdev-（Recommended）"><a href="#device-amp-netdev-（Recommended）" class="headerlink" title="-device &amp; -netdev （Recommended）"></a>-device &amp; -netdev （Recommended）</h3><p>这是新版本的 QEMU 支持的命令格式，也是 QEMU 未来的发展趋势，我们以以下命令为例，来说明 <code>-device</code> 和 <code>-netdev</code> 的使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-riscv64 \</span><br><span class="line">  -nographic -machine virt \</span><br><span class="line">  -smp <span class="string">&quot;<span class="variable">$vcpu</span>&quot;</span> -m <span class="string">&quot;<span class="variable">$memory</span>&quot;</span>G \</span><br><span class="line">  -bios <span class="string">&quot;<span class="variable">$fw</span>&quot;</span> \</span><br><span class="line">  -drive file=<span class="string">&quot;<span class="variable">$drive</span>&quot;</span>,format=qcow2,id=hd0 \</span><br><span class="line">  -object rng-random,filename=/dev/urandom,id=rng0 \</span><br><span class="line">  -device virtio-vga \</span><br><span class="line">  -device virtio-rng-device,rng=rng0 \</span><br><span class="line">  -device virtio-blk-device,drive=hd0 \</span><br><span class="line">  -device virtio-net-device,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span><br><span class="line">  -netdev tap,id=tapnet,ifname=tap0,script=~/qemu-script/qemu-ifup,downscript=no \</span><br><span class="line">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet</span><br></pre></td></tr></table></figure><p>其中这两个参数即实现了虚拟化网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-device virtio-net-device,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span><br><span class="line">-netdev tap,id=tapnet,ifname=tap0,script=~/qemu-script/qemu-ifup,downscript=no \</span><br></pre></td></tr></table></figure><p>第一个参数 <code>-device virtio-net-device</code> 用于指定上述所说的前端驱动，也就是 Guest 中的实现，定义了名为 <code>virtio-net-device</code> 的网络设备，并将其连接到一个名为 <code>tapnet</code> 的网络设备上，指定它的 MAC 地址为 <code>e0:be:03:88:54:e8</code>。</p><p>第二个参数 <code>-netdev tap</code> 用于指定后端实现，使用<code>tap</code>方式，并且指定唯一 ID 为<code>tapnet</code>由<code>-device</code>参数中的子参数<code>netdev</code>使用。网卡名称为<code>tap0</code>并且执行脚本 <code>~/qemu-script/qemu-ifup</code>。</p><blockquote><p>-netdev 参数中 id 的使用<br>-netdev 参数中的 id 用于指定唯一的 ID，这个 ID 会被 <code>-device</code> 参数中的子参数 <code>netdev</code> 使用，这样 <code>-device</code> 参数就知道要将前端驱动连接到哪个后端实现上了。id 可以自定义任意唯一字符串如<code>-netdev tap,id=test</code>对应<code>-device virtio-net-device,netdev=test</code></p></blockquote><p>更多示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-device virtio-net-pci,netdev=tapnet,mac=e0:be:03:88:54:e8 \</span><br><span class="line">-netdev tap,id=tapnet,script=no,downscript=no \</span><br></pre></td></tr></table></figure><p>第一个参数 <code>-device virtio-net-pci</code> 定义了名为 <code>virtio-net-pci</code> 的网络设备，并将其连接到一个名为 <code>tapnet</code> 的网络设备上，指定它的 MAC 地址为 <code>e0:be:03:88:54:e8</code>。</p><p>第二个参数，仔细观察会发现，我们没有定义链接到后端网卡的名称<code>ifname</code>，这是因为以<code>tap</code>模式启动 QEMU 时会自动创建<code>tap</code>设备，具体网卡名称根据当前宿主机的网卡情况而定，默认会创建一个名为<code>tap0</code>的网卡，如果启动了两个虚拟机，那么第二个虚拟机的网卡名称就是<code>tap1</code>，以此类推。</p><h3 id="区分-tap-模式与-bridge-模式"><a href="#区分-tap-模式与-bridge-模式" class="headerlink" title="区分 tap 模式与 bridge 模式"></a>区分 tap 模式与 bridge 模式</h3><p>我们有时候会用以下的命令进行 QEMU 虚拟机桥接网络的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-device virtio-net-device,netdev=bridgenet,mac=52:54:00:12:34:57 \</span><br><span class="line">-netdev bridge,ifname=br0,id=bridgenet</span><br></pre></td></tr></table></figure><p>这也能为我们创建一个桥接网络，这是因为它和 <code>-netdev tap</code> 的工作方式是一样的，只是 <code>-netdev bridge</code> 的简化写法，<code>qemu-bridge-helper</code> 在背后替我们做了 <code>tap</code> 设备创建以及将 <code>tap</code> 设备加入桥接口的所有事情。</p><h3 id="添加多张网卡"><a href="#添加多张网卡" class="headerlink" title="添加多张网卡"></a>添加多张网卡</h3><p>如果了解上述内容，添加多张网卡就十分容易实现了，我们只需要再添加一对 <code>-device</code> 和 <code>-netdev</code> 参数即可，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-riscv64 \</span><br><span class="line">  -nographic -machine virt \</span><br><span class="line">  -smp <span class="string">&quot;<span class="variable">$vcpu</span>&quot;</span> -m <span class="string">&quot;<span class="variable">$memory</span>&quot;</span>G \</span><br><span class="line">  -bios <span class="string">&quot;<span class="variable">$fw</span>&quot;</span> \</span><br><span class="line">  -drive file=<span class="string">&quot;<span class="variable">$drive</span>&quot;</span>,format=qcow2,id=hd0 \</span><br><span class="line">  -object rng-random,filename=/dev/urandom,id=rng0 \</span><br><span class="line">  -device virtio-vga \</span><br><span class="line">  -device virtio-rng-device,rng=rng0 \</span><br><span class="line">  -device virtio-blk-device,drive=hd0 \</span><br><span class="line">  -device virtio-net-device,netdev=tapnet0,mac=e0:be:03:88:54:e8 \</span><br><span class="line">  -netdev tap,id=tapnet0,script=/etc/qemu/qemu-ifup,downscript=/etc/qemu/qemu-ifdown \</span><br><span class="line">  -device virtio-net-device,netdev=tapnet1,mac=e0:be:03:88:54:e8 \</span><br><span class="line">  -netdev tap,id=tapnet1,script=/etc/qemu/qemu-ifup,downscript=/etc/qemu/qemu-ifdown \</span><br><span class="line">  -device qemu-xhci -usb -device usb-kbd -device usb-tablet</span><br></pre></td></tr></table></figure><p>需要注意的是，我们需要为每个 <code>-device</code> 参数指定一个唯一的 ID，这个 ID 会被 <code>-netdev</code> 参数中的子参数 <code>netdev</code> 使用，这样 <code>-device</code> 参数就知道要将前端驱动连接到哪个后端实现上了。并且每个 <code>tap</code> 设备只能被一个虚拟机使用，所以每个虚拟机的 <code>tap</code> 设备名称不能相同。</p><p>登录虚拟机查看网卡信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># ifconfig </span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.12.193.53  netmask 255.255.240.0  broadcast 10.12.207.255</span><br><span class="line">        inet6 fe80::9e6:287b:30a2:574d  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether e0:be:03:88:54:e8  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 81  bytes 9871 (9.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 19  bytes 1735 (1.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.12.193.101  netmask 255.255.240.0  broadcast 10.12.207.255</span><br><span class="line">        inet6 fe80::4fe0:9e1e:4681:52b7  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 80:d4:09:62:<span class="built_in">cd</span>:3c  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 76  bytes 9471 (9.2 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 15  bytes 1708 (1.6 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h2 id="不同网络策略工作方式"><a href="#不同网络策略工作方式" class="headerlink" title="不同网络策略工作方式"></a>不同网络策略工作方式</h2><ul><li>NAT 网络模式<ul><li>NAT 网络以路由器的 NAT 功能为原理，允许虚拟机通过共享主机的 IP 地址访问互联网，但虚拟机之间不能直接通信。通过端口转发可以实现虚拟机之间的连接。</li></ul></li><li>桥接网络模式<ul><li>桥接网络模式通过虚拟交换机连接虚拟机和主机，使得虚拟机可以通过局域网访问互联网，并允许虚拟机之间直接通信。</li></ul></li><li>内部网络模式<ul><li>内部网络模式使得虚拟机可以创建一个完全隔离的网络，虚拟机之间可以直接通信，但无法访问互联网或外部网络。</li></ul></li><li>仅主机网络模式<ul><li>仅主机网络模式允许虚拟机之间可以通信，并且与主机之间也可以通信，但无法访问互联网或外部网络。</li></ul></li></ul><table><thead><tr><th></th><th>VM &lt;&gt; VM</th><th>VM → HOST</th><th>HOST → VM</th><th>VM → Internet</th><th>Internet → VM</th></tr></thead><tbody><tr><td>网络地址转换 NAT</td><td>×</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>NAT 网络</td><td>√</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>Bridged Adapter 桥接网卡</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="TUN-TAP-网络设备"><a href="#TUN-TAP-网络设备" class="headerlink" title="TUN/TAP 网络设备"></a>TUN/TAP 网络设备</h2><p>TAP 属于 Linux 内核支持的一种虚拟化网络设备，还有 TUN 也属于这种设备，它们完全由软件模拟实现，TUN/TAP 负责在内核协议栈和用户进程之间传送协议数据单元。TUN 工作在网络层，而 TAP 工作在数据链路层，TUN 负责与应用程序交换 IP 数据包，而 TAP 与应用程序交换以太网帧。所以 TUN 经常涉及路由，而 TAP 常用于网络桥接。</p><h1 id="SSH-远程登录虚拟机"><a href="#SSH-远程登录虚拟机" class="headerlink" title="SSH 远程登录虚拟机"></a>SSH 远程登录虚拟机</h1><p>宿主机任意下目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/user/.ssh/id_rsa): host2vm0_id_irsa</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> host2vm0_id_irsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> host2vm0_id_irsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:OkWcw+R3x6Z2mzeYQuG033H3N9qIeym3TZKzz6YD8tQ user@ubuntu18</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        .        |</span></span><br><span class="line"><span class="string">|       = .   .   |</span></span><br><span class="line"><span class="string">|        B .o. +  |</span></span><br><span class="line"><span class="string">|       . oo.o+   |</span></span><br><span class="line"><span class="string">|        S  ++ ..o|</span></span><br><span class="line"><span class="string">|       o ..+.E=o=|</span></span><br><span class="line"><span class="string">|      o   +..B+=+|</span></span><br><span class="line"><span class="string">|       .   oo=@o+|</span></span><br><span class="line"><span class="string">|           o=**= |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>一直回车确定，生成公私钥，保存在<code>~/.ssh</code>目录下。</p><blockquote><p>我在宿主机上生成的公私钥名称为，分别是<code>host2vm0_id_rsa</code>,<code>host2vm0_id_rsa.pub</code>方便我记忆。如果一直回车，那么生成的公私钥名称为<code>id_rsa</code>，<code>id_rsa.pub</code>。</p></blockquote><p>将公钥复制到虚拟机 <code>VM0</code> 上，以当前虚拟机 <code>VM0</code> 的 IP：<code>10.12.193.53</code> 为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id 10.12.193.53</span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to <span class="built_in">log</span> <span class="keyword">in</span> with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- <span class="keyword">if</span> you are prompted now it is to install the new keys</span><br><span class="line">user@10.12.193.53<span class="string">&#x27;s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Number of key(s) added: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now try logging into the machine, with:   &quot;ssh &#x27;</span>10.12.193.53<span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">and check to make sure that only the key(s) you wanted were added.</span></span><br></pre></td></tr></table></figure><p>然后就可以直接免密码登录了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@10.12.193.53</span><br></pre></td></tr></table></figure><h1 id="Fixed-Problems-Ongoing"><a href="#Fixed-Problems-Ongoing" class="headerlink" title="Fixed Problems (Ongoing)"></a>Fixed Problems (Ongoing)</h1><h2 id="cannot-ioctl-tunsetiff-tap0-device-or-resource-busy-errno-16"><a href="#cannot-ioctl-tunsetiff-tap0-device-or-resource-busy-errno-16" class="headerlink" title="cannot ioctl tunsetiff tap0 device or resource busy (errno=16)"></a>cannot ioctl tunsetiff tap0 device or resource busy (errno=16)</h2><h2 id="failed-to-initialize-tap-device-Operation-not-permitted"><a href="#failed-to-initialize-tap-device-Operation-not-permitted" class="headerlink" title="failed to initialize tap device: Operation not permitted"></a>failed to initialize tap device: Operation not permitted</h2><p>同类型错误：failed to create TAP device: Operation not permitted。因为创建虚拟设备 <code>tap</code> 需要 <code>root</code> 权限，所以需要使用 <code>sudo</code> 命令。执行 QEMU 启动是需要添加 <code>sudo</code>。</p><h2 id="QEMU-虚拟机启动后网卡处于-DOWN-状态，无法获取-IP"><a href="#QEMU-虚拟机启动后网卡处于-DOWN-状态，无法获取-IP" class="headerlink" title="QEMU 虚拟机启动后网卡处于 DOWN 状态，无法获取 IP"></a>QEMU 虚拟机启动后网卡处于 DOWN 状态，无法获取 IP</h2><p>查看是否是 MAC 地址配置错误，使用下面命令检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 up</span><br><span class="line">SIOCSIFFLAGS: Cannot assign requested address</span><br></pre></td></tr></table></figure><p>如果报错，参考下面章节<strong>SIOCSIFFLAGS: Cannot assign requested address</strong>解决方法进行解决。</p><h2 id="虚拟机可以-ping-通外网，宿主机无法-ping-外网"><a href="#虚拟机可以-ping-通外网，宿主机无法-ping-外网" class="headerlink" title="虚拟机可以 ping 通外网，宿主机无法 ping 外网"></a>虚拟机可以 ping 通外网，宿主机无法 ping 外网</h2><p>这种情况说明基本网络没有问题，只是 DNS 解析有问题，可以通过修改<code>/etc/resolv.conf</code>文件解决。</p><p>海宁 DNS 服务器地址：<code>10.12.2.21</code> 和 <code>10.12.2.22</code>，我的情况是只能 <code>ping 10.12.2.21</code>，可以选择自己能 <code>ping</code> 通的 DNS 服务器地址。如果无法 <code>ping</code> 通，说明问题不在这，需要自行解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 DNS 服务器地址</span></span><br><span class="line">sudo vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">nameserver 10.12.2.21</span><br><span class="line">nameserver 10.12.2.22</span><br></pre></td></tr></table></figure><h2 id="网络配置错误，如何恢复配置之前的状态"><a href="#网络配置错误，如何恢复配置之前的状态" class="headerlink" title="网络配置错误，如何恢复配置之前的状态"></a>网络配置错误，如何恢复配置之前的状态</h2><p>最简单的方式 - 重启，因为所有操作都是命令行配置，都是临时配置，可以直接重启解决。</p><p>既然有这一小节，说明肯定有时候不方便直接重启，那么就需要手动恢复配置之前的状态。但是能够恢复的<strong>前提是需要记得之前的网卡 IP 地址、子网掩码、网关、广播地址等信息</strong>。这些信息在局域网里，可能只有 IP 不同，其他信息如果没记住可以查看其他同事的网卡配置即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将网桥绑定的网卡从网桥上移除</span></span><br><span class="line">sudo brctl delif br0 enp2s0</span><br><span class="line">sudo brctl delif br0 tap0</span><br><span class="line"><span class="comment"># 配置宿主机网卡信息，必须一字不差，保持和之前一模一样才能恢复</span></span><br><span class="line">sudo ip addr add 10.12.192.173/20 broadcast 10.12.207.255 dev enp2s0</span><br><span class="line"><span class="comment"># 必须设置网关</span></span><br><span class="line">sudo ip route add default via 10.12.192.1 dev enp2s0</span><br><span class="line"><span class="comment"># 重启网络管理器</span></span><br><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure><h2 id="netdev-tap-id-tapnet-script-qemu-script-qemu-ifup-network-script-qemu-script-qemu-ifup-failed-with-status-256"><a href="#netdev-tap-id-tapnet-script-qemu-script-qemu-ifup-network-script-qemu-script-qemu-ifup-failed-with-status-256" class="headerlink" title="-netdev tap,id=tapnet,script=/qemu-script/qemu-ifup,:network script /qemu-script/qemu-ifup failed with status 256"></a>-netdev tap,id=tapnet,script=/qemu-script/qemu-ifup,:network script /qemu-script/qemu-ifup failed with status 256</h2><p>可能原因 1: <code>qemu-ifup</code> 脚本没有执行权限，需要添加执行权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x qemu-ifup</span><br></pre></td></tr></table></figure><p>可能原因 2: <code>qemu-ifup</code> 路径不对，必须放到<code>/etc/qemu/</code>目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/qemu</span><br><span class="line">mv qemu-ifup /etc/qemu &amp;&amp; mv qemu-ifdown /etc/qemu </span><br><span class="line">sudo chmod +x qemu-ifup</span><br><span class="line">sudo chmod +x qemu-ifdown</span><br></pre></td></tr></table></figure><h2 id="SIOCSIFFLAGS-Cannot-assign-requested-address"><a href="#SIOCSIFFLAGS-Cannot-assign-requested-address" class="headerlink" title="SIOCSIFFLAGS: Cannot assign requested address"></a>SIOCSIFFLAGS: Cannot assign requested address</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 up</span><br><span class="line">SIOCSIFFLAGS: Cannot assign requested address</span><br></pre></td></tr></table></figure><p>一般由于 MAC 地址配置错误导致，可以通过修改 MAC 地址为多播地址解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig enp2s0 hw ether 00:11:22:33:44:55</span><br></pre></td></tr></table></figure><p>重启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig enp2s0 down</span><br><span class="line">sudo ifconfig enp2s0 up</span><br></pre></td></tr></table></figure><p>MAC 地址的第一个字节中的最后一位（即第 7 位）用于标识该地址是单播，多播还是广播地址。如果这个位设置为 0，则表示这是一个单播地址；如果设置为 1，则表示这是一个多播或广播地址。</p><p>使用这种方法，我们可以确定上述每个 MAC 地址是否是单播地址：</p><ul><li><code>cd:c2:05:84:c8:2c</code> - 单播地址</li><li><code>13:7b:49:fc:a6:aa</code> - 单播地址</li><li><code>8f:aa:42:29:e8:68</code> - 单播地址</li></ul><p><code>00:11:22:33:44:55</code> 是多播地址。</p><h2 id="qemu-device-drive-with-0-bus-0-unit-0-exists"><a href="#qemu-device-drive-with-0-bus-0-unit-0-exists" class="headerlink" title="qemu -device drive with 0 bus=0 unit=0 exists"></a>qemu -device drive with 0 bus=0 unit=0 exists</h2><p>这个错误通常意味着您尝试在 QEMU VM 中添加一个重复的设备。</p><p>如果您已经在 VM 中添加了驱动器，则可能会出现此问题。您可以检查是否存在两个具有相同 <code>bus</code> 和 <code>unit</code> 的设备（在此情况下，都是 0）。解决此问题的方法是删除重复设备或更改其配置以包括唯一的 <code>bus</code> 和 <code>unit</code>。</p><p>如果您没有意图添加重复的设备，在运行 QEMU 之前，您可能需要检查您的命令行，以确保正确设置了 <code>-drive</code> 选项。请注意，当使用 <code>-device</code> 添加设备时，您还应该避免使用 <code>-drive</code> 选项，因为它们可能引起冲突。</p><p>如果您需要进一步帮助，建议提供完整的 QEMU 命令和参数列表，以便更好地理解问题并提供更详细的建议。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置 // 围城</a></li><li><a href="https://www.junmajinlong.com/img/virtual/1594802457384.png">理解 Linux 虚拟网卡设备 tun/tap 的一切 | 骏马金龙</a></li><li><a href="https://wzt.ac.cn/2021/05/28/QEMU-networking/">QEMU 网络配置一把梭 | CataLpa’s Site</a></li><li><a href="https://blog.csdn.net/u014022631/article/details/53411557">qemu 虚拟机与外部网络的通信 li_Jiejun 的博客-CSDN 博客</a></li><li><a href="https://zhou-yuxin.github.io/articles/2018/%E5%AE%89%E8%A3%85qemu-kvm%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/index.html">安装 qemu-kvm 以及配置桥接网络</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/106767540">QEMU 中的网络虚拟化配置_程序猿 Ricky 的日常干货的博客-CSDN 博客</a></li><li><a href="https://mirror.iscas.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/preview/openEuler-22.09-V1-riscv64/QEMU/">Nginx Directory</a></li><li><a href="https://www.cnblogs.com/huqingyu/archive/2005/04/03/131102.html">QEMU 网络配置 - 浙林龙哥 - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/432022126">【qemu】qemu 网络配置 - 知乎</a></li><li><a href="https://tomwei7.com/2021/10/09/qemu-network-config/">QEMU 网络配置 // 围城</a></li><li><a href="https://zhou-yuxin.github.io/articles/2018/%E5%AE%89%E8%A3%85qemu-kvm%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%A1%A5%E6%8E%A5%E7%BD%91%E7%BB%9C/index.html">安装 qemu-kvm 以及配置桥接网络</a></li><li><a href="https://blog.virt.ltd/blog/archives/37/">在 qemu 中使用桥接网络 - T^3 Blog</a></li><li><a href="http://wiki.yanick.site/wiki/os/qemu/">为 QEMU 配置网桥上网 | Yanick’s Wiki</a></li><li><a href="https://www.junmajinlong.com/virtual/network/all_about_tun_tap/">理解 Linux 虚拟网卡设备 tun/tap 的一切 | 骏马金龙</a></li><li><a href="https://wzt.ac.cn/2021/05/28/QEMU-networking/">QEMU 网络配置一把梭 | CataLpa’s Site</a></li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Quick-Setup&quot;&gt;&lt;a href=&quot;#Quick-Setup&quot; class=&quot;headerlink&quot; title=&quot;Quick Setup&quot;&gt;&lt;/a&gt;Quick Setup&lt;/h1&gt;&lt;h2 id=&quot;安装工具&quot;&gt;&lt;a href=&quot;#安装工具&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="QEMU, 虚拟机, 网络配置" scheme="http://example.com/tags/QEMU-%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用 Yadm 管理并同步配置文件 Dotfile</title>
    <link href="http://example.com/2023/07/30/%E4%BD%BF%E7%94%A8Yadm%E7%AE%A1%E7%90%86%E5%B9%B6%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6Dotfile/"/>
    <id>http://example.com/2023/07/30/%E4%BD%BF%E7%94%A8Yadm%E7%AE%A1%E7%90%86%E5%B9%B6%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6Dotfile/</id>
    <published>2023-07-30T05:39:04.000Z</published>
    <updated>2023-07-31T12:44:28.878Z</updated>
    
    <content type="html"><![CDATA[<p>Dotfiles 就是我们在使用软件的时候，软件为了存储我们个人偏好设置而建立的一个以 <code>.</code> 开头的文件。例如，vim 的配置文件就是 <code>.vimrc</code>，zsh 的配置文件就是 <code>.zshrc</code>。这些文件通常存储在用户的 home 目录中。但是，在不同的电脑上工作时，如果需要使用相同的配置，我们可以考虑使用版本控制工具来管理这些文件。或者在一台新电脑上想快速配置好环境，也可以使用版本控制工具来管理这些文件。Yadm 就可以帮助我们完成这些需求。</p><h1 id="安装-yadm"><a href="#安装-yadm" class="headerlink" title="安装 yadm"></a>安装 yadm</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 <code>yadm</code> 非常简单，只需在终端输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install yadm</span><br></pre></td></tr></table></figure><h2 id="初始化-yadm-仓库"><a href="#初始化-yadm-仓库" class="headerlink" title="初始化 yadm 仓库"></a>初始化 yadm 仓库</h2><p>创建一个新的 yadm 仓库很容易，只需在 home 目录中运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm init</span><br></pre></td></tr></table></figure><p>现在，yadm 已经创建了一个空白的 git 仓库。</p><h2 id="添加-dotfile-文件"><a href="#添加-dotfile-文件" class="headerlink" title="添加 dotfile 文件"></a>添加 dotfile 文件</h2><p>要将现有的 dotfile 添加到 yadm 仓库中，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm add ~/.zshrc</span><br></pre></td></tr></table></figure><p>一旦您完成了对要添加的文件的更改并将它们添加到 yadm 仓库中，您需要提交它们。可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm commit -m &quot;Add .zshrc file to yadm repository&quot;</span><br></pre></td></tr></table></figure><h2 id="建立远程仓库"><a href="#建立远程仓库" class="headerlink" title="建立远程仓库"></a>建立远程仓库</h2><p>使用 yadm 还可以将 dotfile 文件同步到 GitHub 等 Git 托管服务中。</p><p>登录 Github，创建一个新的仓库。例如，您可以创建一个名为 <code>dotfile</code> 的仓库。现在，您需要将本地仓库与远程仓库连接起来。要将本地仓库连接到远程仓库，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm remote add origin https://github.com/[用户名]/dotfile.git</span><br></pre></td></tr></table></figure><p>现在 yadm 已经连接到您在 Github 上创建的仓库。要将本地代码上传到远程仓库，请使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm push</span><br></pre></td></tr></table></figure><h1 id="使用多台电脑时如何同步配置"><a href="#使用多台电脑时如何同步配置" class="headerlink" title="使用多台电脑时如何同步配置"></a>使用多台电脑时如何同步配置</h1><p>假设需要在多个计算机之间共享 <code>dotfile</code> 文件。只需按照以下步骤即可：</p><ol><li>在另一台计算机上安装 yadm 并初始化 yadm 仓库。</li><li>将远程仓库克隆到该计算机的 yadm 仓库中：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm clone https://github.com/[用户名]/dotfile.git</span><br></pre></td></tr></table></figure></li><li>此时，您的 dotfile 文件应在计算机上自动更新。</li></ol><p>执行完 clone 命令后实际上就是 yadm 会把远程仓库的文件都拷贝到本地。</p><h2 id="如果本地有修改和远程有冲突怎么办"><a href="#如果本地有修改和远程有冲突怎么办" class="headerlink" title="如果本地有修改和远程有冲突怎么办"></a>如果本地有修改和远程有冲突怎么办</h2><p>如果本地有修改，远程也有修改，那么就会产生冲突。这时候需要先解决冲突，然后再提交。</p><h2 id="每台电脑的配置不一样怎么办"><a href="#每台电脑的配置不一样怎么办" class="headerlink" title="每台电脑的配置不一样怎么办"></a>每台电脑的配置不一样怎么办</h2><p>比如我们会在<code>.zshrc</code>中配置一些环境变量，但是每台电脑的环境变量可能不一样。这时候我们可以在<code>.zshrc</code>中添加一些判断，比如我们可以简单的判断一下主机名，然后根据主机名来加载不同的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$HOSTNAME</span> = <span class="string">&quot;xxx&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># xxx的配置</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$HOSTNAME</span> = <span class="string">&quot;yyy&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># yyy的配置</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>但有一些配置文件可能不支持这样的添加语句，比如<code>.gitconfig</code>，这时候我们可以使用 yadm 的 Alternate Files 功能解决。</p><p>Alternate Files 是一个用于管理同一文件不同版本的功能，有时在不同的主机、操作系统和用户需要不同的文件。Alternate Files 允许使用同一个文件名字，在文件名后添加一个带有条件的后缀，例如##os.Linux,hostname.host1，class.work，yadm 会根据当前系统的特定条件自动选择适当的版本，并创建符号链接。如果没有符合条件的版本，它将选择默认版本。</p><p>就以<code>.gitconfig</code>配置文件为例，我们通常在公司的电脑和家里的电脑配置不太一样，比如公司使用下面的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">email = 公司邮箱</span><br><span class="line">name = 公司用户名</span><br></pre></td></tr></table></figure><p>在家里使用下面的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    email = 日常使用邮箱</span><br><span class="line">    name = 日常使用用户名</span><br></pre></td></tr></table></figure><p>配置文件不支持条件语句，所以无法通过直接在同一个配置文件里完成不同环境的配置。这就用到了 Alternate Files 功能，我们可以复制两个<code>.gitconfig</code>文件后面添加一个条件后缀，比如<code>.gitconfig##class.work</code>，然后在<code>.gitconfig##class.work</code>文件中添加公司的配置，<code>.gitconfig</code>文件中添加家里的配置。这样 yadm 就会根据当前的主机名自动选择合适的配置文件。并把这三个文件都加入到 yadm 仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yadm add ~/.gitconfig</span><br><span class="line">yadm add ~/.gitconfig<span class="comment">##class.work</span></span><br><span class="line">yadm add ~/.gitconfig<span class="comment">##class.home</span></span><br></pre></td></tr></table></figure><p>那么 yadm 是如何实现不同环境的切换呢？我们还需要进一步配置，有注意到我们的配置文件名中的<code>class</code>属性吗，这是 yadm 支持的条件属性之一。我们可以通过<code>yadm config</code>命令来配置当前电脑的属性。比如我们配置公司电脑的<code>class</code>属性为<code>work</code>，家里的电脑的<code>class</code>属性为<code>home</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yadm config local.class work</span><br></pre></td></tr></table></figure><p>我们执行完此命令后，yadm 会自动为<code>.gitconfig</code>文件添加一个软链接，链接到<code>.gitconfig##class.work</code>文件。这样我们就可以在公司电脑上使用公司的配置了。如果我们在家里的电脑上执行<code>yadm config local.class home</code>，那么 yadm 会自动为<code>.gitconfig</code>文件添加一个软链接，链接到<code>.gitconfig##class.home</code>文件。这样我们就可以在家里的电脑上使用家里的配置了。</p><p>yadm 支持以下这些条件：</p><table><thead><tr><th>属性</th><th>意义</th></tr></thead><tbody><tr><td>arch, a</td><td>如果值匹配架构则有效。通过运行 uname -m 计算架构。</td></tr><tr><td>class, c</td><td>如果值匹配 local.class 配置，则有效。必须使用“yadm config local.class <class>”手动设置 Class。</td></tr><tr><td>default</td><td>当没有其他备选项有效时有效。</td></tr><tr><td>distro, d</td><td>如果值与发行版匹配，则有效。通过运行 lsb_release -si或检查/etc/os-release来计算分布。</td></tr><tr><td>distro_family, f</td><td>如果值匹配发行版系列，则有效。通过检查/etc/os-release 中的 ID_LIKE 行计算发行版系列。</td></tr><tr><td>extension, e</td><td>一种特殊的“条件”，不影响选择过程。它的目的是允许备选文件以特定扩展名结尾，例如使编辑器正确突出显示内容。</td></tr><tr><td>hostname, h</td><td>如果值匹配短主机名，则有效。通过运行 uname -n，并去除任何域来计算主机名。</td></tr><tr><td>os，o</td><td>如果值与操作系统匹配，则有效。通过运行 uname -s 计算 OS。*</td></tr><tr><td>template, t</td><td>当值与支持的模板处理器匹配时有效。有关更多详细信息，请参见模板部分。</td></tr><tr><td>user, u</td><td>如果值匹配当前用户，则有效。通过运行 id -u -n 计算当前用户。</td></tr></tbody></table><p>再举个例子，上面用的 class 条件是必须通过<code>yadm config local.class &lt;class&gt;</code>手动设置的。但是有一些条件不需要手动设置 yadm 可以自动识别。比如 os 属性。我们将<code>.zshrc</code>文件复制两份份，命名为<code>.zshrc##os.Linux</code>和<code>.zshrc##os.Darwin</code>，然后在<code>.zshrc##os.Linux</code>文件中添加一些 Linux 系统的配置，<code>.zshrc##os.Darwin</code>文件中添加一些 Mac 系统的配置。并把这三个文件都加入到 <code>yadm</code> 仓库中。这样 <code>yadm</code> 就会根据当前的系统自动选择合适的配置文件。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Dotfiles 就是我们在使用软件的时候，软件为了存储我们个人偏好设置而建立的一个以 &lt;code&gt;.&lt;/code&gt; 开头的文件。例如，vim 的配置文件就是 &lt;code&gt;.vimrc&lt;/code&gt;，zsh 的配置文件就是 &lt;code&gt;.zshrc&lt;/code&gt;。这些文件通</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="工具推荐" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>QEMU启动RISC-V架构OpenEuler并配置OSC环境</title>
    <link href="http://example.com/2023/07/23/QEMU%E5%90%AF%E5%8A%A8RISC-V%E6%9E%B6%E6%9E%84OpenEuler%E5%B9%B6%E9%85%8D%E7%BD%AEOSC%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/07/23/QEMU%E5%90%AF%E5%8A%A8RISC-V%E6%9E%B6%E6%9E%84OpenEuler%E5%B9%B6%E9%85%8D%E7%BD%AEOSC%E7%8E%AF%E5%A2%83/</id>
    <published>2023-07-23T11:28:29.000Z</published>
    <updated>2023-07-23T11:29:42.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于Ubuntu 18.04，QEMU 8.0.2，OpenEuler 22.09</p></blockquote><h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><h2 id="安装基础编译工具"><a href="#安装基础编译工具" class="headerlink" title="安装基础编译工具"></a>安装基础编译工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential autoconf automake autotools-dev pkg-config bc curl \</span><br><span class="line">                 gawk git bison flex texinfo gperf libtool patchutils mingw-w64 libmpc-dev \</span><br><span class="line">                 libmpfr-dev libgmp-dev libexpat-dev libfdt-dev zlib1g-dev libglib2.0-dev \</span><br><span class="line">                 libpixman-1-dev libncurses5-dev libncursesw5-dev meson libvirglrenderer-dev libsdl2-dev  -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt install python3.8 python3-pip  -y</span><br><span class="line">sudo apt install -f</span><br><span class="line">pip3 install meson</span><br></pre></td></tr></table></figure><h2 id="下载QEMU"><a href="#下载QEMU" class="headerlink" title="下载QEMU"></a>下载QEMU</h2><p>建立文件夹用于编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir -p qemu-build</span><br></pre></td></tr></table></figure><p>建立文件夹用于安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir -p /home/user/program/riscv64-qemu</span><br></pre></td></tr></table></figure><p>可登录<a href="https://www.qemu.org/download/">官网</a>将版本号换成最新版本即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu-build &amp;&amp; wget  <span class="string">&quot;https://download.qemu.org/qemu-8.0.2.tar.xz&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf qemu-8.0.2.tar.xz --strip-components=1 </span><br></pre></td></tr></table></figure><h2 id="安装QEMU-1"><a href="#安装QEMU-1" class="headerlink" title="安装QEMU"></a>安装QEMU</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu-build &amp;&amp; ./configure --target-list=riscv32-softmmu,riscv32-linux-user,riscv64-linux-user,riscv64-softmmu \</span><br><span class="line">               --enable-kvm --enable-sdl \</span><br><span class="line">               --prefix=/home/user/program/riscv64-qemu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install -j $(nproc)</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export QEMU_HOME=/home/user/program/riscv64-qemu&#x27;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;export PATH=$QEMU_HOME/bin:$PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="下载-OpenEuler-RISC-V-系统镜像"><a href="#下载-OpenEuler-RISC-V-系统镜像" class="headerlink" title="下载 OpenEuler RISC-V 系统镜像"></a>下载 OpenEuler RISC-V 系统镜像</h1><p>建立目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir -p /home/user/openeuler</span><br></pre></td></tr></table></figure><blockquote><p>根据自己的用户名修改user</p></blockquote><p>下载<a href="https://repo.openeuler.org/openEuler-preview/RISC-V/openEuler-22.09-riscv64/QEMU/">OpenEuler 22.09版本</a>，下载目录下所有文件/home/user/openeuler。如需下载其他版本请进入其他目录选择下载即可。</p><blockquote><p>也可以根据自己的情况进入<a href="https://www.openeuler.org/zh/mirror/list/">镜像站列表</a>选择下载速度更快的镜像站下载</p></blockquote><blockquote><p>最新的23.03版本需要在<a href="https://mirror.iscas.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/preview/openEuler-23.03-V1-riscv64/">中科院镜像站</a>下载</p></blockquote><p>文件说明：</p><ul><li><code>fw_payload_oe_qemuvirt.elf</code>: 利用 openSBI 将 kernel-5.10 的 image 作为 payload 所制作的 QEMU 启动所需文件</li><li><code>openEuler-22.09-qemu-xfce.qcow2.tar.zst</code>: openEuler RISC-V QEMU GUI 镜像压缩包</li><li><code>preview_start_vm_xfce.sh</code>: GUI 虚拟机启动脚本</li><li><code>openeuler-22.09-qemu.qcow2.tar.zst</code>: openEuler RISC-V QEMU headless 镜像压缩包</li><li><code>preview_start_vm.sh</code>: headless 虚拟机启动脚本</li></ul><p>解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zstd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -I <span class="string">&#x27;zstdmt&#x27;</span> -xvf openEuler-22.09-riscv64-qemu.qcow2.tar.zst</span><br></pre></td></tr></table></figure><p>执行启动脚本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x preview_start_vm.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash preview_start_vm.sh</span><br></pre></td></tr></table></figure><h1 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h1><ul><li>用户名: <code>root</code></li><li>默认密码: <code>openEuler12#$</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">openEuler 22.09</span><br><span class="line">Kernel 5.10.0 on an riscv64</span><br><span class="line"></span><br><span class="line">4penEuler-riscv6</span><br><span class="line"> login: openEuler 22.09</span><br><span class="line">Kernel 5.10.0 on an riscv64</span><br><span class="line"></span><br><span class="line">openEuler-riscv64 login: root</span><br><span class="line">Password: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to 5.10.0</span><br><span class="line"></span><br><span class="line">System information as of time:   Mon Jul  3 07:52:19 PM CST 2023</span><br><span class="line"></span><br><span class="line">System load:   0.17</span><br><span class="line">Processes:   117</span><br><span class="line">Memory used:   .6%</span><br><span class="line">Swap used:   0.0%</span><br><span class="line">Usage On:   6%</span><br><span class="line">Users online:   1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># ls</span></span><br><span class="line">[root@openEuler-riscv64 ~]<span class="comment"># pwd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="远程登录系统"><a href="#远程登录系统" class="headerlink" title="远程登录系统"></a>远程登录系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 12055 root@localhost</span><br></pre></td></tr></table></figure><h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><blockquote><p>以下操作均在root用户下执行，如果切换了用户会有提示。因为系统初始状态没有普通用户，也没有sudo，所以需要使用root完成一些基础配置。</p></blockquote><h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><p>原密码太复杂，修改简单密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd root</span><br><span class="line"><span class="comment"># 输入两次密码</span></span><br></pre></td></tr></table></figure><h2 id="添加普通用户"><a href="#添加普通用户" class="headerlink" title="添加普通用户"></a>添加普通用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户 user</span></span><br><span class="line">useradd -s /bin/bash -d /home/user -m user</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd user</span><br><span class="line"><span class="comment"># 输入两次密码</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加管理员权限</span></span><br><span class="line">usermod -aG wheel user</span><br></pre></td></tr></table></figure><h2 id="修改时间"><a href="#修改时间" class="headerlink" title="修改时间"></a>修改时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;NTP=ntp.aliyun.com&quot;</span> &gt;&gt; /etc/systemd/timesyncd.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart systemd-timesyncd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看<code>timesyncd</code>运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status systemd-timesyncd.service</span><br></pre></td></tr></table></figure><p><code>date</code>命令可查看当前系统时间。验证是否配置成功。</p><p><strong>时间务必正确设置</strong>，错误的时间会影响诸如https的TLS认证等过程。</p><h2 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br><span class="line">nameserver 119.29.29.29</span><br></pre></td></tr></table></figure><h2 id="配置软件包源"><a href="#配置软件包源" class="headerlink" title="配置软件包源"></a>配置软件包源</h2><p>配置文件为 /etc/yum.repos.d/openEuler.repo 下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/openEuler.repo  /etc/yum.repos.d/openEuler.repo.bk &amp;&amp; sudo bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /etc/yum.repos.d/openEuler.repo</span></span><br><span class="line"><span class="string"># just for test</span></span><br><span class="line"><span class="string">[mainline]</span></span><br><span class="line"><span class="string">name=mainline</span></span><br><span class="line"><span class="string">baseurl=https://mirror.iscas.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/preview/openEuler-22.09-V1-riscv64/repo/22.09/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string"># just for test</span></span><br><span class="line"><span class="string">[epol]</span></span><br><span class="line"><span class="string">name=epol</span></span><br><span class="line"><span class="string">baseurl=https://mirror.iscas.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/preview/openEuler-22.09-V1-riscv64/repo/22.09/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">[extra]</span></span><br><span class="line"><span class="string">name=extra</span></span><br><span class="line"><span class="string">baseurl=https://mirror.iscas.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/preview/openEuler-22.09-V1-riscv64/repo/extra/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，因为OpenEuler还在快速发展中，镜像地址可能会发生变化，所以需确认地址是否能够正常访问，如无法访问会导致404错误</p></blockquote><blockquote><p>[repoid]中的repoid为软件仓库（repository）的ID号，所有.repo配置文件中的各repoid不能重复，必须唯一。示例中repoid设置为base。<br>name为软件仓库描述的字符串。<br>baseurl为软件仓库的地址。<br>enabled为是否启用该软件源仓库，可选值为1和0。默认值为1，表示启用该软件源仓库。<br>gpgcheck可设置为1或0，1表示进行gpg（GNU Private Guard）校验，0表示不进行gpg校验，gpgcheck可以确定rpm包的来源是有效和安全的。<br>gpgkey为验证签名用的公钥。</p></blockquote><h2 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h2><ol><li>在宿主机上安装 <code>qemu-img</code> 工具:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install qemu-utils</span><br></pre></td></tr></table></figure><ol start="2"><li>在 openEuler RISC-V 虚拟机上安装 <code>growpart</code> 工具:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install cloud-utils-growpart</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭QEMU虚拟机</li><li>把 qcow2 文件的容量加200GB：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-img resize *.qcow2 +200G</span><br><span class="line">Image resized.</span><br><span class="line">$ qemu-img info *.qcow2</span><br><span class="line">image: openEuler-preview.riscv64.qcow2</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 220 GiB </span><br><span class="line">disk size: 9.58 GiB</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 1.1</span><br><span class="line">    compression <span class="built_in">type</span>: zlib</span><br><span class="line">    lazy refcounts: <span class="literal">false</span></span><br><span class="line">    refcount bits: 16</span><br><span class="line">    corrupt: <span class="literal">false</span></span><br><span class="line">    extended l2: <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="5"><li>QEMU 启动 openEuler RISC-V。</li></ol><p>启动以后，我们先看看分区情况：可以看到根目录对应的分区只使用了 10G。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-RISCV-rare ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    254:0    0  220G  0 disk</span><br><span class="line">└─vda1 254:1    0   10G  0 part /</span><br></pre></td></tr></table></figure><ol><li>扩展分区 <code>vda1</code>，执行 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">growpart /dev/vda1</span><br></pre></td></tr></table></figure><p>执行 <code>lsblk</code> 可以看到 / 所在的 <code>vda1</code> 分区已经扩展到了预期大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@openEuler-RISCV-rare ~]<span class="comment"># growpart /dev/vda 1</span></span><br><span class="line">CHANGED: partition=1 start=2048 old: size=20969472 end=20971520 new: size=419428319 end=419430367</span><br><span class="line">[root@openEuler-RISCV-rare ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    254:0    0  220G  0 disk</span><br><span class="line">└─vda1 254:1    0  220G  0 part /</span><br></pre></td></tr></table></figure><ol><li>扩展文件系统：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resize2fs /dev/vda1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h1><h2 id="network-backend-‘user‘-is-not-compiled-into-this-binary"><a href="#network-backend-‘user‘-is-not-compiled-into-this-binary" class="headerlink" title="network backend ‘user‘ is not compiled into this binary"></a>network backend ‘user‘ is not compiled into this binary</h2><p>git clone <a href="https://gitlab.freedesktop.org/slirp/libslirp.git">https://gitlab.freedesktop.org/slirp/libslirp.git</a></p><p><a href="http://security.ubuntu.com/ubuntu/pool/main/libs/libslirp/libslirp-dev_4.1.0-2ubuntu2.2_amd64.deb">http://security.ubuntu.com/ubuntu/pool/main/libs/libslirp/libslirp-dev_4.1.0-2ubuntu2.2_amd64.deb</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libslirp-dev</span><br></pre></td></tr></table></figure><p>重新编译QEMU：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu-build &amp;&amp; rm -rf build</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu-build &amp;&amp; ./configure --target-list=riscv32-softmmu,riscv32-linux-user,riscv64-linux-user,riscv64-softmmu \</span><br><span class="line">               --enable-kvm --enable-sdl --enable-slirp\</span><br><span class="line">               --prefix=/home/user/program/riscv64-qemu</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install -j $(nproc)</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/openeuler-mirror/RISC-V/blob/master/doc/tutorials/vm-qemu-oErv.md">RISC-V/doc/tutorials/vm-qemu-oErv.md at master · openeuler-mirror/RISC-V · GitHub</a></p><p><a href="https://www.openeuler.org/whitepaper/openEuler-whitepaper-2209.pdf">openEuler 22.09技术白皮书</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基于Ubuntu 18.04，QEMU 8.0.2，OpenEuler 22.09&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装QEMU&quot;&gt;&lt;a href=&quot;#安装QEMU&quot; class=&quot;headerlink&quot; title=&quot;安装QE</summary>
      
    
    
    
    
    <category term="QEMU" scheme="http://example.com/tags/QEMU/"/>
    
    <category term="RISC-V" scheme="http://example.com/tags/RISC-V/"/>
    
    <category term="OpenEuler" scheme="http://example.com/tags/OpenEuler/"/>
    
  </entry>
  
  <entry>
    <title>SSH 登录 OpenStack 实例</title>
    <link href="http://example.com/2023/06/28/SSH-%E7%99%BB%E5%BD%95-OpenStack-%E5%AE%9E%E4%BE%8B/"/>
    <id>http://example.com/2023/06/28/SSH-%E7%99%BB%E5%BD%95-OpenStack-%E5%AE%9E%E4%BE%8B/</id>
    <published>2023-06-28T14:20:05.000Z</published>
    <updated>2023-06-28T14:21:29.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>添加安全组规则，允许 Ping 和 SSH 访问虚拟机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack security group rule create --proto icmp default</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@allone:~<span class="comment"># openstack security group rule create --proto icmp default</span></span><br><span class="line">+-------------------+---------------------------+</span><br><span class="line">| Field             | Value                                                                                                                                                   |</span><br><span class="line">+-------------------+-------------------------+</span><br><span class="line">| created_at        | 2023-06-28T06:26:10Z                                                                                                                                    |</span><br><span class="line">| description       |                                                                                                                                                         |</span><br><span class="line">| direction         | ingress                                                                                                                                                 |</span><br><span class="line">| ether_type        | IPv4                                                                                                                                                    |</span><br><span class="line">| id                | fe9adfc3-dc42-4680-8ecd-ed5a667e1215                                                                                                                    |</span><br><span class="line">| location          | cloud=<span class="string">&#x27;&#x27;</span>, project.domain_id=, project.domain_name=<span class="string">&#x27;Default&#x27;</span>, project.id=<span class="string">&#x27;6396365541a74b6b8ea8812d1af05e70&#x27;</span>, project.name=<span class="string">&#x27;admin&#x27;</span>, region_name=<span class="string">&#x27;&#x27;</span>, zone= |</span><br><span class="line">| name              | None                                                                                                                                                    |</span><br><span class="line">| port_range_max    | None                                                                                                                                                    |</span><br><span class="line">| port_range_min    | None                                                                                                                                                    |</span><br><span class="line">| project_id        | 6396365541a74b6b8ea8812d1af05e70                                                                                                                        |</span><br><span class="line">| protocol          | icmp                                                                                                                                                    |</span><br><span class="line">| remote_group_id   | None                                                                                                                                                    |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/0                                                                                                                                               |</span><br><span class="line">| revision_number   | 0                                                                                                                                                       |</span><br><span class="line">| security_group_id | f10a3927-5e76-47b4-8691-4169348845ae                                                                                                                    |</span><br><span class="line">| tags              | []                                                                                                                                                      |</span><br><span class="line">| updated_at        | 2023-06-28T06:26:10Z                                                                                                                                    |</span><br><span class="line">+-------------------+--------------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack security group rule create --proto tcp --dst-port 22 default</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@allone:~<span class="comment"># openstack security group rule  create --proto tcp --dst-port 22 default</span></span><br><span class="line">+-------------------+--------------------------------------+</span><br><span class="line">| Field             | Value                                                                                                                                                   |</span><br><span class="line">+-------------------+--------------------------------------------+</span><br><span class="line">| created_at        | 2023-06-28T06:26:15Z                                                                                                                                    |</span><br><span class="line">| description       |                                                                                                                                                         |</span><br><span class="line">| direction         | ingress                                                                                                                                                 |</span><br><span class="line">| ether_type        | IPv4                                                                                                                                                    |</span><br><span class="line">| id                | af699cf9-5fc0-45e2-a009-0bb7828e2d1a                                                                                                                    |</span><br><span class="line">| location          | cloud=<span class="string">&#x27;&#x27;</span>, project.domain_id=, project.domain_name=<span class="string">&#x27;Default&#x27;</span>, project.id=<span class="string">&#x27;6396365541a74b6b8ea8812d1af05e70&#x27;</span>, project.name=<span class="string">&#x27;admin&#x27;</span>, region_name=<span class="string">&#x27;&#x27;</span>, zone= |</span><br><span class="line">| name              | None                                                                                                                                                    |</span><br><span class="line">| port_range_max    | 22                                                                                                                                                      |</span><br><span class="line">| port_range_min    | 22                                                                                                                                                      |</span><br><span class="line">| project_id        | 6396365541a74b6b8ea8812d1af05e70                                                                                                                        |</span><br><span class="line">| protocol          | tcp                                                                                                                                                     |</span><br><span class="line">| remote_group_id   | None                                                                                                                                                    |</span><br><span class="line">| remote_ip_prefix  | 0.0.0.0/0                                                                                                                                               |</span><br><span class="line">| revision_number   | 0                                                                                                                                                       |</span><br><span class="line">| security_group_id | f10a3927-5e76-47b4-8691-4169348845ae                                                                                                                    |</span><br><span class="line">| tags              | []                                                                                                                                                      |</span><br><span class="line">| updated_at        | 2023-06-28T06:26:15Z                                                                                                                                    |</span><br><span class="line">+-------------------+-----------------+</span><br></pre></td></tr></table></figure><h1 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h1><h2 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -q -N “”</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>-q</code> 选项表示静默模式，即在生成密钥对的过程中不会输出任何提示信息或警告。</li><li><code>-N</code> 选项后面可以跟一个密码作为参数。该密码将用于保护生成的私钥文件。如果不指定 <code>-N</code> 参数，则私钥文件将不受密码保护。</li></ul></blockquote><p>该命令会在<code>~/.ssh/</code>目录中自动生成一对公私钥。默认私钥名称：id_rsa，默认公钥名称：id_rsa.pub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey</span><br></pre></td></tr></table></figure><p>向 OpenStack 添加公钥，用于创建实例时选择：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@allone:~<span class="comment"># openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey</span></span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| Field       | Value                                           |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br><span class="line">| fingerprint | 11:36:75:e0:c3:98:4c:97:90:30:f5:69:e1:17:a9:4b |</span><br><span class="line">| name        | mykey                                           |</span><br><span class="line">| user_id     | 9027da91a2134825a421d78db11011d0                |</span><br><span class="line">+-------------+-------------------------------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack keypair list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@allone:~<span class="comment"># openstack keypair list</span></span><br><span class="line">+---------------------+-------------------------------------------------+</span><br><span class="line">| Name                | Fingerprint                                     |</span><br><span class="line">+---------------------+-------------------------------------------------+</span><br><span class="line">| mykey               | 11:36:75:e0:c3:98:4c:97:90:30:f5:69:e1:17:a9:4b |</span><br><span class="line">| ubuntu cloud server | 67:b4:8a:64:83:4e:47:d0:7c:87:46:34:3b:03:e6:17 |</span><br><span class="line">+---------------------+-------------------------------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ubuntu@10.0.2.111</span><br></pre></td></tr></table></figure><p>其中，<code>ubuntun</code>是实例的用户名，<code>10.0.2.111</code>是实例的 IP 地址。</p><h1 id="WEB-界面方式"><a href="#WEB-界面方式" class="headerlink" title="WEB 界面方式"></a>WEB 界面方式</h1><h2 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h2><p>Project-Key Pairs-Create Keypairs</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-53-21-d58cbf697d71c5fff58fda7a8145ceae-20230628175315-733a20.png"></p><p>为密钥对起个名字：sshkey，并选择一个类型：SSH Key</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-53-37-56223c56c675b84ea1d375399db38175-20230628175333-06df78.png"></p><p>点击创建后会弹出下载私钥的窗口，这时候需要将私钥下载到本地。并将他移动到 ssh 目录下方便管理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换root用户，因为我们一直都是用root用户操作的OpenStack</span></span><br><span class="line">sudo su</span><br><span class="line">mv sshkey.pem ~/.ssh</span><br></pre></td></tr></table></figure><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-53-54-d452e4565933506f89744f60f01d7956-20230628175349-ffaa20.png"></p><h2 id="使用公钥创建实例"><a href="#使用公钥创建实例" class="headerlink" title="使用公钥创建实例"></a>使用公钥创建实例</h2><p>Project-Instances-Launch Instance</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-54-08-24889d77a26052dab99f758c54ce9483-20230628175403-9acef3.png"></p><p>在 Key Pair 中选择刚刚创建的 sshkey。这里实际就是将创建的密钥对中的公钥放到了我们的实例中，这样我们就可以拿着本地的私钥去访问实例。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-54-19-5ac37e246ffbd6007356092eac047d6b-20230628175415-7f105e.png"></p><h2 id="登录实例"><a href="#登录实例" class="headerlink" title="登录实例"></a>登录实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/sshkey.pem  ubuntun@10.0.2.111</span><br></pre></td></tr></table></figure><p>其中<code>~/.ssh/sshkey.pem</code>是我们下载的私钥文件，<code>ubuntun</code>是实例的用户名，<code>10.0.2.111</code>是实例的 IP 地址。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础配置&quot;&gt;&lt;a href=&quot;#基础配置&quot; class=&quot;headerlink&quot; title=&quot;基础配置&quot;&gt;&lt;/a&gt;基础配置&lt;/h1&gt;&lt;p&gt;添加安全组规则，允许 Ping 和 SSH 访问虚拟机：&lt;/p&gt;
&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    <category term="OpenStack" scheme="http://example.com/categories/OpenStack/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="OpenStack" scheme="http://example.com/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox Ubuntu 无法联网</title>
    <link href="http://example.com/2023/06/26/VirtualBox-Ubuntu%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/"/>
    <id>http://example.com/2023/06/26/VirtualBox-Ubuntu%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/</id>
    <published>2023-06-26T14:38:02.000Z</published>
    <updated>2023-06-26T14:39:54.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>VirtualBox Ubuntu 无法联网，重启后可以联网但是几分钟后断开网络。笔者的情况是因为 NetworkManager 自动修改了网络配置导致无法联网，具体现象是开机后网卡信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user@allone:~$ ifconfig</span><br><span class="line">brq64ff9b38-fa: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether ce:29:de:12:35:06  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</span><br><span class="line">        inet6 fe80::2e8f:2be6:3752:dec4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:18:31:21  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 947  bytes 584483 (584.4 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 800  bytes 116611 (116.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时网络可以正常使用，经过一两分钟后网络信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">user@allone:~$ ifconfig</span><br><span class="line">brq64ff9b38-fa: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255</span><br><span class="line">        ether ce:29:de:12:35:06  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp0s3: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::2e8f:2be6:3752:dec4  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 08:00:27:18:31:21  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 947  bytes 584483 (584.4 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 800  bytes 116611 (116.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是默认虚拟网卡的 IP 地址丢失，而不知名网卡 brq64ff9b38-fa 却拥有了 IP，此时网络不可用。如果有类似情况，可以使用以下方式尝试解决，如果是其他问题。请酌情参考。</p><ol><li>关闭 NetworkManager</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop NetworkManager</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> NetworkManager</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl mask NetworkManager</span><br></pre></td></tr></table></figure><ol start="2"><li>开启 systemd-networkd</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl unmask systemd-networkd.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> systemd-networkd.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo systemctl start systemd-networkd.service</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 Netplan</li></ol><p>编辑/etc/netplan/01-network-manager-all.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    version: 2</span><br><span class="line">    renderer: networkd</span><br><span class="line">    ethernets:</span><br><span class="line">       enp0s3:</span><br><span class="line">           dhcp4: yes</span><br><span class="line">           dhcp6: yes</span><br><span class="line">           addresses: [10.0.2.15/23]</span><br><span class="line">           nameservers:</span><br><span class="line">               addresses: [8.8.8.8, 8.8.4.4]</span><br><span class="line">           optional: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>其中 enp0s3 为网卡名称，addresses 为网卡对应的 IP，均可以通过 ifconfig 查询。</p><p>以下是一些背景知识，以及问题回溯有兴趣可以继续阅读。</p><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><h2 id="NetworkManager-与-systemd-networked"><a href="#NetworkManager-与-systemd-networked" class="headerlink" title="NetworkManager 与 systemd-networked"></a>NetworkManager 与 systemd-networked</h2><p>NetworkManager 是一项后端服务，用于控制 Ubuntu 操作系统上的网络接口。NetworkManager 的替代方法是 systemd-networked，这两者只能使用一个。在 Ubuntu 桌面上，NetworkManager 是通过图形用户界面管理网络界面的默认服务。因此，如果要通过 GUI 配置 IP 地址，则应启用 NetworkManager。如果用的是无桌面的 Server 版，就可以使用 systemd-networked 来管理网络。</p><p>这两种方式都可以通过配置 netplan，即/etc/netplan/01-network-manager-all.yaml 来管理网络，但是在 renderer 属性中配置有所不同，使用 NetworkManager 时配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    version: 2</span><br><span class="line">    renderer: NetworkManager</span><br></pre></td></tr></table></figure><p>而使用 systemd-networked 时，配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">    version: 2</span><br><span class="line">    renderer: networkd</span><br></pre></td></tr></table></figure><p>有时无法联网可能是因为配置与实际使用的网络管理方式不匹配导致的。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h1&gt;&lt;p&gt;VirtualBox Ubuntu 无法联网，重启后可以联网但是几分钟后断开网络。笔者的情况是因为 NetworkManag</summary>
      
    
    
    
    <category term="Bug 踩坑记录" scheme="http://example.com/categories/Bug-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="Bug" scheme="http://example.com/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>Virtual Box 的不同虚拟机网络模式</title>
    <link href="http://example.com/2023/06/17/Virtual-Box%E7%9A%84%E4%B8%8D%E5%90%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/06/17/Virtual-Box%E7%9A%84%E4%B8%8D%E5%90%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-17T08:48:02.000Z</published>
    <updated>2023-06-17T09:03:41.765Z</updated>
    
    <content type="html"><![CDATA[<ul><li>💻 NAT 网络模式<ul><li>NAT 网络以路由器的 NAT 功能为原理，允许虚拟机通过共享主机的 IP 地址访问互联网，但虚拟机之间不能直接通信。通过端口转发可以实现虚拟机之间的连接。</li></ul></li><li>🔗 桥接网络模式<ul><li>桥接网络模式通过虚拟交换机连接虚拟机和主机，使得虚拟机可以通过局域网访问互联网，并允许虚拟机之间直接通信。</li></ul></li><li>🔒 内部网络模式<ul><li>内部网络模式使得虚拟机可以创建一个完全隔离的网络，虚拟机之间可以直接通信，但无法访问互联网或外部网络。</li></ul></li><li>🏠 仅主机网络模式<ul><li>仅主机网络模式允许虚拟机之间可以通信，并且与主机之间也可以通信，但无法访问互联网或外部网络。</li></ul></li></ul><table><thead><tr><th></th><th>虚拟机 ↔ 虚拟机</th><th>虚拟机 → 宿主机</th><th>宿主机 → 虚拟机</th><th>虚拟机 → 互联网</th><th>互联网 → 虚拟机</th></tr></thead><tbody><tr><td>网络地址转换 NAT</td><td>×</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>NAT 网络</td><td>√</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>Bridged Adapter 桥接网卡</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;💻 NAT 网络模式&lt;ul&gt;
&lt;li&gt;NAT 网络以路由器的 NAT 功能为原理，允许虚拟机通过共享主机的 IP 地址访问互联网，但虚拟机之间不能直接通信。通过端口转发可以实现虚拟机之间的连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🔗 桥接网络模式&lt;u</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 数据链路层</title>
    <link href="http://example.com/2023/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://example.com/2023/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2023-06-11T02:26:10.000Z</published>
    <updated>2023-06-11T02:31:56.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p><strong>结点</strong>：主机，路由器<br><strong>链路</strong>：网络中两个结点之间的<code>物理通道</code>，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。<br><strong>数据链路</strong>：网络中两个结点之间的<code>逻辑通道</code>，把实现控制数据传输<code>协议</code>的硬件和软件加到链路上就构成数据链路。<br><strong>帧</strong>：链路层的协议数据单元，封装网络层数据报。</p><p><code>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</code></p><h3 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h3><h4 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h4><p>数据链路层在物理层提供服务的基础上<code>向网络层提供服务</code>，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是<code>加强物理层传输原始比特流的功能</code>，将物理层提供的可能出错的物理连 接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。</p><ul><li>为网络层提供服务<ul><li>无确认无连接服务</li><li>有确认无连接服务</li><li>有确认面向连接服务</li></ul></li><li>链路管理<ul><li>连接的建立，维持，释放</li></ul></li><li>组帧</li><li>差错控制</li></ul><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>封装成帧就是在一段数据的前后部分<code>添加首部和尾部</code>，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的<code>标记(帧定界符)</code>，从收到的比特流中识别帧的<code>开始</code>和<code>结束</code>。</p><p>首部和尾部包含许多的控制信息，他们的一个重要作用：<code>帧定界</code>（确定帧的界限）。</p><p><strong>帧同步</strong>：接收方应当能从接收到的二进制比特流中<code>区分出帧的起始和终止</code>。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/af63ec599debe847b08e6d41fe404e9e.png"></p><p>透明传输</p><h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><p>传输中的差错都是由噪声引起的。</p><ul><li>全局性，由于线路本身电气特性所产生的<code>随机噪声</code></li><li>局部性，由于外界短暂的原因造成的<code>冲击噪声</code></li></ul><p>差错又分为<code>位错</code>和<code>帧错</code></p><ul><li>位错，比特位出错，1 变 0,0 变 1</li><li>帧错，包括丢失，重复，失序</li></ul><p><code>发现差错的帧后就将错误值丢弃，如果没有差错控制，将会浪费大量资源，因为传输过程中一直传输了错误的信息。</code></p><p>差错控制</p><ul><li>检错编码<ul><li>奇偶校验码</li><li>循环冗余 CRC</li></ul></li><li>纠错编码<ul><li>海明码</li></ul></li></ul><p>这里提到的编码和物理层的编码与调制不同，物理层的编码针对单个比特，解决传输同步问题。这里的编码针对的是一组比特，通过冗余码的技术检测传输中是否出错。</p><h5 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h5><p>奇校验码：在信息元前加上 1 位后使得 1 的个数为奇数个<br>偶检验码：在信息元前加上 1 位后使得 1 的个数为偶数个</p><p>该检测方式只能检测出奇数个的位错，检错能力为 50%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果一个字符S的ASCI编码从低到高依次为1100101，采用奇校验，在下述收到的传输后字符中，哪种错误不能检测？</span><br><span class="line">A.11000011B.11001010 C.11001100 </span><br><span class="line">D.11010011</span><br><span class="line"></span><br><span class="line">答：因为采用奇校验，所以在首位加上一个1使得所有1个数为奇数变成11100101，ABC选项中1的个数都是偶数个，明显发生了变化，所以能检测出错误，但是D选项的1也是奇数个，将无法判断是否出现差错。</span><br></pre></td></tr></table></figure><h5 id="CRC-循环冗余码"><a href="#CRC-循环冗余码" class="headerlink" title="CRC 循环冗余码"></a>CRC 循环冗余码</h5><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/41f5d4aa394ce6d74c8b134c9768ac22.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/7c99a28025636d12adcdf50e5d06e1ce.png"></p><h3 id="链路层的两种信道"><a href="#链路层的两种信道" class="headerlink" title="链路层的两种信道"></a>链路层的两种信道</h3><h3 id="局域网、广域网"><a href="#局域网、广域网" class="headerlink" title="局域网、广域网"></a>局域网、广域网</h3><h3 id="数据链路层的设备"><a href="#数据链路层的设备" class="headerlink" title="数据链路层的设备"></a>数据链路层的设备</h3><h2 id="流量控制与可靠传输"><a href="#流量控制与可靠传输" class="headerlink" title="流量控制与可靠传输"></a>流量控制与可靠传输</h2><h3 id="单帧滑动窗口与停止等待协议"><a href="#单帧滑动窗口与停止等待协议" class="headerlink" title="单帧滑动窗口与停止等待协议"></a>单帧滑动窗口与停止等待协议</h3><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/5d99df99892aa63951510153134014b1.png"><br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/fa9be9766df59bc680fd8441e2f21224.png"><br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/a2bc7aeff36d97f1670360ab1beed0a9.png"></p><h3 id="SR-选择重传协议"><a href="#SR-选择重传协议" class="headerlink" title="SR 选择重传协议"></a>SR 选择重传协议</h3><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/7aabcc8d17c084dbc9d8082955e37869.png"><br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/7c6ba4ec2494cf60ed6293173d595530.png"></p><h4 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h4><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/11/0e9683cca18816515bfe2e5df3421954.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h2&gt;&lt;h5 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 22.04 系统安装水星 wifi 驱动 Mercury MW310UH</title>
    <link href="http://example.com/2023/06/11/ubuntu-22-04-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%B0%B4%E6%98%9F-wifi-%E9%A9%B1%E5%8A%A8Mercury-MW310UH/"/>
    <id>http://example.com/2023/06/11/ubuntu-22-04-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%B0%B4%E6%98%9F-wifi-%E9%A9%B1%E5%8A%A8Mercury-MW310UH/</id>
    <published>2023-06-11T02:00:02.000Z</published>
    <updated>2023-06-11T02:06:56.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="确认网卡信息"><a href="#确认网卡信息" class="headerlink" title="确认网卡信息"></a>确认网卡信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure><p>得到 USB 设备信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bus 001 Device 013: ID 0bda:a192 Realtek Semiconductor Corp. Disk</span><br></pre></td></tr></table></figure><h1 id="安装网卡驱动"><a href="#安装网卡驱动" class="headerlink" title="安装网卡驱动"></a>安装网卡驱动</h1><p>根据设备 ID，用关键词网上搜素一下相关驱动，得到有这个驱动可用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential git dkms</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/BrightXu/rtl8192fu.git</span><br><span class="line"><span class="built_in">cd</span> rtl8192fu</span><br><span class="line">make -j$(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">sudo modprobe 8192fu</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usb-devices</span><br></pre></td></tr></table></figure><p>如果有 Driver=rtl8192fu 字段说明安装成功。如果桌面右上角无线连接图标可用，说明可以使用无线网络了。如果不可用继续往下看。</p><h1 id="修改设备模式"><a href="#修改设备模式" class="headerlink" title="修改设备模式"></a>修改设备模式</h1><p>如果使用<code>lsusb</code>命令查看设备，发现设备末尾依然是 Disk 模式，说明这个设备是磁盘设备，还不能当做网络适配器使用，需要修改其模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y usb-modeswitch</span><br><span class="line">sudo vim /lib/udev/rules.d/40-usb_modeswitch.rules</span><br></pre></td></tr></table></figure><p>在最后 LABEL 之前加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Realtek 8192F Wifi AC USB</span></span><br><span class="line">ATTR&#123;idVendor&#125;==<span class="string">&quot;0bda&quot;</span>, ATTR&#123;idProduct&#125;==<span class="string">&quot;a192&quot;</span>, RUN+=<span class="string">&quot;/usr/sbin/usb_modeswitch -K -v 0bda -p a192&quot;</span></span><br><span class="line">LABEL=<span class="string">&quot;modeswitch_rules_end&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usb_modeswitch -KW -v 0bda -p a192</span><br></pre></td></tr></table></figure><h1 id="关闭安全启动"><a href="#关闭安全启动" class="headerlink" title="关闭安全启动"></a>关闭安全启动</h1><p>安全启动模式下无法使用第三方的驱动，所以需要在开机时进入 BIOS 将安全启动关闭，每个主板不一样，自行搜索。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/KeyBordkiller/article/details/124498463">linux 系统下 usb 网卡的驱动安装_linux usb 网卡-CSDN 博客</a></p><p><a href="https://www.guohuawei.com/archives/install-realtek-wifi-5ghz-driver-for-ubuntu-2204.html">为 ubuntu 22.04 系统安装水星 realtek 5g wifi 驱动 - 郭华伟的博客</a></p><p><a href="https://blog.csdn.net/weixin_45392081/article/details/125930289">ubuntu 18.04 usb 无线网卡无法使用–ID 0bda:a192 Realtek Semiconductor Corp._放羊 Wa 的博客-CSDN 博客</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;确认网卡信息&quot;&gt;&lt;a href=&quot;#确认网卡信息&quot; class=&quot;headerlink&quot; title=&quot;确认网卡信息&quot;&gt;&lt;/a&gt;确认网卡信息&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云计算基础技术汇总</title>
    <link href="http://example.com/2023/06/09/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2023/06/09/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB/</id>
    <published>2023-06-09T13:42:59.000Z</published>
    <updated>2023-06-09T13:43:13.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云计算服务类型"><a href="#云计算服务类型" class="headerlink" title="云计算服务类型"></a>云计算服务类型</h1><p>传统架构=&gt;Iaas=&gt;Paas=&gt;Saas</p><p>自己烧饭=&gt; 叮咚买菜=&gt; 美团外卖=&gt; 餐厅吃饭</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-36-45-b25eafa700db3dce390dab2aeb3af4f9-20230531093640-f17dbe.png"></p><h1 id="云计算部署形式以及应用"><a href="#云计算部署形式以及应用" class="headerlink" title="云计算部署形式以及应用"></a>云计算部署形式以及应用</h1><table><thead><tr><th>类型</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>私有云</td><td>利用已有设备自我构建，云端资源只给内部人员使用。</td><td>安全性高</td><td>维护成本高</td></tr><tr><td>社区云、行业云</td><td>为特定行业构建共享基础设施的云。</td><td>有一套用户体系</td><td>维护成本高</td></tr><tr><td>公有云</td><td>构建大型基础设施云出租给公众。</td><td>用户来说成本低，服务多</td><td>安全性低</td></tr><tr><td>混合云</td><td>两种或者两种以上的云组成的云服务</td><td>敏捷，灵活，降低成本</td><td>兼容性问题</td></tr></tbody></table><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>存储云、医疗云、教育云、企业云、金融云、游戏云、桌面云</p><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/10-28-09-8bfe3f3fcd50903c6f72132d36c19f3e-20230531102804-d53750.png"></p><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><p>将数据存储在不同的物理设备中。这种模式不仅摆脱了硬件设备的限制，同时<strong>扩展性更好</strong>，能够快速响应用户需求的变化（整合存储资源提供动态可伸缩资源池的分布式存储技术)</p><h2 id="数据中心联网"><a href="#数据中心联网" class="headerlink" title="数据中心联网"></a>数据中心联网</h2><p>虚拟机之间需要实时同步大量的数据，产生大量东西流量。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/10-38-24-9e7878e87965a767076d4071dd0e354f-20230531103820-7087aa.png"></p><h2 id="并行编程"><a href="#并行编程" class="headerlink" title="并行编程"></a>并行编程</h2><p>在并行编程模式下，并发处理、容错、数据分布、负载均衡等细节都被抽象到一个函数库中，通过统一接口，用户大尺度的计算任务被自动并发和分布执行，即将一个任务自动分成多个子任务，并行地处理海量数据。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/16-17-02-45f21028b6e199dccd616053e8e43db8-20230602161656-9db753.png"></p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>云计算平台体系结构由用户界面、服务目录、管理系统、部署工具、监控和服务器集群组成。</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>对云资源进行自动化部署指的是基于脚本调节的基础上实现不同厂商对于设备工具的自动配置，用以减少人机交互比例、提高应变效率，避免超负荷人工操作等现象的发生，最终推进智能部署进程。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/08-46-31-bc2856698d6f9b760f7cad0b1bff7ef1-20230605084626-c49970.png"></p><h1 id="云服务提供商"><a href="#云服务提供商" class="headerlink" title="云服务提供商"></a>云服务提供商</h1><p>亚马逊云、腾讯云、阿里云、百度云、华为云</p><p>技术架构：开源（Xen,KVM），Vmware，微软 hyper-v，阿里飞天 Apsara</p><p>开源云管理平台：OpenStack</p><h1 id="虚拟化简介"><a href="#虚拟化简介" class="headerlink" title="虚拟化简介"></a>虚拟化简介</h1><p>虚拟化：一种计算机资源管理技术，将各种 T 实体资源抽象、转换成另一种形式的技术都是虚拟化。<br>作用：通过该技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而<strong>显著提高计算机的工作效率</strong>。</p><p>从行业数据互相关联的角度来说，云计算是极度依赖虚拟化的。但虚拟化并非云计算，云计算也并非虚拟化。<strong>虚拟化只是云计算的核心技术，但并非云计算的核心关注点</strong>。</p><p>云计算是一种服务。虚拟化是云计算的技术基础。</p><h2 id="虚拟化相关的几个概念"><a href="#虚拟化相关的几个概念" class="headerlink" title="虚拟化相关的几个概念"></a>虚拟化相关的几个概念</h2><p>Guest OS:运行在虚拟机之上的 OS<br>Guest Machine:虚拟出来的虚拟机<br>VMM:虚拟机监控器，即虚拟化层 (Virtual Machine Monitor,VMM)<br>Host OS:运行在物理机之上的 OS<br>Host Machine:物理机</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/12-08-35-2a578c6b5ecfe26034e87a65aafd21da-20230531120830-e26a24.png"></p><h2 id="虚拟化类型"><a href="#虚拟化类型" class="headerlink" title="虚拟化类型"></a>虚拟化类型</h2><table><thead><tr><th>虚拟化类型</th><th>描述</th><th>特点</th><th>案例</th></tr></thead><tbody><tr><td>寄居虚拟化（Type2）</td><td>在主机（宿主）操作系统上安装和运行虚拟化程序</td><td>- 简单、易于实现。<br />- 安装和运行应用程序依赖于主机操作系统对设备的支持。<br />- 有两层 OS，管理开销较大，性能损耗大。<br />- 虚拟机对各种物理设备 (cpu、内存、硬盘等) 的调用，都通过虚拟化层和宿主机的 OS 一起协调才能完成。</td><td>- Vmware<br />- VirturalBox<br /></td></tr><tr><td>裸金属虚拟化 (Type1)</td><td>直接将 VMM 安装在硬件设备上，VMM 在这种模式下又叫做 Hypervisor，虚拟机有指令要执行时，Hypervisors 会接管该指令，模拟相应的操作。</td><td>- 不依赖于操作系统。<br />- 支持多种操作系统，多种应用。<br />- 依赖虚拟层内核和服务器控制台进行管理。<br />- 需要对虚拟层的内核进行开发（难度大）。</td><td>- VMware ESX<br />- Xen<br />- 华为 FusionSphere<br /></td></tr><tr><td>混合虚拟化</td><td>在一个现有的正常操作系统下<strong>安装一个内核模块</strong>，内核拥有虚拟化能力。(相当于寄居与裸金属的混合)</td><td>- 相对于寄居虚拟化架构，性能高。<br />- 相对于裸金属虚拟化架构，不需要开发内核。<br />- 可支持多种操作系统。<br />- 需底层硬件支持虚拟化扩展功能。</td><td>- KVM</td></tr></tbody></table><p>寄居虚拟化（Type2）</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-24-43-35c85e077a5dc39f5f17e5a2ba879e16-20230602142439-ca0fee.png"></p><p>裸金属虚拟化 (Type1)</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-24-29-4e00e51ef3d07ece5d29fa6a297b2f5b-20230602142424-f05f39.png"></p><p>混合虚拟化</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-24-07-e0079492f1d08c44e5c5bf88944f6e42-20230602142402-80ad49.png"></p><h2 id="虚拟化层架构"><a href="#虚拟化层架构" class="headerlink" title="虚拟化层架构"></a>虚拟化层架构</h2><table><thead><tr><th>架构</th><th>描述</th><th>特点</th><th>典型</th></tr></thead><tbody><tr><td>全虚拟化</td><td>即所抽象的 VM 具有完全的物理特性，虚拟化层负责捕获 CPU 指令，为指令访问硬件充当媒介。</td><td>- OS 无需修改。<br />- 速度和功能都非常不错，使用非常简单。<br />- 移植性好。</td><td>- VMware<br />- KVM<br />- Virtualbox<br />- Virtual PC<br /></td></tr><tr><td>半虚拟化</td><td>起初是为了解决全虚拟化效率不高的困难，它需要修改 OS，工作效率相对全虚拟化要高很多。Hypervisor 直接安装在物理机上，多个虚拟机在 Hypervisor 上运行。Hypervisor 实现方式一般是一个特殊定制的 Linux 系统。</td><td>- 架构更精简。<br />- 在整体速度上有一定的优势。<br />- 需要对 OS 进行修改，在用户体验方面比较麻烦。</td><td>- Xen<br />- VMWare ESXi<br />- 微软 Hyper-V<br /></td></tr><tr><td>硬件辅助虚拟化</td><td>硬件辅助虚拟化是随着虚拟化技术的应用越来越广泛 lntl、AMD 等硬件厂商通过对硬件的改造来支持虚拟化技术。<br /><br />常用于优化全虚拟化和半虚拟化产品，像 VMware Workstation，它虽然属于全虚拟化，但它在 6.0 版本中引入了硬件辅助虚拟化技术，比如 Intel 的 VT-x 和 AMD 的 AMD-V。主流全虚拟化和半虚拟化产品都支持硬件辅助虚拟化。(VirtualBox,KVM,Xen 等)<br /></td><td>辅助产品</td><td>- VT-x<br />- AMD-V<br /></td></tr></tbody></table><p>全虚拟化</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/12-21-14-f022c910d48931ce11223d247c888351-20230531122109-78f6d6.png"></p><p>半虚拟化</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/13-51-35-895d9c73dccc874815424d87298ef8bd-20230531135130-c79d43.png"></p><h3 id="全虚拟化代表-KVM-和半虚拟化代表-Xen-架构对比"><a href="#全虚拟化代表-KVM-和半虚拟化代表-Xen-架构对比" class="headerlink" title="全虚拟化代表 KVM 和半虚拟化代表 Xen 架构对比"></a>全虚拟化代表 KVM 和半虚拟化代表 Xen 架构对比</h3><table><thead><tr><th>架构</th><th>描述</th><th>对比</th><th>示意图</th></tr></thead><tbody><tr><td>全虚拟化：KVM</td><td>KVM(Kernel–Based Virtual Machines) 是一个基于 Linux 内核的虚拟化技术，可以直接将 Linux 内核转换为 Hypervisor。.从而使得 Linuxp 内核能够直接管理虚拟机，直接调用 Linux 内核中的内存管理、进程管理子系统来管理虚拟机。</td><td>- 支持全虚拟化<br />- 内置在内核中<br />- 便于版本安装、升级、维护，性能高<br />总结：KVM 平台架构侧重性能</td><td><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/13-50-44-295215a975864579d54f5ea07685e119-20230531135039-2dafa3.png"></td></tr><tr><td>半虚拟化：Xen</td><td>Xen:直接把操作系统内核改了，把 OS 改成一个轻量级 Hypervisor1 在里面运行了一个管理所有资源作资源调度的 Domain0。<br />组成：由 Xen Hypervisor(虚拟化层)、Domin0(管理主机)、Domin U(用户虚<br />拟机)<br /></td><td>- 支持全虚拟化、半虚拟化<br />- 需要对内核修改<br />- 更新版本，Xen 需要重新编译整个内核隔离性好<br />总结：Xen 平台架构侧重安全性</td><td><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-18-51-ec8fcb01ac5cda397c51a883587850ea-20230531141846-6f42cf.png"></td></tr></tbody></table><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>容器：包装或装载物品的贮存器，利用一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任一 Liux 或 Windows 机器上，也可以实现虚拟化。相互之间不会有任何接口，实现 App 与操作系统的解耦。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-49-30-c10e37d44495429910370b47eac70018-20230531144926-f7f9e5.png"></p><h2 id="主流容器技术"><a href="#主流容器技术" class="headerlink" title="主流容器技术"></a>主流容器技术</h2><p>定义：Docker) 属于 Liux 容器的一种封装，提供简单易用的容器使用接口，他是目前最流行的 Linux 容器解决方案。<br>作用：将应用程序与该程序的依赖，<strong>打包在一个文件里</strong>。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>组成：客户端 (Docker Client)、守护进程 (Docker Daemon)、镜像（Docker Image)、容器 (DockerContainer)、仓库（Docker Registry)</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-53-26-70a710bfca6ebb2d0197a8fb28a89b13-20230531145321-ce6e27.png"></p><h2 id="容器和虚拟化的区别"><a href="#容器和虚拟化的区别" class="headerlink" title="容器和虚拟化的区别"></a>容器和虚拟化的区别</h2><table><thead><tr><th>虚拟化</th><th>容器</th></tr></thead><tbody><tr><td>隔离性强，有独立的 GUEST OS</td><td>共享内核和 OS，隔离性弱</td></tr><tr><td>虚拟化性能差 (&gt;15%)</td><td>计算/存储无损耗，无 Guest0S 内存开销（200M)</td></tr><tr><td>虚拟机镜像庞大（十几 G 几十 G),且实例化时不能共享</td><td>Docker 容器镜象 200300M，且公共基础镜象实例化时<br />可以共享</td></tr><tr><td>虚拟机镜象缺乏统一标准</td><td>Docker 提供了容器应用镜象事实标准，OCI 推动进一步标<br />准化</td></tr><tr><td>虚拟机创建慢 (&gt;2 分钟)</td><td>秒级创建 (&lt;10s)<br />相当于建立索引</td></tr><tr><td>虚拟机启动慢 (&gt;30s) 读文件逐个加载</td><td>秒级 (&lt;1s，不含应用本身启动)</td></tr><tr><td>资源虚拟化粒度低，单机 10~100 虚拟机</td><td>单机支持 1000+ 容器<br />密度很高，适合大规模的部署</td></tr></tbody></table><h1 id="计算虚拟化"><a href="#计算虚拟化" class="headerlink" title="计算虚拟化"></a>计算虚拟化</h1><p>从服务器组建角度来看，计算虚拟化可分为：</p><ul><li>CPU 虚拟化：保障 CPU 资源的合理调度以及 VM 上的指令能够正常高效的执行。</li><li>内存虚拟化：保障内存空间的合理分配、管理，隔离，以及高效可靠地使用。</li><li>I/O 虚拟化：保障 VM 的 1O 隔离与正常高效的执行。</li></ul><p>常见的计算服务架构有：</p><ul><li>OpenStack Nova</li><li>阿里云 ECS</li><li>腾讯云 CVM</li></ul><h2 id="Nova"><a href="#Nova" class="headerlink" title="Nova"></a>Nova</h2><p>OpenStack 是开源的云平台，通过不同的组件提供计算、存储、网络、数据库等多种云服务。其中计算服务由 Nova 组件提供，通过 nova-API 与其他组件通信，通过 nova-computex 对接不同的虚拟层提供计算虚拟化服务。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/15-20-39-626c5b8808d188dd741630c2f871ac95-20230531152034-53e4f2.png"></p><p>创建实例流程：创建实例请求 nova-api，会唤醒 nova-database，请求刷新数据库。将请求给队列组件，nova-scheduler 从队列中取出请求，请求运行相对应的虚拟机。要运行不同的虚拟机，需要不同的平台支持（KVM，Xen,VMware）。虚拟机不能直接与数据库直接交互，需要通过 nova-conductor 转发。</p><h2 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h2><p>云服务器 ECS(Elastic Compute Service) 是阿里云提供的基于 KVM 虚拟化的弹性计算服务，建立在阿里云飞天 (Apsara) 分布式操作系统上。<br>请求的主要调用流程为：OpenAPI、.业务层、控制系统、宿主机服务。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/15-27-39-3057bca8eb97414d6d91c2201a895311-20230531152734-7f53e0.png"></p><h2 id="CVM"><a href="#CVM" class="headerlink" title="CVM"></a>CVM</h2><p>云服务器 CVM(Cloud Virtual Machine)) 是腾讯提供的基于 KVM 虚拟化的弹性计算服务，建立在腾讯云分布式资源管理调度系统 VStation.上。<br>请求的主要调用流程为：API Server、.VStation、服务器集群。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/15-28-22-2ee550326d62c2552c94cc2ef677e5a3-20230531152818-41688d.png"></p><h1 id="CPU-虚拟化"><a href="#CPU-虚拟化" class="headerlink" title="CPU 虚拟化"></a>CPU 虚拟化</h1><p>在物理机（宿主机）中通过线程或进程这种纯软件方式模拟出假的 CPU，通过 CPU 虚拟化就可以将一个物理 CPU 发给不同的虚拟机使用。</p><p>虚拟出来的每颗 CPU 实际上就是一个线程或者进程，因此物理 CPU 核数要大于虚拟 CPU 总核数。</p><h2 id="CPU-QoS-Quality-of-Service-服务质量"><a href="#CPU-QoS-Quality-of-Service-服务质量" class="headerlink" title="CPU QoS(Quality of Service) 服务质量"></a>CPU QoS(Quality of Service) 服务质量</h2><p>QoS 用来控制虚拟机使用 CPU 资源量的大小。<br>CPU 资源限额：控制虚拟机占用物理资源使用的上限。<br>CPU 资源份额：定义了多台虚拟机在竞争物理 CPU 资源时，需按比例分配计算资源。<br>CPU 预留资源：定义了多台虚拟机在竞争物理 CPU 时，每台虚拟机最低分配的计算资源。</p><h2 id="NUMA"><a href="#NUMA" class="headerlink" title="NUMA"></a>NUMA</h2><p>NUMA(Non Uniform Memory Access Architecture) 非统一内存访问体系结构，提高物理服务器性能的一种技术。</p><p>将物理服务器的 CPU 和内存资源分到多个 node 上，node 内的内存访问效率最高。</p><p>NUMA 保证了一个 VM 上的 VCPU 尽量分配到同一个 node 中的物理 CPU 上，如果一台 VM 的 VCPU 跨 node 访问内存的话，访问的延时肯定增加。</p><h1 id="内存虚拟化"><a href="#内存虚拟化" class="headerlink" title="内存虚拟化"></a>内存虚拟化</h1><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/15-53-33-a6d733a49ff6057c8e528cad5867f015-20230531155328-769d51.png"></p><h2 id="虚拟化类型-1"><a href="#虚拟化类型-1" class="headerlink" title="虚拟化类型"></a>虚拟化类型</h2><table><thead><tr><th>全虚拟化</th><th>半虚拟化</th><th>硬件辅助虚拟化</th></tr></thead><tbody><tr><td>为每个 VM 维护一个影子页表记录虚拟化内存与物理内存的映射关系，VMM 将影子页表提交给 CPU 的内存管理单元 MMU 进行地址转换，VM 的页表无需改动。</td><td>采用页表写入法，为每个 VM 创建<br />一个页表并向虚拟化层注册。VM<br />运行过程中 VMM 不断管理和维护<br />该页表，确保 VM 能直接访问到合<br />适的地址。</td><td>EPT/NPT 是内存管理单元 MMU 的<br />扩展，CPU 硬件一个特性，通过<br />硬件方式实现 GuestOS 物理内存地<br />址到主机物理内存地址的转换，系<br />统开销更低，性能更高。</td></tr></tbody></table><h2 id="内存复用技术"><a href="#内存复用技术" class="headerlink" title="内存复用技术"></a>内存复用技术</h2><p>内存复用是指在服务器物理内存一定的情况下，通过综合运用内存复用技术对内存进行分时复用。<br>内存复用技术有：</p><ul><li>内存气泡：虚拟化层将较空闲 VM 内存，分配给内存使用较高的虚拟机。内存的回收和分配由虚拟化层实现，虚拟机上的应用无感知，提高物理内存利用率。（虚拟机分配的内存不超过物理机总内存）</li><li>内存交换：将外部存储虚拟成内存给 VM 使用，将 VM 上长时间未访问的数据存放到外部存储上，建立映射关系。VM 再次访问这些数据是通过映射在与内存上的数据进行交换。</li><li>内存共享：VM 只对共用的内存（共享数据内容为零的内存页）做只读操作，有写操作时运用写时复制 (VM 有写操作时，开辟另一空间，并修改映射)</li></ul><h1 id="IO-虚拟化"><a href="#IO-虚拟化" class="headerlink" title="IO 虚拟化"></a>IO 虚拟化</h1><table><thead><tr><th>全虚拟化</th><th>半虚拟化</th><th>Pass-Thorugh（直通）</th><th>硬件辅助虚拟化</th></tr></thead><tbody><tr><td>通过软件模拟的形式模拟 O 设备，<strong>不需要硬件支持</strong>，对虚拟机的操作系统也不需要修改（因为模拟的都是一个常见的硬件网卡，如 IntelE1000，主流操作系统一般都自带这些驱动，因此默认情下虚拟机不需要再安装驱动。缺点就是<strong>性能差</strong>。</td><td>由 Hypervisor 提供资源调用接口。VM 通过特定的调用接口与 Hypervisor 通信，完成获取完整/O 资源控制操作。(需修改内核及驱动程序，存在移植性和适用性问题，导致其使用受限。)</td><td>Hypervisor] 直接把硬件 PCI 设备分配给虚拟独占使用，性能挡当然好啦。但是<strong>浪遗硬件设备</strong>，且<strong>配置复杂</strong>，首先需要在 hypervisor 指定通过 PClid 方式分配给指定的虚拟机，然后虚拟机再识别到设备再安装驱动来使用。</td><td>通过硬件的辅助可以让虚拟机直接访问物理设备，而不需要通过 VMM。最常用的就是 SR-lOV(Single Root I/OVirtualizmion)单根 I/O 虚拟化标准，该技术可以直接虚拟出 128-512 网卡，可以让虚拟机都拿到一块独立的网卡，直接使用/O 资源。</td></tr></tbody></table><h1 id="常见集群策略"><a href="#常见集群策略" class="headerlink" title="常见集群策略"></a>常见集群策略</h1><h2 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h2><p>集群是一种计算机系统，通过一组计算机或服务器的软硬件连接起来高度紧密地协作完成计算工作。在客户端看来为其提供服务的只有一台设备，实际上它是一群设备的集合，只不过这些设备提供的服务一样。</p><p>集群系统中单个计算机通常称为节点，通过局域网连接，利用多个计算机进行并行计算获得很高计算速度，也可以用多个计算机做备份提高可靠性。（并行计算技术）</p><h2 id="HA-策略"><a href="#HA-策略" class="headerlink" title="HA 策略"></a>HA 策略</h2><p>HA(High Availability) 高可用性，一种让服务中断尽可能少的技术。将多台主机组建成一个故障转移集群，运行在集群上的服务（或 VM) 不会因为单台主机的故障而停止。</p><p>提升故障恢复速度，降低业务中断时间、保障业务连续性、实现一定的系统自维护。</p><h2 id="DRS-策略"><a href="#DRS-策略" class="headerlink" title="DRS 策略"></a>DRS 策略</h2><p>DRS(Dynamic resource scheduling) 动态资源调度，根据对资源池资源负载的动态监控，合理触发均匀分配规侧，实现资源池中的物理服务器之间重新分配资源，达到<strong>负载均衡、消峰填谷</strong>。</p><p>当物理服务器上负载过大时，通过 DRS 将虚拟机迁移到其他负载较轻的物理服务器上。当虚拟机遇到负载增大时，DRS 将为资源池中的物理服务器重新分配虚拟机可使用资源，在多个虚拟机之间智能地分配可用资源。</p><h2 id="DPM-策略"><a href="#DPM-策略" class="headerlink" title="DPM 策略"></a>DPM 策略</h2><p>DPM（Distributed power management) 分布式电源管理，用于业务较轻时，把虚拟机动态“集中”到集群中的少部分主机上，将其他主机待机，节省电力消耗，等业务量较大时，再重新唤醒之前待机的主机。</p><p>执行 DPM 策略的前提是开启 DRS 策略，即集群必须先设置好 DRS 策略，才能设置 DPM 策略。</p><h1 id="存储虚拟化"><a href="#存储虚拟化" class="headerlink" title="存储虚拟化"></a>存储虚拟化</h1><h2 id="存储类型"><a href="#存储类型" class="headerlink" title="存储类型"></a>存储类型</h2><p>常用的存储类型有：</p><table><thead><tr><th></th><th>本地磁盘</th><th>DAS</th></tr></thead><tbody><tr><td>简介</td><td>云计算虚拟化场景下的本地磁盘是指使用服务器本地的磁盘资源，经过 RAD(磁盘阵列) 化后提供给虚拟化平台进行使用。</td><td>DAS(Direct-Attached Storage) 直连式存储：一个存储设备与使用存储空间的服务器<br />直接相连的架构。DAS 为服务器提供块级的存储服务。</td></tr><tr><td>优点</td><td>- 使用方便<br />- 无共享框架<br /></td><td>- 多个磁盘合并成一个逻辑磁盘，满足海量存储的需求<br />- 可实现应用数据和操作系统的分离<br />- 能提高存取性能<br />- 实施简单<br /></td></tr><tr><td>缺点</td><td>- 对跨服务器来说没有备份、冗余机制</td><td>- 服务器发生故障，数据不可访问<br />- 传输距离短</td></tr></tbody></table><table><thead><tr><th></th><th align="left">NAS</th><th align="left">SAN</th></tr></thead><tbody><tr><td>简介</td><td align="left">NAS(Network Attached Storage) 网络附加存储：将分布、独立的数据进行整合，集<br />中化管理，以便对不同主机和应用服务器进行访问的技术。<br />NAS 将存储设备连接到现有的网络上来提供数据和文件服务。</td><td align="left">SAN(Storage Area Networks) 存储区域网络：是一种高速的、专门用于存储操作的网<br />络，通常独立于计算机局域网。<br />提供在主机和存储系统之间数据传输，网络内部数据传输的速率快。<br />常见架构有 FC SAN、IP SAN。</td></tr><tr><td>优点</td><td align="left">- 支持快照等高级特性<br />- 集中存储<br />- 提供安全集成环境（用户认证和授权)<br /></td><td align="left">- 存储容量利用率高<br />- 兼容性高<br />- 传输距离远<br />- 高带宽<br />- 主机、存储设备可以独立扩展<br /></td></tr><tr><td>缺点</td><td align="left">- 传输速率低<br />- 前期安装和设备成本高</td><td align="left">- 成本高、复杂</td></tr></tbody></table><h2 id="云存储基本概念"><a href="#云存储基本概念" class="headerlink" title="云存储基本概念"></a>云存储基本概念</h2><p>存储资源：表示实际的物理存储设备，例如 DAS(直连存储)、NAS(网络附加存储)、SA(存储区域网络) 等。</p><p>存储设备：表示存储资源中的管理单元，例如本地磁盘、LUN(逻辑单元号)、Storage 存储池、NAS 共享目录等。</p><p>数据存储：表示虚拟化平台中可管理的存储逻辑单元，承载了虚拟机业务，创建磁盘。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/18-55-45-5599a99b10ac1c9c3ad6cc69bc1c9c67-20230531185540-d75052.png"></p><h2 id="创建虚拟存储的流程"><a href="#创建虚拟存储的流程" class="headerlink" title="创建虚拟存储的流程"></a>创建虚拟存储的流程</h2><ol><li>在主机软件界面添加存储资源 (SAN、DAS 等)，对主机的启动进行配置。</li><li>主机关联存储资源后，进行扫描存储设备（本地磁盘、LUN 等），将具体的设备扫描到主机上。</li><li>主机在选择存储设备，进行数据存储的添加，并进行虚拟化。</li><li>最后对虚拟化好的数据存储进行创建卷等操作。</li></ol><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/18-58-26-0207d3cfacb381f75c3d8f52b3251639-20230531185822-ac2437.png"></p><h2 id="存储模式"><a href="#存储模式" class="headerlink" title="存储模式"></a>存储模式</h2><table><thead><tr><th></th><th>非虚拟化存储</th><th>虚拟化存储</th><th>裸设备映射</th></tr></thead><tbody><tr><td></td><td>传统的存储模式，就是把磁盘进行分区，分割成不同的逻辑卷，每一个逻辑卷可以给到虚拟机进行使用。</td><td>将不同的存储设备、磁盘进行格式化，格式化的目的是屏蔽底层存储设备的能力、接口<br />协议等差异性，将各种存储资源转化为统一管理的数据存储资源。</td><td>将磁盘直接给到虚拟机使用，让虚拟机直接处理调用存储的命令（直接访问磁盘）中间虚拟化层不再对其进行任何干预（卷都不需要创建）</td></tr><tr><td>特点</td><td>- 性能好 (不再有中间的虚拟化层，VM 读写直接在磁盘上)、速度快、效率高。<br /><br />- 支持的存储功能少（不支持快照、精简配置等）<br /></td><td>- 支持多种存储功能（快照、精简磁盘、磁盘扩容、存储热迁移等)。<br />- 性能不高（没有非虚拟化存储好）<br /></td><td>速度快（三种模式中最快）、性能好。<br />支持的存储功能少（不支持快照、精简配置等），仅支持部分操作系统的虚拟机使用、数据存储只能整块当做裸设备映射的磁盘使用，不可分割。<br /></td></tr><tr><td></td><td><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-05-13-74eb9473a84f7cc8d591b18d5b0ec7ee-20230531190509-4a3908.png"></td><td><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-08-34-98b4e748d8c582b1e74f109fe228fb9c-20230531190829-8006f5.png"></td><td><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-12-22-a0c2ce10d5ab79474d217028ed20056b-20230531191217-563c1b.png"></td></tr></tbody></table><h2 id="存储虚拟化方法"><a href="#存储虚拟化方法" class="headerlink" title="存储虚拟化方法"></a>存储虚拟化方法</h2><h3 id="基于主机的存储虚拟化"><a href="#基于主机的存储虚拟化" class="headerlink" title="基于主机的存储虚拟化"></a>基于主机的存储虚拟化</h3><p>若仅是单个主机服务器（或单个集群）访问多个磁盘阵列，可采用基于主机的存储虚拟化：虚拟化的工作通过特定的软件在主机服务器上完成，经过虚拟化的存储空间可以跨越多个异构的磁盘阵列。</p><p>特点：</p><ul><li>优点是稳定性，以及对异构存储系统的开放性。</li><li>软件运行于主机上。</li><li>从与主机连接的存储上创建虚拟卷。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/08-36-54-e70134a6efd0d031785dc81eeb922c38-20230601083649-a5e4db.png"></p><h3 id="基于存储设备的虚拟化"><a href="#基于存储设备的虚拟化" class="headerlink" title="基于存储设备的虚拟化"></a>基于存储设备的虚拟化</h3><p>若多个主机服务器需要访问同一个磁盘阵列时，可采用基于存储设备虚拟化。虚拟化的工作在阵列控制器上完成，将一个阵列上的存储容量划分多个存储空间 (LUN),供不同的主机系统访问。主要用在同一存储设备内部，进行数据保护和数据迁移。</p><ul><li>优点是与主机无关，不占用主机资源，数据管理功能丰富。</li><li>软件运行于存储设备中专门的嵌入式系统上。</li><li>从与 SAN 连接的存储上创建虚拟卷。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/08-41-22-f6e0c1760cda24ae776bfcf3c57c2af5-20230601084118-73285e.png"></p><h3 id="基于网络的存储虚拟化"><a href="#基于网络的存储虚拟化" class="headerlink" title="基于网络的存储虚拟化"></a>基于网络的存储虚拟化</h3><p>通过在存储区域网 (SAN) 中添加虚似化引擎实现的，主要用于异构存储系统的整合和统数据管理。</p><p>特点：</p><ul><li>优点是与主机无关，不占用主机资源；</li><li>支持异构主机、异构存储设备；</li><li>能使不同存储设备的数据管理功能统一，统一管理平台，可扩展性好。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/08-42-36-66183a6a63e0ab9ed777c2ff96834109-20230601084232-7fdd98.png"></p><h2 id="存储虚拟化的功能"><a href="#存储虚拟化的功能" class="headerlink" title="存储虚拟化的功能"></a>存储虚拟化的功能</h2><p>存储虚拟化可以提高硬件资源的使用效率，简化系统管理的复杂度，增强云存储平台的可靠性。可以通过以下几种技术实现：</p><h3 id="精简磁盘和空间回收"><a href="#精简磁盘和空间回收" class="headerlink" title="精简磁盘和空间回收"></a>精简磁盘和空间回收</h3><p>精简磁盘和空间回收用于提高存储资源的使用效率、减小虚拟机未使用空间在主机上占用率过大的问题。</p><p>用户用多少分配多少空间（自动分配）<br />空间回收可以将用户删除的数据空间释放到数据存储。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-07-37-a97805053794b23776d5085409611896-20230601090732-4ff3a3.png"></p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><ul><li>指定数据集合的一个完全可用拷贝，该拷贝包括相应数据在某个时间点（拷贝开始的时间点) 的映像。</li><li>快照可以是其所表示的数据的一个副本，可以是数据的一个复制品。</li><li>快照的作用主要是能够进行在线数据备份恢复。</li><li>为用户提供了数据访问通道</li></ul><p>特点</p><ul><li>记录了虚拟机在某一时间点的内容和状。</li><li>恢复虚拟机快照可以使虚拟机多次快速恢复到某一时间点。</li><li>快照包含磁盘内容、虚拟机配置信息、内存数据。</li><li>多次快照之间<strong>保存差量数据</strong>，节约存储空间。</li></ul><h4 id="快照方式介绍"><a href="#快照方式介绍" class="headerlink" title="快照方式介绍"></a>快照方式介绍</h4><p>创建快照时会生成一个新的差分卷，虚拟机会挂载这个差分卷作为磁盘文件。</p><ul><li>ROW 写时重定向</li><li>COW 写时拷贝</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-13-17-381617aa029cc392aa3ae573efdfb8aa-20230601091313-a0828c.png"></p><h4 id="快照链介绍"><a href="#快照链介绍" class="headerlink" title="快照链介绍"></a>快照链介绍</h4><p>对虚拟机进行多次的快照操作，这些多次的快照操作形成快照链。</p><p>虚拟机卷始终挂载在快照链的最末端。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-35-59-7cc5ae355ea7c376e94b60b952e0284e-20230601093555-863fc8.png"></p><h3 id="链接克隆"><a href="#链接克隆" class="headerlink" title="链接克隆"></a>链接克隆</h3><ul><li>将源卷和差分卷组合映射为一个链接克隆卷，给虚拟机使用。一个链接克隆需要和原始虚拟机共享同一虚拟磁盘文件。</li><li>采用共享磁盘文件缩短了创建克隆虚拟机的时间，还节省了物理磁盘空间。</li><li>通过链接克隆，可以轻松的为不同的任务创建一个独立的虚拟机。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-19-47-654bac5b7dfa915bea5c572df6f58bbd-20230601091942-a6a3d7.png"></p><h3 id="虚拟磁盘文件迁移"><a href="#虚拟磁盘文件迁移" class="headerlink" title="虚拟磁盘文件迁移"></a>虚拟磁盘文件迁移</h3><p>功能：</p><ul><li>将虚拟机的磁盘从一个数据存储迁移到另一个数据存储。可以将虚拟机的所有磁盘整体迁移，也可以单个磁盘分别迁移。</li><li>虚拟机的快照可以一起迁移，虚拟机开启或者关闭时都可以迁移。</li></ul><p>特点：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/09-32-38-a14bb4f8ed8bac86585c62877564bb65-20230601093233-54d851.png"></p><h1 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h1><p>虚拟化是对所有 T 资源的虚拟化，提高物理硬件的灵活性及利用效率。云计算中的计算和存储资源分别由计算虚拟化和存储虚拟化提供，而网络作为 T 的重要资源也有相应的虚拟化技术，网络资源由网络虚拟化提供。</p><p>网络是由各种设备组成，有传统的物理网络，还有运行在服务器上看不到的虚拟网络。如何呈现和管理它们将是网络虚拟化的首要目标。</p><p>将物理网络虚拟出多个相互隔离的虚拟网络（逻辑网络），从而使得不同用户之间使用独立的网络资源，从而提高网络资源利用率，实现弹性的网络。</p><p>VLAN 就是一种网络虚拟化，在原有网络基础上通过 VLAN Tag:划分出多个广播域。</p><p>网络虚拟化保障我们创建出来的虚拟机可以正常  通信、访问网络。</p><p>节省物理主机的网卡设备资源，并且可以提供应用的虚拟网络所需的 L2 一 L7 层网络服务。</p><p>网络虚拟化软件提供逻辑上的交换机和路由器 (L2-L3),逻辑负载均衡器，逻辑防火墙 (L4-L7) 等，且可以以任何形式进行组装，从而为虚拟机提供一个完整的 L2-L7 层的虚拟网络拓扑。</p><h2 id="物理网络包含的设备"><a href="#物理网络包含的设备" class="headerlink" title="物理网络包含的设备"></a>物理网络包含的设备</h2><p>路由器：工作在网络层，连接两个不同的网络。</p><p>二层交换机：工作在数据链路层，转发数据。</p><p>三层交换机：工作在网络层，结合了部分路由和交换机的功能。</p><p>服务器网卡：提供通信服务。</p><h1 id="虚拟化中的网络架构"><a href="#虚拟化中的网络架构" class="headerlink" title="虚拟化中的网络架构"></a>虚拟化中的网络架构</h1><p>网卡虚拟化方法有：</p><ul><li><p>软件网卡虚拟化</p><ul><li>主要通过软件控制各个虚拟机共享同一块物理网卡实现。软件虚拟出来的网卡可以有单独的 MAC 地址、IP 地址。</li><li>所有虚拟机的虚拟网卡通过虚拟交换机以及物理网卡连接至物理交换机。虚拟交换机负责将虚拟机上的数据报文从物理网口转发出去。</li></ul></li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-16-53-540de968dd6e4e7cc2e45e8b1b1df1a1-20230601141648-d238fb.png"></p><ul><li><p>硬件网卡虚拟化</p><ul><li>主要用到的技术是单根 I/O 虚拟化 (Single Root/O Virtulization,SR-lOV),就是 I/O 直通技术，通过硬件的辅助可以让虚拟机直接访问物理设备，而不需要通过 VMM。该技术可以直接虚拟出 128-512 网卡，可以让虚拟机都拿到一块独立的网卡，直接使用/O 资源。SR-OV 能够让网络传输绕过软件模拟层，直接分配到虚拟机，这样就降低了软件模拟层中的/○ 开销。</li></ul></li></ul><p>交换机虚拟化：</p><ul><li>OVS(Open vSwitch) 开放虚拟化软件交换机，是一款基于软件实现的开源虚拟以太网交换机，使用开源 Apache2.0 许可协议，主要用于虚拟机 VM 环境。与众多开源的虚拟化平台相整合（支持 Xen、KVM 及 VirtualBox 多种虚拟化技术），主要有两个作用：传递虚拟机之间的流量，实现虚拟机和外界网络的通信。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-30-39-aaaaed14c501175ffa51df2735b09d2a-20230601143034-d4f7f6.png"></p><h2 id="虚拟化中数据的转发路径"><a href="#虚拟化中数据的转发路径" class="headerlink" title="虚拟化中数据的转发路径"></a>虚拟化中数据的转发路径</h2><ul><li>相同端口组不同服务器内的虚拟机通讯需要经过物理网络。（黑线）</li><li>相同端口组相同服务器内的虚拟机通讯不需要经过物理网络。（红线）</li><li>不同端口组相同服务器的虚拟机通讯需要经过物理网络。（黄色）</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/18-59-54-9abbabcce9a6864d7c990eba310e171f-20230601185949-5239e7.png"></p><h2 id="链路虚拟化"><a href="#链路虚拟化" class="headerlink" title="链路虚拟化"></a>链路虚拟化</h2><p>VPC(Virtual Port Channel) 虚链路聚合，是最常见的二层虚拟化技术。</p><p>链路聚合将多个物理端口捆绑在一起，虚拟成为一个逻辑端口。但传统链路聚合不能跨设备，VPC 很好解决了这个问题，既可以跨设备，又可以增加链路带宽、实现链路层的高可用性。</p><p>隧道协议 (Tunneling Protocol)：指通过隧道协议使多个<strong>不同协议的网络实现互联</strong>。使用隧道传递的数据可以是不同协议的数据帧或包。隧道可以将数据流强制送到特定的地址，并隐藏中间节点的网络地址，还可根据需要，提供对数据加密的功能。</p><ul><li>GRE(Generic Routing Encapsulation) 通用路由封装。</li><li>IPsec(Internet Protocol Security)Internett 协议安全。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-34-04-8dc54676f16ac517fa503ded64966d24-20230601193359-139761.png"></p><h2 id="虚拟网络"><a href="#虚拟网络" class="headerlink" title="虚拟网络"></a>虚拟网络</h2><p>虚拟网络 (Virtual Network):是由虚拟链路组成的网络。</p><p>虚拟网络节点之间的连接并不使用物理线缆连接，而是依靠特定的虚拟化链路相连。</p><p>典型的虚拟网络包括：</p><ul><li><p>层叠网络（虚拟二层延伸网络）</p><ul><li><p>层叠网络 (Overlay Network)：在现有网络的基础上搭建另外一种网络</p></li><li><p>层叠网络允许对没有引 P 地址标识的目的主机路由信息。</p></li><li><p>层叠网络可以充分利用现有资源，在不增加成本的前提下，提供更多的服务。（比如 ADSL Internet 接入线路就是基于已经存在的 PSTN 网络实现)</p></li><li><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-36-27-c84d66208097477a09c6ce6b162bfacd-20230601193622-21ef48.png"></p></li><li><p>典型技术：</p><ul><li>VXLAN(Virtual eXtensible Local Area Network) 虚拟扩展局域网：很好地解决了现有 VLAN 技术无法满足大二层网络需求的问题。</li><li>VXLAN 技术是一种大二层的虚拟网络技术。</li><li>原理是引入一个 UDP 格式的外层隧道作为数据链路层，而原有数据报文内容作为隧道净荷加以传输。</li></ul></li></ul></li><li><p>VPN 网络</p><ul><li><p>VPN(Virtual Private Network) 虚拟专用网：是一种常用于连接中、大型企业或团体与团体间的私人网络的通信方法。</p><ul><li>通过公用的网络架构（比如互联网）来传送内联网的信息。</li><li>利用已加密的隧道协议来达到保密、终端认证、信息准确性等安全效果。这种技术可以</li><li>在不安全的网络上传送可靠的、安全的信息。</li><li><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-39-40-4bc357c1f760435fb8d1a980f230527c-20230601193935-06e11c.png"></li></ul></li></ul></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;云计算服务类型&quot;&gt;&lt;a href=&quot;#云计算服务类型&quot; class=&quot;headerlink&quot; title=&quot;云计算服务类型&quot;&gt;&lt;/a&gt;云计算服务类型&lt;/h1&gt;&lt;p&gt;传统架构=&amp;gt;Iaas=&amp;gt;Paas=&amp;gt;Saas&lt;/p&gt;
&lt;p&gt;自己烧饭=&amp;gt; 叮</summary>
      
    
    
    
    
    <category term="云计算" scheme="http://example.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Devstack 部署 OpenStack</title>
    <link href="http://example.com/2023/06/09/Devstack%E9%83%A8%E7%BD%B2OpenStack/"/>
    <id>http://example.com/2023/06/09/Devstack%E9%83%A8%E7%BD%B2OpenStack/</id>
    <published>2023-06-09T13:38:34.000Z</published>
    <updated>2023-08-12T02:38:01.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Devstack-部署-OpenStack"><a href="#Devstack-部署-OpenStack" class="headerlink" title="Devstack 部署 OpenStack"></a>Devstack 部署 OpenStack</h1><p>试验发现在 Host 为 Ubuntu20.04 和 22.04 上无法顺利安装 VirtualBox，请在 Ubuntu18.04 上安装 VirtualBox。虚拟机镜像版本为 Ubuntu20.04，以下步骤可以稳定复现，OpenStack master（c424a7a299e37004d318107648bb18e157344985）版本。</p><p>总而言之，在 18.04 版本上安装 VirtualBox，在 20.04 版本上安装 OpenStack。</p><p>因为安装 OpenStack 容易破话系统包依赖，如果为了学习建议在虚拟机中安装。</p><p>安装过程中需要下载镜像，请确认机器可以访问外网。</p><h2 id="安装-VirtualBox"><a href="#安装-VirtualBox" class="headerlink" title="安装 VirtualBox"></a>安装 VirtualBox</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install virtualbox virtualbox-ext-pack</span><br></pre></td></tr></table></figure><h2 id="确认-VirtualBox-配置"><a href="#确认-VirtualBox-配置" class="headerlink" title="确认 VirtualBox 配置"></a>确认 VirtualBox 配置</h2><p>请确认 VirtualBox 配置如下，VirtualBox 默认配置硬盘为 10G，远远不够用，为了避免后续的麻烦，请确认如下配置：</p><p>磁盘大于 100G</p><p>内存大于 16G</p><p>CPU 大于 4 个</p><h2 id="下载镜像并安装"><a href="#下载镜像并安装" class="headerlink" title="下载镜像并安装"></a>下载镜像并安装</h2><p>镜像可以去<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>下载。</p><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk &amp;&amp; sudo bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restrcdicted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restrcd &amp;&amp; mkdir .pip &amp;&amp; cd .pipicted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><h3 id="备用源-以备不时之需"><a href="#备用源-以备不时之需" class="headerlink" title="备用源 (以备不时之需)"></a>备用源 (以备不时之需)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk &amp;&amp; sudo bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restrcdicted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restrcd &amp;&amp; mkdir .pip &amp;&amp; cd .pipicted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk &amp;&amp; sudo bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk &amp;&amp; sudo bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装基础包"><a href="#安装基础包" class="headerlink" title="安装基础包"></a>安装基础包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br><span class="line">sudo apt install aptitude</span><br></pre></td></tr></table></figure><p>aptitude 用于解决包依赖冲突。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>添加 stack 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -s /bin/bash -d /opt/stack -m stack</span><br></pre></td></tr></table></figure><p>授予 sudo 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo tee /etc/sudoers.d/stack</span><br></pre></td></tr></table></figure><p>切换到 stack 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -  stack</span><br></pre></td></tr></table></figure><h2 id="PIP-配置"><a href="#PIP-配置" class="headerlink" title="PIP 配置"></a>PIP 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &amp;&amp; mkdir -p  .pip &amp;&amp; cd .pip &amp;&amp; bash -c &quot;cat &lt;&lt; EOF &gt; ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line">EOF&quot;</span><br></pre></td></tr></table></figure><h2 id="仓库下载"><a href="#仓库下载" class="headerlink" title="仓库下载"></a>仓库下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/openstack/devstack --depth 1</span><br></pre></td></tr></table></figure><h3 id="配置-local-conf"><a href="#配置-local-conf" class="headerlink" title="配置 local.conf"></a>配置 local.conf</h3><p>只需要修改 HOST_IP，其他的可以不用修改，HOST_IP 为本机 IP 地址，可以使用 ifconfig 查看。如果是虚拟机就是虚拟机的 IP，virtualbox 创建的虚拟机默认为 10.0.2.15。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> devstack &amp;&amp; touch local.conf &amp;&amp; bash -c <span class="string">&quot;cat &lt;&lt; EOF &gt; /opt/stack/devstack/local.conf</span></span><br><span class="line"><span class="string">[[local|localrc]]</span></span><br><span class="line"><span class="string">HOST_IP=10.0.2.15</span></span><br><span class="line"><span class="string">GIT_BASE=http://git.trystack.cn</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ADMIN_PASSWORD=user</span></span><br><span class="line"><span class="string">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span></span><br><span class="line"><span class="string">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span></span><br><span class="line"><span class="string">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span></span><br><span class="line"><span class="string">EOF&quot;</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FORCE=yes ./stack.sh</span><br></pre></td></tr></table></figure><h1 id="BUG-解决"><a href="#BUG-解决" class="headerlink" title="BUG 解决"></a>BUG 解决</h1><h2 id="systemd-包依赖冲突"><a href="#systemd-包依赖冲突" class="headerlink" title="systemd 包依赖冲突"></a>systemd 包依赖冲突</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install systemd</span><br><span class="line">选择N</span><br><span class="line">再选择Y</span><br></pre></td></tr></table></figure><h2 id="ModuleNotFoundError-No-module-named-‘distutils-cmd’"><a href="#ModuleNotFoundError-No-module-named-‘distutils-cmd’" class="headerlink" title="ModuleNotFoundError: No module named ‘distutils.cmd’"></a>ModuleNotFoundError: No module named ‘distutils.cmd’</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3.10-distutils</span><br><span class="line"># 根据自己的 Python 版本决定，可以 python3.7-distutils python3.8-distutils   ....都试一遍</span><br></pre></td></tr></table></figure><h2 id="apparmor-invalid-capability-bpf"><a href="#apparmor-invalid-capability-bpf" class="headerlink" title="apparmor invalid capability bpf"></a>apparmor invalid capability bpf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apparmor</span><br></pre></td></tr></table></figure><h2 id="No-tenant-network-is-available-for-allocation"><a href="#No-tenant-network-is-available-for-allocation" class="headerlink" title="No tenant network is available for allocation"></a>No tenant network is available for allocation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/neutron/plugins/ml2/ml2_conf.ini</span><br><span class="line"></span><br><span class="line">[ml2]</span><br><span class="line">type_drivers = flat,vlan,vxlan</span><br><span class="line">tenant_network_types = vxlan</span><br><span class="line"></span><br><span class="line">[ml2_type_vxlan]</span><br><span class="line">vni_ranges = 1:1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unix-var-run-openvswitch-db-sock-database-connection-failed-Connection-refused"><a href="#unix-var-run-openvswitch-db-sock-database-connection-failed-Connection-refused" class="headerlink" title="unix:/var/run/openvswitch/db.sock: database connection failed (Connection refused)"></a>unix:/var/run/openvswitch/db.sock: database connection failed (Connection refused)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /opt/stack/devstack/lib/neutron_plugin </span><br><span class="line">vi ovn_agent </span><br><span class="line">116G  跳转到116行</span><br><span class="line">OVS_RUNDIR=<span class="variable">$OVS_PREFIX</span>/var/run/openvswitch 修改为OVS_RUNDIR=<span class="variable">$OVS_PREFIX</span>/var/run/ovn </span><br><span class="line">sudo rm -rf /var/run/ovn</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="VirtualBox-启动报错-Failed-to-send-host-log-message"><a href="#VirtualBox-启动报错-Failed-to-send-host-log-message" class="headerlink" title="VirtualBox 启动报错 : Failed to send host log message"></a>VirtualBox 启动报错 : Failed to send host log message</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+F2进入另一个终端</span><br><span class="line">输入：startx进入桌面</span><br></pre></td></tr></table></figure><h2 id="AttributeError-module-‘collections‘-has-no-attribute-‘MutableMapping‘"><a href="#AttributeError-module-‘collections‘-has-no-attribute-‘MutableMapping‘" class="headerlink" title="AttributeError: module ‘collections‘ has no attribute ‘MutableMapping‘"></a>AttributeError: module ‘collections‘ has no attribute ‘MutableMapping‘</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collections.MutableMapping</span><br><span class="line">collections.abc.MutableMapping</span><br></pre></td></tr></table></figure><h2 id="ModuleNotFoundError-No-module-named-‘distutils-core’"><a href="#ModuleNotFoundError-No-module-named-‘distutils-core’" class="headerlink" title="ModuleNotFoundError: No module named ‘distutils.core’"></a>ModuleNotFoundError: No module named ‘distutils.core’</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h2 id="ERROR-Cannot-uninstall-‘simplejson’-It-is-a-distutils-installed-project-and-thus-we-cannot"><a href="#ERROR-Cannot-uninstall-‘simplejson’-It-is-a-distutils-installed-project-and-thus-we-cannot" class="headerlink" title="ERROR: Cannot uninstall ‘simplejson’. It is a distutils installed project and thus we cannot"></a>ERROR: Cannot uninstall ‘simplejson’. It is a distutils installed project and thus we cannot</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install --ignore-installed wrapt enum34 simplejson netaddr</span><br></pre></td></tr></table></figure><h2 id="server-certificate-verification-failed-CAfile-none-CRLfile-none"><a href="#server-certificate-verification-failed-CAfile-none-CRLfile-none" class="headerlink" title="server certificate verification failed. CAfile: none CRLfile: none"></a>server certificate verification failed. CAfile: none CRLfile: none</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslverify <span class="literal">false</span></span><br><span class="line">git config --global https.sslverify <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Ubuntu-登录页面验证出错"><a href="#Ubuntu-登录页面验证出错" class="headerlink" title="Ubuntu:登录页面验证出错"></a>Ubuntu:登录页面验证出错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo loginctl unlock-sessions</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-重装桌面"><a href="#Ubuntu-重装桌面" class="headerlink" title="Ubuntu:重装桌面"></a>Ubuntu:重装桌面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ubuntu-desktop</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-登录界面-Authentication-Error"><a href="#Ubuntu-登录界面-Authentication-Error" class="headerlink" title="Ubuntu 登录界面 Authentication Error"></a>Ubuntu 登录界面 Authentication Error</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo loginctl unlock-sessions</span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;fs.inotify.max_user_watches=524288&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Ubuntu-无法进入桌面系统，但是可以-SSH-链接"><a href="#Ubuntu-无法进入桌面系统，但是可以-SSH-链接" class="headerlink" title="Ubuntu 无法进入桌面系统，但是可以 SSH 链接"></a>Ubuntu 无法进入桌面系统，但是可以 SSH 链接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/apt/lists/*</span><br><span class="line">sudo apt-get clean</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install --reinstall appstream</span><br></pre></td></tr></table></figure><h2 id="gsettings-desktop-schemas-破坏：mutter-＜-3-31-4-但是-3-28-4-0ubuntu18-04-2-正要被安装解决方案"><a href="#gsettings-desktop-schemas-破坏：mutter-＜-3-31-4-但是-3-28-4-0ubuntu18-04-2-正要被安装解决方案" class="headerlink" title="gsettings-desktop-schemas : 破坏：mutter (＜ 3.31.4) 但是 3.28.4-0ubuntu18.04.2 正要被安装解决方案"></a>gsettings-desktop-schemas : 破坏：mutter (＜ 3.31.4) 但是 3.28.4-0ubuntu18.04.2 正要被安装解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gsettings-desktop-schemas</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Devstack-部署-OpenStack&quot;&gt;&lt;a href=&quot;#Devstack-部署-OpenStack&quot; class=&quot;headerlink&quot; title=&quot;Devstack 部署 OpenStack&quot;&gt;&lt;/a&gt;Devstack 部署 OpenStack&lt;/</summary>
      
    
    
    
    <category term="OpenStack" scheme="http://example.com/categories/OpenStack/"/>
    
    
    <category term="云计算" scheme="http://example.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="OpenStack" scheme="http://example.com/tags/OpenStack/"/>
    
    <category term="Devstack" scheme="http://example.com/tags/Devstack/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络 - 物理层</title>
    <link href="http://example.com/2023/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://example.com/2023/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2023-04-10T13:14:41.000Z</published>
    <updated>2023-06-11T01:55:35.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>物理层解决如何在连接各种计算机的传输媒体上<code>传输数据比特流</code>，而不是指具体的传输媒体。<br>物理层主要任务：确定与传输媒体<code>接口</code>有关的一些特性</p><ul><li>机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、<code>引脚数量</code>和排列情况。</li><li>电气特性：规定传输二进制位时，线路上信号的<code>电压范围</code>、阻抗匹配、传输<code>速率</code>和<code>距离</code>限制等。</li><li>功能特性：指明某条线上出现的某一<code>电平表示何种意义</code>，接口部件的信号线的用途。</li><li>规程特性（过程特性）：定义各条物理线路的工作<code>规程和时序</code>关系</li></ul><h3 id="数据通信基础概念"><a href="#数据通信基础概念" class="headerlink" title="数据通信基础概念"></a>数据通信基础概念</h3><h4 id="典型的数据通信模型"><a href="#典型的数据通信模型" class="headerlink" title="典型的数据通信模型"></a>典型的数据通信模型</h4><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/dcfc2ba8a7d5d1e222e8be2ea6e6b78b.png"></p><p>通信的目的是传送消息。<br>数据：传送信息的实体，通常是有意义的符号序列。<br>信号：数据的电气/电磁的表现，是数据在传输过程中的存在形式。</p><ul><li>数字信号：代表消息的参数取值是离散的。    - 模拟信号：代表消息的参数取值是连续的。</li></ul><p>信源：产生和发送数据的源头。<br>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p><h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><p>从通信双方信息的交互方式看，可以有三种基本方式：</p><ul><li>单工通信只有一个方向的通信而没有反方向的交互，仅需要一一条信道。</li><li>半双工通信通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道。</li><li>全双工通信通信双方可以同时发送和接受信息，也需要两条信道。</li></ul><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><ul><li>串行传输<ul><li>速度慢，费用低，适合远距离</li></ul></li><li>并行传输<ul><li>速度快，费用高，适合近距离</li></ul></li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/c45684f0736a31c6a9515c2f546187b3.png"></p><h4 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h4><p><code>码元</code>是指用一个<code>固定时长</code>的<code>信号波形</code>（数字脉冲），代表不同离散数值的基本波形，是数字通信中数字信号的<code>计量单位</code>，这个时长内的信号称为<code>k进制码元</code>，而该时长称为<code>码元宽度</code>。当码元的离散状态有 M 个时（M 大于 2），此时码元为 M 进制码元。<br><code>1码元可以携带多个比特的信息量</code>。例如，在使用二进制编码时，只有两种不同的码元，一种代表 0 状态，另 - 一种代表 1 状态。在四进制码元中，一个码元就由 2 比特组成。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/4a5eda03b690c8ebe8bd258be92a0d97.png"></p><h4 id="速率，波特，带宽"><a href="#速率，波特，带宽" class="headerlink" title="速率，波特，带宽"></a>速率，波特，带宽</h4><p>速率也叫数据率，是指数据的<code>传输速率</code>，表示单位时间内传输的数据量。可以用码元传输速率和信息传输速率表示。<br><code>传输速率</code>是主机上发出的速率，而<code>传播速率</code>是在信道上的传播速率。两者是不同的概念</p><ul><li><strong>码元传输速率</strong><code>1s传输多少个码元</code>：别名<code>码元速率</code>、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数（也可称为<code>脉冲个数</code>或<code>信号变化的次数</code>），单位是<code>波特</code>（Baud）。1 波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。</li><li><strong>信息传输速率</strong><code>1s传输多少个比特</code>：别名<code>信息速率</code>、比特率等，表示单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特/秒（b/s）。</li></ul><p><strong>关系：若一个码元携带<code>n bit</code>的信息量，则<code>M Baud</code>的码元传输速率所对应的信息传输速率为<code>M * n bit/s</code>。</strong></p><p>带宽 (是个理想值)：表示在单位时间内从网络中的某一点到另一 点所能通过的“<code>最高数据率</code>”，常用来表示网络的通信线路所能传输数据的能力。单位是 b/s。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/aa1b08e1a99ea7fd84c0375d303b3afa.png"></p><p>4 进制表示码元有 4 种波形，只需要 2 位就可以表示 4 种波形，同理 16 进制需要 4 位表示。</p><h3 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h3><h4 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h4><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/8c49c7fd87d8971741228463c0bb1639.png"></p><p>影响失真程度的因素：</p><ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传输媒体质量</li></ul><h4 id="码间串扰"><a href="#码间串扰" class="headerlink" title="码间串扰"></a>码间串扰</h4><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/74aab08e792d5be066e1fb82ad251ab6.png"></p><p>频率太低，会容易受到传输距离，噪声的干扰，从而更容易失真，所以不允许通过<br>频率太高，不容易区分码元之间的区别</p><p><strong>码间串扰</strong>：接收端收到的信号波形<code>失去了码元之间清晰界限</code>的现象。</p><h4 id="奈氏准则-1"><a href="#奈氏准则-1" class="headerlink" title="奈氏准则"></a>奈氏准则</h4><p><strong>奈氏准则</strong>：在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为<code>2W Baud</code>，W 是信道带宽，单位是<code>Hz</code>。(<code>只有在奈氏准则和香农定理中的带宽采用Hz</code>)</p><p>理想低通信道下的极限数据传输率 =$2Wlog_2V$(b/s)<br>W:带宽，V：码元的离散电平数目（几种码元）</p><p>1.在任何信道中，<code>码元传输的速率是有上限的</code>。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。<br>2.信道的<code>频带越宽</code>（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输。<br>3.<strong>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</strong>。<br>4.由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用<code>多元制的调制</code>方法。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">练习：在无噪声的情况下，若某通信链路的带宽为3kHz，采用4个相位，每个相位具有4种振幅的QAM调制技术，则该通信链路的最大数据传输率是多少？<br>答：信号有4 x <span class="hljs-attribute">4</span>=16种变化<br>最大数据传输率=2 x 3k <span class="hljs-attribute">x4</span>=24kb/s<br></code></pre></td></tr></table></figure><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p>噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，<code>信噪比</code>就很重要。</p><p>信噪比 = <code>信号</code>的平均功率 / <code>噪声</code>的平均功率，常记为 S/N，并用分贝（dB）作为度量单位，即：<br>$$dB = 10log_{10}(S/N)$$</p><p><strong>香农定理</strong>：在<code>带宽受限</code>且<code>有噪声</code>的信道中，为了不产生误差，信息的数据传输速率有上限值。<br> 信道的极限传输速率 = $Wlog_2(1+S/N)$(b/s)</p><p> 1.信道的<code>带宽</code>或信道中的<code>信噪比越大</code>，则信息的<code>极限传输速率就越高</code>。<br> 2.对一定的传输带宽和一 - 定的信噪比，信息传输速率的上限就确定了。<br> 3.只要信息的传输速率<code>低于信道的极限传输速率</code>，就一定能找到某种方法来实现<code>无差错的传输</code>。<br> 4.香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。<br>5.从香农定理可以看出，若信道带宽 W 或信噪比 S/N 没有上限（不可能），那么信道的极限信息传输速率也就没有上限。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">练习：电话系统的典型参数是信道带宽为<span class="hljs-number">3000</span>Hz，信噪比为<span class="hljs-number">30</span><span class="hljs-built_in">dB</span>，则该系统最大数据传输速率是多少？<br><br>答：<span class="hljs-number">30</span><span class="hljs-built_in">dB</span>=<span class="hljs-number">10</span>log1o（S/<span class="hljs-built_in">N</span>）则S/<span class="hljs-built_in">N</span>=<span class="hljs-number">1000</span><br>信道的极限数据传输速率=Wlog2（<span class="hljs-number">1</span>+S/<span class="hljs-built_in">N</span>）=<span class="hljs-number">3000</span> x log2（<span class="hljs-number">1</span>+<span class="hljs-number">1000</span>）&gt;<span class="hljs-number">30</span>kb/s<br></code></pre></td></tr></table></figure><p><strong>当题目中既给出了码元信息，又给了信噪比信息，就需要用两个公式都算一下，取最小值</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">题目：二进制信号在信噪比为<span class="hljs-number">127</span>：<span class="hljs-number">1</span>的<span class="hljs-number">4</span>kHz信道上传输，最大的数据速率可达到多少？<br>答：<br>Nice：<span class="hljs-number">2</span> X <span class="hljs-number">4000</span>X <span class="hljs-built_in">log2</span>=<span class="hljs-number">8000</span>b/s<br>香浓：<span class="hljs-number">4000</span> <span class="hljs-built_in">log2</span>（<span class="hljs-number">1</span>+<span class="hljs-number">127</span>）=<span class="hljs-number">28000</span>b/s<br></code></pre></td></tr></table></figure><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><h4 id="基带信号与宽带信号"><a href="#基带信号与宽带信号" class="headerlink" title="基带信号与宽带信号"></a>基带信号与宽带信号</h4><p>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p><p>信道上传输的信号</p><ul><li>基带信号<br>将数字信号 1 和 0 直接用两种不同的电压表示，再送到<code>数字信道</code>上去传输（基带传输）来<code>自信源的信号</code>，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的<code>直接表达了要传输的信息的信号</code>，比如我们说话的声波就是基带信号。</li><li>宽带信号<br>将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）。<br>把基带信号经过<code>载波调制</code>后，把信号的<code>频率范围搬移</code>到<code>较高的频段</code>以便在信道中传输（即仅在一段频率范围内能够通过信道）</li></ul><p>在<strong>传输距离较近时</strong>，计算机网络采用<strong>基带传输方式</strong>（近距离衰减小，从而信号内容不易发生变化）<br>在<strong>传输距离较远时</strong>，计算机网络采用<strong>宽带传输方式</strong>（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）</p><h4 id="编码与调制-1"><a href="#编码与调制-1" class="headerlink" title="编码与调制"></a>编码与调制</h4><p>编码：数字数据-》数字信号（数字发送器）<br>调制：数字数据-》模拟信号（调制器）</p><p>编码：模拟数据-》数字信号（PCM 编码器）<br>调制：模拟数据-》模拟信号（放大器调制器）</p><h5 id="数字数据-》数字信号"><a href="#数字数据-》数字信号" class="headerlink" title="数字数据-》数字信号"></a>数字数据-》数字信号</h5><ul><li>非归零编码（NRZ）（<code>高1低0</code>）<br>编码容易实现，但没有检错功能，且<code>无法判断一-个码元的开始和结束</code>，以至于收发双方难以保持同步。一个码元内电平不会跳变。</li><li>归零编码（RZ）<br>信号电平在一一个码元之内都要恢复到零的这种编码成编码方式。</li><li>反向不归零编码（NRZI）<br>信号电平翻转表示 0，信号电平不。变表示 1。一个码元内电平不会跳变。</li><li>曼彻斯特编码（<code>前高后低1，前低后高为0</code>）<br>将一个码元分成两个相等的间隔，前一个间隔为低电平后 - 一个间隔为高电平表示码元 1；码元 0 则正好相反。也可以采用相反的规定。该编码的特点是在每–个码元的中间出现电平跳变，位中间的跳变既作时钟信号（可用于同步），又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。每一个码元都被调成两个电平，所以<code>数据传输速率只有调制速率的1/2</code>。</li><li>差分曼彻斯特编码（<code>同1异0</code>）<br>常用于局域网传输，其规则是：若码元为 1，则前半个码元的电平与上一个码元的后半个码元的电平相同，若为 0，则相反。该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现<code>自同步</code>，且<code>抗干扰性强于曼彻斯特编码</code>。</li><li>4B/5B编码<br>比特流中插入额外的比特以打破连串的 0 或 1，就是用 5 个比特来编码 4 个比特的数据，之后再传给接收方，因此称为 4B/5B。编码效率为 80%。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/2f59ff009651b57f47c33471a365e382.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/8badc86efb3d58ed7a7e9a2ccde5afa9.png"></p><h5 id="数字数据-》模拟信号"><a href="#数字数据-》模拟信号" class="headerlink" title="数字数据-》模拟信号"></a>数字数据-》模拟信号</h5><p>数字数据调制技术在发送端将<code>数字信号转换为模拟信号</code>，而在接收端将<code>模拟信号还原为数字信号</code>，分别对应于调制解调器的<code>调制</code>和<code>解调</code>过程。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/374733a7484818df12c798c997ecab87.png"></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">例：某通信链路的波特率是<span class="hljs-number">1200</span>Baud，采用<span class="hljs-number">4</span>个相位，每个相位有<span class="hljs-number">4</span>种振幅的QAM调制技术，则该链路的信息传输速率是多少？<br>答：<span class="hljs-number">4</span>个相位<span class="hljs-number">4</span>种振幅也就是说有<span class="hljs-number">16</span>个码元。<span class="hljs-number">16</span>个码元也就是<span class="hljs-number">16</span>个状态，需要<span class="hljs-number">4</span>位来表示。也就是<span class="hljs-number">1</span>码元对应<span class="hljs-number">4</span><span class="hljs-keyword">bit</span>。题目中波特率是<span class="hljs-number">1200</span>，也就说明<span class="hljs-number">1200</span>*<span class="hljs-number">4</span>=<span class="hljs-number">4800</span><span class="hljs-keyword">bit</span>/s。<br></code></pre></td></tr></table></figure><h5 id="模拟数据-》数字信号"><a href="#模拟数据-》数字信号" class="headerlink" title="模拟数据-》数字信号"></a>模拟数据-》数字信号</h5><p>计算机内部处理的是二进制数据，处理的都是<code>数字音频</code>，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列（即实现<code>音频数字化</code>）。<br>最典型的例子就是对音频信号进行编码的<code>脉码调制</code>（PCM），在计算机应用中，能够达到<code>最高保真水平</code>的就是 PCM 编码，被广泛用于素材保存及音乐欣赏，CD、DVD 以及我们常见的<code>WAV文件</code>中均有应用。它主要包括三步：抽样、量化、编码。</p><ul><li>抽样<br>对模拟信号<code>周期性扫描</code>，把时间上连续的信号变成时间上离散的信号。为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理采样：<code>采样频率 &gt;= 2*信号最高频率</code></li><li>量化<br>把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并<code>取整数</code>，这就把连续的电平幅值转换为离散的数字量。</li><li>编码<br>把量化的结果转换为与之对应的二进制编码。</li></ul><h5 id="模拟数据-》模拟信号"><a href="#模拟数据-》模拟信号" class="headerlink" title="模拟数据-》模拟信号"></a>模拟数据-》模拟信号</h5><p>为了实现<code>传输的有效性</code>，可能需要较高的频率。这种调制方式还可以使用频分复用技术，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输的。</p><h4 id="传输介质及分类"><a href="#传输介质及分类" class="headerlink" title="传输介质及分类"></a>传输介质及分类</h4><p>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的<code>物理通路</code>。传输媒体并不是物理层。<br>传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为 0 层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思。但物理层规定了<code>电气特性</code>，因此能够识别所传送的比特流。</p><p>传输介质</p><ul><li>导向性：电磁波被导向沿着固体媒介传播</li><li>非导向性：空气，海水等</li></ul><h5 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h5><p>双绞线是古老、又最常用的传输介质，它由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。<code>绞合可以减少对相邻导线的电磁干扰</code>。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/f2e78b6a0ef702d0b739df620de5315f.png"></p><p>双绞线价格便宜，是最常用的传输介质之一，在局域网和传统电话网中普遍使用。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里。距离太远时，对于<code>模拟传输</code>，要用<code>放大器</code>放大衰减的信号；对于<code>数字传输</code>，要用<code>中继器</code>将失真的信号整形。</p><h5 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h5><p>同轴电缆由<code>导体铜质芯线</code>、<code>绝缘层</code>、<code>网状编织屏蔽层</code>和<code>塑料外层构成</code>。按特性阻抗数值的不同，通常将同轴电缆分为两类：50$\Omega$同轴 电缆和 75$\Omega$同轴电缆。其中，50$\Omega$同轴电缆主要用于传送基带数字信号，又称为<code>基带同轴电缆</code>，它在局域网中得到广泛应用；75$\Omega$同轴电缆主要用于传送宽带信号，又称为<code>宽带同轴电缆</code>，它主要用于有线电视系统。</p><p>由于外导体屏蔽层的作用，同轴电缆<code>抗干扰特性比双绞线好</code>，被厂泛用于传输较高速率的数据，其传输距离更远，但价格较双绞线贵</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/26ee48fc0439a698939d57379bd37f75.png"></p><h5 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h5><p>光纤通信就是利用光导纤维（简称光纤）传递<code>光脉冲</code>来进行通信。有光脉冲表示 1，无光脉冲表示 0。而可见光的频率大约是 108MHz，因此光纤通信系统的<code>带宽远远大于</code>目前其他各种传输媒体的带宽。</p><p>光纤主要由<code>纤芯</code>（实心的！）和包层构成，光波<code>通过纤芯进行传导</code>，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，如果入射角足够大，就会出现<code>全反射</code>，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/17d42048d440c46bfca2dd72b5647f52.png"></p><p>光纤特点：</p><ul><li>传输损耗小，中继距离长，对<code>远距离</code>传输特别经济。</li><li><code>抗</code>雷电和电磁<code>干扰性</code>能好。</li><li>无串音干扰，<code>保密性好</code>，也不易被窃听或截取数据。</li></ul><h5 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h5><p>信号<code>所有方向</code>都能传播</p><p>较强<code>穿透能力</code>，可传远距离，广泛用于通信领域（如手机通信）。</p><h5 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h5><p>信号<code>固定</code>方向传播</p><p>微波通信频率较高、频段范围宽，因此数据率很高</p><p>优点：</p><ul><li>通信容量大</li><li>距离远</li><li>覆盖广</li><li>广播通信和多址通信</li></ul><p>缺点：</p><ul><li>传播时延长（250-270ms）</li><li>受气候影响大（eg：强风太阳黑子爆发、日凌）X 信</li><li>误码率较高</li><li>成本高</li></ul><h5 id="红外线，激光"><a href="#红外线，激光" class="headerlink" title="红外线，激光"></a>红外线，激光</h5><p>信号<code>固定</code>方向传播</p><p>要把要传输的信号分别<code>转换为各自的信号格式</code>，即红外光信号和激光信号，再在空间中传播。</p><h4 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h4><h5 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h5><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/4d060bedc81f82a7fac50aa8453e55c1.png"><br><strong>诞生原因</strong>：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到–定程度时将造成信号失真，因此会导致接收错误。<br><strong>中继器的功能</strong>(<code>再生数字信号</code>)：对信号进行<code>再生</code>和<code>还原</code>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。<br><strong>中继器两端</strong>：适用于完全相同的两类网络的互连，速率要相同，只做转发不做检测，可以连接不同设备，两端是同一个协议<br><strong>5-4-3</strong>规则：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。<br><code>5个网段-4个中继器-3个设备</code></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/2881413b433a3331f4f45bbe9859d1b9.png"></p><h5 id="集线器（多口中继器）"><a href="#集线器（多口中继器）" class="headerlink" title="集线器（多口中继器）"></a>集线器（多口中继器）</h5><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/06/10/1c56eea785903e1e349f8dfc242a80e2.png"></p><p><strong>功能</strong>：再生与放大信号<br>不能分割冲突域，连接在集线器上的工作主机平分带宽</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 插件 REST Client 使用文档</title>
    <link href="http://example.com/2023/03/24/VSCode%20%E6%8F%92%E4%BB%B6%20REST%20Client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2023/03/24/VSCode%20%E6%8F%92%E4%BB%B6%20REST%20Client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</id>
    <published>2023-03-24T11:59:35.000Z</published>
    <updated>2023-08-17T14:52:54.949Z</updated>
    
    <content type="html"><![CDATA[<p>REST Client 是 VSCode 中一款非常好用的插件，能够帮助开发人员快速、方便地发送 HTTP 请求并查看响应。在本文中，我们将会详细介绍 REST Client 的使用方法。</p><h2 id="安装-REST-Client-插件"><a href="#安装-REST-Client-插件" class="headerlink" title="安装 REST Client 插件"></a>安装 REST Client 插件</h2><p>在 VSCode 中，你可以通过以下步骤安装 REST Client 插件：</p><ul><li>打开 VSCode；</li><li>点击左侧的插件图标（Ctrl+Shift+X）；</li><li>搜索“REST Client”插件；</li><li>点击“安装”按钮。</li><li>发送 HTTP 请求</li></ul><p>使用 REST Client 插件发送 HTTP 请求非常简单。你只需要创建一个新的<code>.rest</code>文本文件，将请求信息放入其中，然后使用快捷键<code>Ctrl + Alt + R</code> 或者右键菜单的 <code>Send Request</code> 选项发送请求。</p><p>下面是一个简单的 <code>GET</code> 请求的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1</span><br></pre></td></tr></table></figure><p>这个请求会获取 JSONPlaceholder API 中的一篇博客文章。</p><p>如果你想添加请求头或请求体，可以使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;foo&quot;,</span><br><span class="line">  &quot;body&quot;: &quot;bar&quot;,</span><br><span class="line">  &quot;userId&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个请求会在请求头中添加 <code>Content-Type</code> 头，请求体中包含 JSON 数据。</p><h2 id="查看响应"><a href="#查看响应" class="headerlink" title="查看响应"></a>查看响应</h2><p>发送请求后，你可以在编辑器底部看到响应信息。如果你想查看响应头、响应体或状态码等详细信息，可以使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">###</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;userId&quot;: 1,</span><br><span class="line">  &quot;id&quot;: 1,</span><br><span class="line">  &quot;title&quot;: &quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;,</span><br><span class="line">  &quot;body&quot;: &quot;quia et suscipit\nsuscipit...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，###用来分隔请求和响应，这样你就可以很方便地查看请求和响应的详细信息了。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>REST Client 插件还支持变量的使用。你可以使用${variable}语法来定义变量，然后在请求中使用它们。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@host = https://jsonplaceholder.typicode.com</span><br><span class="line"></span><br><span class="line">GET $&#123;host&#125;/posts/1 HTTP/1.1</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为 <code>host</code> 的变量，并在请求中使用它来指定 API 的基础 URL。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>如果你需要发送多个请求，REST Client 插件支持循环语法。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@host = https://jsonplaceholder.typicode.com</span><br><span class="line"></span><br><span class="line">@for(i,1,10)&#123;</span><br><span class="line">    GET $&#123;host&#125;/posts/$&#123;i&#125; HTTP/1.1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用@for 语法来发送 10 个 GET 请求，每个请求 URL 中的 i 变量从 1 到 10 依次递增。</p><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>如果你需要根据条件发送请求，REST Client 插件也支持条件语句。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@host = https://jsonplaceholder.typicode.com</span><br><span class="line"></span><br><span class="line">@if(isDebug)&#123;</span><br><span class="line">    GET $&#123;host&#125;/posts/1 HTTP/1.1</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    GET $&#123;host&#125;/posts/2 HTTP/1.1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用@if 语法来判断是否为调试模式，如果是就发送一个请求，否则发送另一个请求。</p><h2 id="导入环境变量"><a href="#导入环境变量" class="headerlink" title="导入环境变量"></a>导入环境变量</h2><p>REST Client 插件支持从外部文件中导入环境变量。例如，你可以在<code>.env</code> 文件中定义变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host=https://jsonplaceholder.typicode.com</span><br><span class="line">isDebug=true</span><br></pre></td></tr></table></figure><p>然后在请求文件中使用<code>@environment</code> 语法来导入这些变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@environment .env</span><br><span class="line"></span><br><span class="line">@if(isDebug)&#123;</span><br><span class="line">    GET $&#123;host&#125;/posts/1 HTTP/1.1</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    GET $&#123;host&#125;/posts/2 HTTP/1.1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用<code>@environment</code> 语法从<code>.env</code> 文件中导入环境变量，然后在请求文件中使用这些变量。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>REST Client 插件是一个非常好用的工具，能够帮助开发人员快速、方便地发送 HTTP 请求并查看响应。在本文中，我们介绍了 REST Client 的基本使用方法，包括发送请求、查看响应、使用变量、循环、条件语句和导入环境变量等。希望这篇文章能够帮助你更好地使用 REST Client 插件。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;REST Client 是 VSCode 中一款非常好用的插件，能够帮助开发人员快速、方便地发送 HTTP 请求并查看响应。在本文中，我们将会详细介绍 REST Client 的使用方法。&lt;/p&gt;
&lt;h2 id=&quot;安装-REST-Client-插件&quot;&gt;&lt;a href=&quot;#安</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="VSCode" scheme="http://example.com/tags/VSCode/"/>
    
    <category term="后端开发" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>WSL2 安装 Docker</title>
    <link href="http://example.com/2023/03/16/WSL2%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://example.com/2023/03/16/WSL2%E5%AE%89%E8%A3%85Docker/</id>
    <published>2023-03-16T14:19:00.000Z</published>
    <updated>2023-03-16T14:19:45.140Z</updated>
    
    <content type="html"><![CDATA[<p>在 WSL2 中，你可能会遇到与 Docker 服务相关的问题，因为 WSL2 与传统 Linux 系统在某些方面有所不同。在这种情况下，你可以尝试以下步骤来解决问题：</p><ol><li>首先，确保你已经安装了 WSL2 的最新版本。你可以通过运行以下命令来更新 WSL2：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">wsl --update<br></code></pre></td></tr></table></figure><ol start="2"><li>确保 Docker Desktop for Windows 已安装并启用 WSL2 集成。你可以在 Docker Desktop 设置中找到这个选项。确保你的 WSL2 发行版已被添加到 Docker Desktop 的 WSL 集成列表中。点击链接下载安装<a href="https://dockerdocs.cn/docker-for-windows/install/">在 Windows 上安装 Docker 桌面</a>。</li><li>在 WSL2 中，尝试手动停止 Docker 服务：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo /etc/init.d/docker stop<br></code></pre></td></tr></table></figure><pre><code class="hljs">如果这个命令无法停止 Docker 服务，请尝试以下命令：</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo killall dockerd<br></code></pre></td></tr></table></figure><ol start="4"><li>卸载 Docker：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt-get purge docker-ce<br></code></pre></td></tr></table></figure><ol start="5"><li>删除 Docker 相关的文件和目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo rm -rf /var/lib/docker<br></code></pre></td></tr></table></figure><ol start="6"><li>重新启动 WSL2：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">wsl --shutdown<br></code></pre></td></tr></table></figure><ol start="7"><li>然后重新打开 WSL2。</li><li>在 WSL2 中，不要直接安装 Docker CE。而是使用 Docker Desktop for Windows 提供的 Docker 服务。这意味着你不需要在 WSL2 中安装 Docker CE，因为 Docker Desktop 已经提供了 Docker 服务。</li><li>确保你的 WSL2 发行版可以访问 Docker Desktop 提供的 Docker 服务。你可以通过运行以下命令来检查：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">docker --version<br><br>docker info<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 WSL2 中，你可能会遇到与 Docker 服务相关的问题，因为 WSL2 与传统 Linux 系统在某些方面有所不同。在这种情况下，你可以尝试以下步骤来解决问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，确保你已经安装了 WSL2 的最新版本。你可以通过运行以下命令来更新 W</summary>
      
    
    
    
    
    <category term="WSL2" scheme="http://example.com/tags/WSL2/"/>
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>一生一芯笔记</title>
    <link href="http://example.com/2023/03/12/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/03/12/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-12T04:58:15.000Z</published>
    <updated>2023-04-02T09:32:19.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一生一芯概述"><a href="#一生一芯概述" class="headerlink" title="一生一芯概述"></a>一生一芯概述</h1><p><a href="https://www.bilibili.com/video/BV12e4y1Y76i/?spm_id_from=333.788&vd_source=7ff88341de4b5111bdf3db48b4e9ca44">“一生一芯”概述 _哔哩哔哩_bilibili</a></p><h1 id="程序的执行和模拟器"><a href="#程序的执行和模拟器" class="headerlink" title="程序的执行和模拟器"></a>程序的执行和模拟器</h1><h2 id="freestanding-运行时环境"><a href="#freestanding-运行时环境" class="headerlink" title="freestanding 运行时环境"></a>freestanding 运行时环境</h2><h3 id="程序如何结束运行"><a href="#程序如何结束运行" class="headerlink" title="程序如何结束运行"></a>程序如何结束运行</h3><p>在正常的环境中，写了一段代码<code>return</code>之后，实际上调用了一个系统调用<code>exit</code>。但是在 freestanding 环境中，没有操作系统支持，根据 C99 手册规定，在 freestanding 环境中结束运行是由用户实现决定的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">5.1.2.1 Freestanding environment<br><br>2 The effect of program termination in a freestanding environment is<br>implementation-defined.<br></code></pre></td></tr></table></figure><p>在 qemu-system-riscv64 中的 virt 机器模型中，往一个特殊的地址写入一个特殊的“暗号”即可结束 QEMU</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-keyword">void</span> _start() &#123;<br>  <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">uint8_t</span> *p = (<span class="hljs-keyword">uint8_t</span> *)(<span class="hljs-keyword">uintptr_t</span>)<span class="hljs-number">0x10000000</span>;<br>  *p = <span class="hljs-string">&#x27;A&#x27;</span>;<br>  <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">uint32_t</span> *<span class="hljs-built_in">exit</span> = (<span class="hljs-keyword">uint32_t</span> *)(<span class="hljs-keyword">uintptr_t</span>)<span class="hljs-number">0x100000</span>;<br>  *<span class="hljs-built_in">exit</span> = <span class="hljs-number">0x5555</span>;   <span class="hljs-comment">// magic number</span><br>  _start();         <span class="hljs-comment">// 递归调用，如果正常退出将不会再次打印A</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在自制-freestanding-运行时环境上运行-Hello-程序"><a href="#在自制-freestanding-运行时环境上运行-Hello-程序" class="headerlink" title="在自制 freestanding 运行时环境上运行 Hello 程序"></a>在自制 freestanding 运行时环境上运行 Hello 程序</h3><p>QEMU 虽然是个开源项目，但还挺复杂，不利于我们理解细节。让我们来设计一个面向 RISC-V 程序的简单 freestanding 运行时环境，我做以下约定。</p><ul><li>程序从地址 0 开始执行</li><li>只支持两条指令<ul><li>addi 指令</li><li>ebreak 指令<ul><li>寄存器 a0=0 时，输出寄存器 a1 低 8 位的字符</li><li>寄存器 a0=1 时，结束运行<ul><li>ABI Mnemonic（RISC-V 官方为每个寄存器起个名字）</li></ul></li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ebreak</span><span class="hljs-params">(<span class="hljs-keyword">long</span> arg0, <span class="hljs-keyword">long</span> arg1)</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;addi a0, x0, %0;&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-string">&quot;addi a1, x0, %1;&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">               <span class="hljs-string">&quot;ebreak&quot;</span> : : <span class="hljs-string">&quot;i&quot;</span>(arg0), <span class="hljs-string">&quot;i&quot;</span>(arg1))</span></span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putch</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123; ebreak(<span class="hljs-number">0</span>, ch); &#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">halt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span> </span>&#123; ebreak(<span class="hljs-number">1</span>, code); <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>); &#125;<br><br><span class="hljs-keyword">void</span> _start() &#123;<br>  putch(<span class="hljs-string">&#x27;A&#x27;</span>);<br>  halt(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 这段代码定义了三个函数：ebreak、putch 和 halt。</span><br><span class="hljs-comment"> * ebreak 函数是一个内联汇编函数，它执行 ebreak 指令。</span><br><span class="hljs-comment"> * 该指令是 RISC-V 架构中的一条调试指令，可以在调试器的控制下执行。</span><br><span class="hljs-comment"> * 该函数接受两个参数 arg0 和 arg1，它们将被存储在寄存器 a0 和 a1 中。</span><br><span class="hljs-comment"> * putch 函数调用了 ebreak 函数，并将第一个参数设为 0，</span><br><span class="hljs-comment"> * 第二个参数设为函数参数 ch。这样做的目的可能是为了在调试器的控制下输出一个字符。</span><br><span class="hljs-comment"> * halt 函数调用了 ebreak 函数，并将第一个参数设为 1，</span><br><span class="hljs-comment"> * 第二个参数设为函数参数 code。这样做的目的可能是为了通知调试器程序已经结束，</span><br><span class="hljs-comment"> * 并使用 code 作为结束状态。然后，halt 函数进入一个死循环，等待调试器的操作。</span><br><span class="hljs-comment"> * 最后，_start 函数调用了 putch 函数输出字符 &#x27;A&#x27;，然后调用 halt 函数结束程序 </span><br><span class="hljs-comment"> */</span> <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">riscv64-linux-gnu-gcc -march=rv64g -ffreestanding -nostdlib -static -Wl,-Ttext=0 \<br>  -O2 -o prog a.c<br></code></pre></td></tr></table></figure><ul><li><p>riscv64-linux-gnu-gcc: 这是 GCC 的可执行文件的名称，表示使用的是 GCC 编译器。riscv64-linux-gnu 是编译器的目标平台，表示生成的代码是针对 RISC-V 架构，运行在 Linux 系统上的二进制文件。</p></li><li><p>-march=rv64g: 这个参数指定了编译器使用的指令集。rv64g 表示使用 RISC-V 架构的 64 位指令集。</p></li><li><p>-ffreestanding: 这个参数指示编译器生成的代码将在 freestanding 运行环境中运行。在 freestanding 运行环境中，程序不会自动链接标准 C 库，也不会自动调用 main 函数。</p></li><li><p>-nostdlib: 这个参数表示编译器不需要链接标准 C 库。</p></li><li><p>-static: 这个参数表示生成的代码是静态链接的。</p></li><li><p>-Wl,-Ttext=0: 这个参数是传递给链接器的，表示设置代码段的起始地址为 0。</p></li><li><p>-O2: 这个参数指示编译器使用优化级别为 2 的优化选项。</p></li><li><p>-o prog: 这个参数指定生成的可执行文件的名称为 prog。</p></li><li><p>a.c: 这是要编译的 C 源文件的名称。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llvm-objdump -d prog<br></code></pre></td></tr></table></figure><p>反汇编结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">prog:   file format elf64-littleriscv<br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;_start&gt;:<br>       0: 13 05 00 00   li      a0, 0<br>       4: 93 05 10 04   li      a1, 65<br>       8: 73 00 10 00   ebreak<br>       c: 13 05 10 00   li      a0, 1<br>      10: 93 05 00 00   li      a1, 0<br>      14: 73 00 10 00   ebreak<br>      18: 6f 00 00 00   j       0x18 &lt;_start+0x18&gt;<br></code></pre></td></tr></table></figure><p>我们约定中没有<code>li</code>指令，但是汇编中却出现了，这是因为<code>li</code>是一条伪指令，它的实际实现依然是<code>addi</code>。如果不使用伪指令可以使用以下命令反汇编：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">llvm-objdump -M no-aliases -d prog<br></code></pre></td></tr></table></figure><p>结果如下，没有伪指令，只有我们约定的几条指令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">prog:   file format elf64-littleriscv<br><br>Disassembly of section .text:<br><br>0000000000000000 &lt;_start&gt;:<br>       0: 13 05 00 00   addi    a0, zero, 0<br>       4: 93 05 10 04   addi    a1, zero, 65<br>       8: 73 00 10 00   ebreak<br>       c: 13 05 10 00   addi    a0, zero, 1<br>      10: 93 05 00 00   addi    a1, zero, 0<br>      14: 73 00 10 00   ebreak<br>      18: 6f 00 00 00   jal     zero, 0x18 &lt;_start+0x18&gt;<br></code></pre></td></tr></table></figure><h2 id="YEMU-指令如何执行"><a href="#YEMU-指令如何执行" class="headerlink" title="YEMU 指令如何执行"></a>YEMU 指令如何执行</h2><p>ISA 手册定义了一个状态机。</p><ul><li><p>状态集合 S = {&lt;R, M&gt;}</p><ul><li>R = {PC, x0, x1, x2, …}<ul><li>RISC-V 手册 -&gt; 2.1 Programmers’Model for Base Integer ISA</li><li>PC = 程序计数器 = 当前执行的指令位置</li></ul></li><li>M = 内存<ul><li>RISC-V 手册 -&gt; 1.4 Memory</li></ul></li></ul></li></ul><p>激励事件：执行 PC 指向的指令<br>状态转移规则：指令的语义 (semantics)<br>初始状态 S0 = &lt;R0, M0&gt;</p><p>我们只要把这个状态机实现出来，就可以用它来执行指令了！</p><h3 id="用变量实现内存"><a href="#用变量实现内存" class="headerlink" title="用变量实现内存"></a>用变量实现内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-keyword">uint64_t</span> R[<span class="hljs-number">32</span>], PC; <span class="hljs-comment">// according to the RISC-V manual</span><br><span class="hljs-keyword">uint8_t</span> M[<span class="hljs-number">64</span>];      <span class="hljs-comment">// 64-Byte memory</span><br></code></pre></td></tr></table></figure><p>Q: 为什么不使用 <code>int64_t</code> 和 <code>int8_t</code>?</p><p>A: C语言标准规定, 有符号数溢出是undefined behavior, 但无符号数不会溢出</p><blockquote><p>6.5 Expressions<br>5 If an exceptional condition occurs during the evaluation of an expression (that is,<br>if the result is not mathematically defined or not in the range of representable<br>values for its type), the behavior is undefined.<br>6.2.5 Types<br>9 A computation involving unsigned operands can never overflow, because a result that<br>cannot be represented by the resulting unsigned integer type is reduced modulo the<br>number that is one greater than the largest value that can be represented by the<br>resulting type.</p></blockquote><h3 id="用语句实现指令的语义"><a href="#用语句实现指令的语义" class="headerlink" title="用语句实现指令的语义"></a>用语句实现指令的语义</h3><p>指令周期 (instruction cycle): 执行一条指令的步骤</p><ul><li>取指 (fetch): 从 PC 所指示的内存位置读取一条指令</li><li>译码 (decode): 按照手册解析指令的操作码 (opcode) 和操作数 (operand)</li><li>执行 (execute): 按解析出的操作码，对操作数进行处理</li><li>更新 PC: 让 PC 指向下一条指令</li></ul><p>状态机不断执行指令，直到结束运行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-keyword">bool</span> halt = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">while</span> (!halt) &#123;<br>  inst_cycle();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> 31           20 19 15 14 12 11  7 6       0<br>+---------------+-----+-----+-----+---------+<br>|   imm[11:0]   | rs1 | 000 | rd  | 0010011 |    ADDI<br>+---------------+-----+-----+-----+---------+<br>+---------------+-----+-----+-----+---------+<br>| 000000000001  |00000| 000 |00000| 1110011 |   EBREAK<br>+---------------+-----+-----+-----+---------+<br></code></pre></td></tr></table></figure><p>一个简单的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inst_cycle</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> inst = *(<span class="hljs-keyword">uint32_t</span> *)&amp;M[PC];<br>  <span class="hljs-keyword">if</span> (((inst &amp; <span class="hljs-number">0x7f</span>) == <span class="hljs-number">0x13</span>) &amp;&amp; ((inst &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x7</span>) == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// addi</span><br>    <span class="hljs-keyword">if</span> (((inst &gt;&gt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x1f</span>) != <span class="hljs-number">0</span>) &#123;<br>      R[(inst &gt;&gt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x1f</span>] = R[(inst &gt;&gt; <span class="hljs-number">15</span>) &amp; <span class="hljs-number">0x1f</span>] +<br>        (((inst &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0x7ff</span>) - ((inst &amp; <span class="hljs-number">0x80000000</span>) ? <span class="hljs-number">4096</span> : <span class="hljs-number">0</span>));<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (inst == <span class="hljs-number">0x00100073</span>) &#123; <span class="hljs-comment">// ebreak</span><br>    <span class="hljs-keyword">if</span> (R[<span class="hljs-number">10</span>] == <span class="hljs-number">0</span>) &#123; <span class="hljs-built_in">putchar</span>(R[<span class="hljs-number">11</span>] &amp; <span class="hljs-number">0xff</span>); &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (R[<span class="hljs-number">10</span>] == <span class="hljs-number">1</span>) &#123; halt = <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unsupported ebreak command\n&quot;</span>); &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unsupported instuction\n&quot;</span>); &#125;<br>  PC += <span class="hljs-number">4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="NEMU-代码导读"><a href="#NEMU-代码导读" class="headerlink" title="NEMU 代码导读"></a>NEMU 代码导读</h1><h2 id="make-项目构"><a href="#make-项目构" class="headerlink" title="make 项目构"></a>make 项目构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示make踪迹</span><br>strace make<br><span class="hljs-comment"># 显示构建过程</span><br>make -d<br><span class="hljs-comment"># 显示更详细的构建构过程</span><br>make --debug=v<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs text">Reading makefiles...<br>Reading makefile `Makefile&#x27;...<br>Updating goal targets....<br> File `all&#x27; does not exist.<br>   File `all&#x27; does not exist.<br>   Looking for an implicit rule for `all&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.c&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.cc&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.C&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.cpp&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.CPP&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.cxx&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.CXX&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.c++&#x27;.<br>   Trying pattern rule with stem `all&#x27;.<br>   Trying implicit prerequisite `all.C++&#x27;.<br>   No implicit rule found for `all&#x27;.<br>   Finished prerequisites of target file `all&#x27;.<br> Must remake target `all&#x27;.<br>gcc -o all all.o<br>Finished prerequisites of target file `all&#x27;.<br>Must remake target `all&#x27;.<br>gcc -o all all.o<br>Successfully remade target file `all&#x27;.<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只打印命令不执行</span><br>make -n<br><span class="hljs-comment"># 输出目标被构建的原因和执行的命令</span><br>make --trace<br></code></pre></td></tr></table></figure><p>例如，如果您有一个 makefile，其目标 <code>all</code> 依赖于目标 <code>foo</code> 和 <code>bar</code>，并且您运行 <code>make --trace all</code>，您可能会看到如下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">make[1]: Entering directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br>gcc -o foo foo.c<br>make[1]: Leaving directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br>make[1]: Entering directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br>gcc -o bar bar.c<br>make[1]: Leaving directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br>make[1]: Entering directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br>gcc -o all foo.o bar.o<br>make[1]: Leaving directory <span class="hljs-string">&#x27;/path/to/project&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -nB  <span class="hljs-comment"># -B 可以强制 make 构建所有目标，即使它们已经是最新的</span><br>make -nB | vim -<br></code></pre></td></tr></table></figure><p>在 vim 编辑器中进行二次处理，过滤不需要的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只保留 gcc 或 g++开头的行</span><br>:%!grep <span class="hljs-string">&quot;^\(gcc\|g++\)&quot;</span><br><br><span class="hljs-comment"># 将环境变量$NEMU_HOME 所指示字符串替换为$NEMU_HOME</span><br>:%!sed -e <span class="hljs-string">&quot;s+<span class="hljs-variable">$NEMU_HOME</span>+\$NEMU_HOME+g&quot;</span><br><br><span class="hljs-comment"># 将$NEMU_HOME/build/obj-riscv64-nemu-interpreter 替换为$OBJ_DIR</span><br>:%s+\<span class="hljs-variable">$NEMU_HOME</span>/build/obj-riscv64-nemu-interpreter+<span class="hljs-variable">$OBJ_DIR</span>+g<br><br><span class="hljs-comment"># 将-c 之前的内容替换为$CFLAGS</span><br>:%s/-O2.*=riscv64/<span class="hljs-variable">$CFLAGS</span>/g<br><br><span class="hljs-comment"># 将最后一行的空格替换成换行并缩进两格</span><br>:<span class="hljs-variable">$s</span>/  */\r  /g<br></code></pre></td></tr></table></figure><h1 id="调试技巧选将"><a href="#调试技巧选将" class="headerlink" title="调试技巧选将"></a>调试技巧选将</h1><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>在 C 程序中使用断言（assert）不会增加额外的内存空间，也不会增加数据段空间。断言是一种在运行时检查程序假设是否为真的方法，当断言失败时，程序会终止执行并显示错误信息。</p><p>在 C 语言中，断言通常使用宏来实现。它在编译时被解释为一个简单的条件语句，因此它不会增加程序的内存空间或数据段空间。断言宏的定义通常类似于以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> assert(expression) ((void)0)</span><br></code></pre></td></tr></table></figure><p>这里的 expression 是要检查的条件。如果 <code>expression</code> 为假，则 <code>assert()</code> 函数会发出错误消息并终止程序的执行。如果 <code>expression</code> 为真，则 <code>assert()</code> 函数不会产生任何操作，并且被解释为 <code>((void)0)</code>。这个语句不会增加任何内存或数据段空间。</p><p>需要注意的是，当一个程序使用大量的断言时，它可能会对程序的性能产生一些影响，因为每个断言都需要在运行时进行检查。因此，在生产环境中，应该尽可能减少使用断言，并在测试和调试阶段使用它们来确保代码的正<br>确性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// nemu/src/isa/riscv64/local-include/reg.h</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">check_reg_idx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>  IFDEF(CONFIG_RT_CHECK, assert(idx &gt;= <span class="hljs-number">0</span> &amp;&amp; idx &lt; <span class="hljs-number">32</span>));<br>  <span class="hljs-keyword">return</span> idx;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编译器工具-sanitizer"><a href="#编译器工具-sanitizer" class="headerlink" title="编译器工具 sanitizer"></a>编译器工具 sanitizer</h2><p>让编译器自动插入 assert, 拦截常见的非预期行为</p><ul><li>AddressSanitizer - 检查指针越界，use-after-free</li><li>ThreadSanitizer - 检查多线程数据竞争</li><li>LeakSanitizer - 检查内存泄漏</li><li>UndefinedBehaviorSanitizer - 检查 UB</li><li>还能检查指针的比较和相减</li></ul><p>打开后程序运行效率有所下降</p><ul><li>但调试的时候非常值得，躺着就能让工具帮你找 bug</li><li>man gcc 查看具体用法</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>GCC 提供了多种 Sanitizer 工具，可以帮助开发者在编译时检测和修复常见的编程错误，例如内存泄漏、缓冲区溢出、使用未初始化的变量等。以下是几个 Sanitizer 工具的示例用法：</p><ol><li><p>Address Sanitizer（ASAN）：检测内存错误，例如使用已经释放的内存、堆栈和全局缓冲区的溢出和下溢等。</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">gcc -fsanitize=address -g &lt;<span class="hljs-keyword">source</span> <span class="hljs-keyword">files</span>&gt; -<span class="hljs-keyword">o</span> &lt;output <span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>Undefined Behavior Sanitizer（UBSAN）：检测未定义行为，例如除以零、使用未初始化的变量、指针溢出等。</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">gcc -fsanitize=undefined -g &lt;<span class="hljs-keyword">source</span> <span class="hljs-keyword">files</span>&gt; -<span class="hljs-keyword">o</span> &lt;output <span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>Thread Sanitizer（TSAN）：检测并发问题，例如竞争条件、死锁等。</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">gcc -fsanitize=thread -g &lt;<span class="hljs-keyword">source</span> <span class="hljs-keyword">files</span>&gt; -<span class="hljs-keyword">o</span> &lt;output <span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>Memory Sanitizer（MSAN）：检测使用未初始化的内存，例如读取未初始化的内存、使用已释放的内存等。</p> <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">gcc -fsanitize=<span class="hljs-keyword">memory</span> -g &lt;<span class="hljs-keyword">source</span> files&gt; -o &lt;output <span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure></li></ol><p>需要注意的是，Sanitizer 工具可能会增加程序的执行时间和内存消耗，并且可能会产生误报，因此在生产环境中应该禁用 Sanitizer 工具。通常情况下，开发者可以在开发和测试阶段启用 Sanitizer 工具，以帮助他们发现和修复代码中的问题。</p><h2 id="自顶向下理解程序行为"><a href="#自顶向下理解程序行为" class="headerlink" title="自顶向下理解程序行为"></a>自顶向下理解程序行为</h2><pre><code class="hljs">ftrace - 函数调用层次，理解程序的大体行为itrace - 指令执行层次，理解指令级别的行为mtrace - 访存的踪迹dtrace - 设备访问的踪迹sdb - 灵活细致地检查客户程序的状态si - 细粒度的状态转移info r/x - 检查R/M监视点 - 捕捉某状态发生变化的时刻</code></pre><p>sdb 与 gdb 结合使用</p><pre><code class="hljs">先用 sdb 定位到出错点附近再用 gdb 观察 NEMU 的细节行为</code></pre><h2 id="程序的运行时间都花在了哪里"><a href="#程序的运行时间都花在了哪里" class="headerlink" title="程序的运行时间都花在了哪里"></a>程序的运行时间都花在了哪里</h2><p>Linux 的性能分析工具 perf 是一款功能强大的性能分析工具，它可以通过硬件计数器（Hardware counter）或者性能事件（Performance event）来对 Linux 系统的性能进行分析。以下是 perf 工具的安装和使用方法。</p><h3 id="安装-perf-工具"><a href="#安装-perf-工具" class="headerlink" title="安装 perf 工具"></a>安装 perf 工具</h3><p>在大部分 Linux 发行版中，perf 工具已经预先安装，如果没有预先安装，可以通过以下命令进行安装。</p><ul><li>Debian/Ubuntu 系统：<code>sudo apt-get install linux-tools-common linux-tools-generic</code></li><li>Fedora 系统：<code>sudo dnf install perf</code></li><li>CentOS/RHEL 系统：<code>sudo yum install perf</code></li></ul><p>安装完毕之后，可以通过 <code>perf version</code> 命令来检查 perf 版本信息。</p><h3 id="编写一个简单的-C-代码"><a href="#编写一个简单的-C-代码" class="headerlink" title="编写一个简单的 C 代码"></a>编写一个简单的 C 代码</h3><p>这里我们编写一个简单的 C 代码，用于测试 perf 工具的使用。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000000</span>; i++)<br>        sum += i;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>, sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码的作用是计算 1 到 1000000 的和。</p><h3 id="使用-perf-工具"><a href="#使用-perf-工具" class="headerlink" title="使用 perf 工具"></a>使用 perf 工具</h3><p>下面我们使用 perf 工具来对上述代码进行性能分析。假设代码保存在文件 test.c 中。</p><p>统计 CPU 周期数<br>以下命令用于统计程序的 CPU 周期数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">perf <span class="hljs-built_in">stat</span> ./<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>输出结果类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Performance counter stats <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;./test&#x27;</span>:<br><br>          19,23 msec task-clock:u              <span class="hljs-comment">#    0.988 CPUs utilized          </span><br>                0      context-switches:u        <span class="hljs-comment">#    0.000 K/sec                  </span><br>                0      cpu-migrations:u          <span class="hljs-comment">#    0.000 K/sec                  </span><br>              575      page-faults:u             <span class="hljs-comment">#    0.030 M/sec                  </span><br>   64,013,620,231      cycles:u                  <span class="hljs-comment">#    3.324 GHz                      (49.80%)</span><br>   40,010,335,480      instructions:u            <span class="hljs-comment">#    0.62  insn per cycle           (62.34%)</span><br>    9,998,469,566      branches:u                <span class="hljs-comment">#  518.693 M/sec                    (62.27%)</span><br>          763,176      branch-misses:u           <span class="hljs-comment">#    0.01% of all branches          (62.32%)</span><br><br>     0.019438122 seconds time elapsed<br><br>     0.019411000 seconds user<br>     0.000007000 seconds sys<br></code></pre></td></tr></table></figure><p>输出结果中的 cycles 表示 CPU 周期数，instructions 表示指令数，branches 表示分支指令数。其中，cycles 和 instructions 的比例代表了 CPU 的效率，即 IPC（Instructions Per Cycle）。</p><h3 id="统计函数调用次数"><a href="#统计函数调用次数" class="headerlink" title="统计函数调用次数"></a>统计函数调用次数</h3><p>以下命令用于统计程序中函数的调用次数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">perf record -e cycles -g ./<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>这个命令将启动 perf 工具，并使用 -g 选项记录调用关系图。我们还需要使用 sudo 权限运行该命令，以便 perf 工具可以访问系统的硬件计数器。</p><h2 id="成为专业码农"><a href="#成为专业码农" class="headerlink" title="成为专业码农"></a>成为专业码农</h2><ul><li>要熟悉项目了 -&gt; STFW/RTFM/RTFSC, 尝试理解一切细节</li><li>要写代码了<ul><li>仔细 RTFM, 正确理解需求</li><li>编写可读，可维护，易验证的代码 (不言自明，不言自证)</li><li>用 lint 工具检查代码</li><li>进行充分的测试</li><li>添加充分的断言</li></ul></li><li>要调试了<ul><li>默念“机器永远是对的/未测试代码永远是错的”</li><li>sanitizer, trace, printf, gdb, …</li></ul></li><li>平时 -&gt; 用正确的工具/方法做事情</li><li>感到不爽了 -&gt; 找正确的工具/搭基础设施</li></ul><h1 id="总线选讲"><a href="#总线选讲" class="headerlink" title="总线选讲"></a>总线选讲</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>广义上讲总线就是一个通信系统，以下这些都属于广义的总线概念:TCP/IP, 以太网，网线，RTL 信号，系统调用。</p><p>主动发起通信的叫 master，响应通信的叫 slave。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一生一芯概述&quot;&gt;&lt;a href=&quot;#一生一芯概述&quot; class=&quot;headerlink&quot; title=&quot;一生一芯概述&quot;&gt;&lt;/a&gt;一生一芯概述&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV12e4y1Y76i/?</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA 小白笔记</title>
    <link href="http://example.com/2023/03/12/JAVA%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/03/12/JAVA%E5%B0%8F%E7%99%BD%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-12T01:55:55.000Z</published>
    <updated>2023-03-12T04:25:57.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h1><blockquote><p>本章记录一些配置笔记，不是 step by step 教程</p></blockquote><h2 id="安装-JAVA"><a href="#安装-JAVA" class="headerlink" title="安装 JAVA"></a>安装 JAVA</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 免登陆下载java</span><br>https://xiandan.io/posts/jdk-download.html<br><span class="hljs-comment"># 高速镜像</span><br>https://github.com/LilithBristol/javajdkforwinx64<br></code></pre></td></tr></table></figure><p>Linux 环境变量 PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin<br></code></pre></td></tr></table></figure><p>Windows 环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># JAVA_HOME</span><br>C:\Program Files\Java\jdk1.8.0_212<br><span class="hljs-comment"># CLASSPATH</span><br>.;%JAVA_HOME%\bin;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar<br></code></pre></td></tr></table></figure><h2 id="VSCode-开发环境"><a href="#VSCode-开发环境" class="headerlink" title="VSCode 开发环境"></a>VSCode 开发环境</h2><h3 id="基础插件"><a href="#基础插件" class="headerlink" title="基础插件"></a>基础插件</h3><p>安装 <code>Extension Pack for Java</code> 即可，会把用到的开发插件都安装。不需要安装 Java Language Support 会和 Extension Pack for Java 中的 Language Support for Java by Red Hat 冲突。目前使用过程中也没有遇到必须使用 Java Language Support 的情况。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用 CTRL+SHIFT+P 输入 Java: create Project，输入项目名，在 src 文件夹中，选择 Run 运行 Java 代码。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 导包</span><br> <span class="hljs-built_in">shift</span> + alt + o<br></code></pre></td></tr></table></figure><h2 id="IDEA-开发环境"><a href="#IDEA-开发环境" class="headerlink" title="IDEA 开发环境"></a>IDEA 开发环境</h2><h3 id="下载安装-IDEA"><a href="#下载安装-IDEA" class="headerlink" title="下载安装 IDEA"></a>下载安装 IDEA</h3><p><a href="https://www.ifengsoft.com/149.html">Java 集成开发环境 IntelliJ IDEA 2022.3 Ultimate 永久激活版 - 风软资源站</a></p><h3 id="配置-MAVEN-IDEA-中下载速度慢"><a href="#配置-MAVEN-IDEA-中下载速度慢" class="headerlink" title="配置 MAVEN,IDEA 中下载速度慢"></a>配置 MAVEN,IDEA 中下载速度慢</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># IDEA中编辑区右键--maven--create xml</span><br>&lt;mirrors&gt;  <br>    &lt;mirror&gt;<br>        &lt;id&gt;alimaven&lt;/id&gt;<br>        &lt;name&gt;aliyun maven&lt;/name&gt;<br>        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>    &lt;/mirror&gt;<br><br>    &lt;mirror&gt;<br>        &lt;id&gt;uk&lt;/id&gt;<br>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>        &lt;name&gt;Human Readable Name <span class="hljs-keyword">for</span> this Mirror.&lt;/name&gt;<br>        &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt;<br>    &lt;/mirror&gt;<br><br>    &lt;mirror&gt;<br>        &lt;id&gt;CN&lt;/id&gt;<br>        &lt;name&gt;OSChina Central&lt;/name&gt;<br>        &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;<br>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>    &lt;/mirror&gt;<br><br>    &lt;mirror&gt;<br>        &lt;id&gt;nexus&lt;/id&gt;<br>        &lt;name&gt;internal nexus repository&lt;/name&gt;<br>        &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;<br>        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>    &lt;/mirror&gt;<br>&lt;/mirrors&gt;<br></code></pre></td></tr></table></figure><h2 id="安装-MYSQL"><a href="#安装-MYSQL" class="headerlink" title="安装 MYSQL"></a>安装 MYSQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt install mysql<br>sudo mysql -u root -p<br><span class="hljs-built_in">source</span> /home/user/oa_system/VBlog/blogserver/src/main/resources/vueblog.sql<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建数据库</span><br>CREATE DATABASE ryvue;<br><span class="hljs-comment"># 切换当前数据库</span><br>use ryvue;<br><span class="hljs-built_in">set</span> character <span class="hljs-built_in">set</span> utf8;<br><span class="hljs-comment"># 执行sql脚本</span><br><span class="hljs-built_in">source</span> /home/user/oa_system/RuoYi-Vue/sql/ry_20220822.sql<br><span class="hljs-built_in">source</span> /home/user/oa_system/RuoYi-Vue/sql/quartz.sql<br><span class="hljs-comment"># 删除数据库</span><br>drop database 数据库名;<br><span class="hljs-comment"># 显示所有数据库</span><br>show databases;<br><span class="hljs-comment"># 创建数据库</span><br>create database 数据库名;<br><span class="hljs-comment"># 显示数据库编码格式</span><br> SHOW VARIABLES LIKE <span class="hljs-string">&#x27;character_set_%&#x27;</span>;<br><span class="hljs-comment"># 删除 mysql 密码</span><br>SET PASSWORD FOR root@localhost=PASSWORD(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment"># 重建数据库</span><br>drop database ryvue;<br>create database ryvue;<br>use ryvue;<br></code></pre></td></tr></table></figure><h2 id="安装数据库可视化工具"><a href="#安装数据库可视化工具" class="headerlink" title="安装数据库可视化工具"></a>安装数据库可视化工具</h2><h3 id="mysql-workbench"><a href="#mysql-workbench" class="headerlink" title="mysql-workbench"></a>mysql-workbench</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://security.ubuntu.com/ubuntu focal-security main&quot;</span> | sudo tee /etc/apt/sources.list.d/focal-security.list<br>sudo apt-get update<br>sudo apt-get install libssl1.1<br><br>wget https://downloads.mysql.com/archives/get/p/8/file/mysql-workbench-community_8.0.12-1ubuntu18.04_amd64.deb<br>sudo dpkg -i mysql*.deb <br>sudo apt-get install -f <br>sudo dpkg -i mysql*.deb  <br></code></pre></td></tr></table></figure><h3 id="VSCode-插件-MySQL-by-weijan-Chen"><a href="#VSCode-插件-MySQL-by-weijan-Chen" class="headerlink" title="VSCode 插件-MySQL by weijan Chen"></a>VSCode 插件-MySQL by weijan Chen</h3><p><a href="https://github.com/cweijan/vscode-database-client/blob/HEAD/README_CN.md">vscode-database-client 官方文档</a></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/03/12/f35c4232ab20d9bd4f8dac306f617fdc.png"></p><h2 id="安装-NPM"><a href="#安装-NPM" class="headerlink" title="安装 NPM"></a>安装 NPM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo apt install npm -y<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm <span class="hljs-built_in">set</span> progress=<span class="hljs-literal">false</span> <br><br>npm config <span class="hljs-built_in">set</span> registry http://registry.npmjs.org/<br><br>npm install --legacy-peer-deps<br><br>reify:abbrev: sill audit bulk request<br>删除 package-lock.json 文件<br></code></pre></td></tr></table></figure><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>打开终端并输入以下命令以在 Ubuntu 上下载 nvm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash<br></code></pre></td></tr></table></figure><p>该命令将从 nvm GitHub 存储库下载安装脚本，并使用 bash 在您的 Ubuntu 系统上运行它。运行此命令后，nvm 将被安装在您的家目录中。</p><p>安装完成后，在终端中运行以下命令，以使 nvm 生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>确认 nvm 是否正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm --version<br></code></pre></td></tr></table></figure><p>如果一切顺利，您将看到 nvm 的版本号。</p><h2 id="安装-node-js-和-npm"><a href="#安装-node-js-和-npm" class="headerlink" title="安装 node.js 和 npm"></a>安装 node.js 和 npm</h2><p>使用 nvm 安装特定版本的 Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install &lt;node-version&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install 14.17.6<br></code></pre></td></tr></table></figure><p>这将安装 Node.js 版本 14.17.6。</p><p>安装完成后，使用以下命令将已安装的 Node.js 版本设置为默认版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">alias</span> default &lt;node-version&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm <span class="hljs-built_in">alias</span> default 14.17.6<br></code></pre></td></tr></table></figure><p>这将设置 Node.js 版本 14.17.6 为默认版本。</p><p>确认 Node.js 和 npm 是否正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>如果一切顺利，您将看到 Node.js 和 npm 的版本号。</p><p>使用 nvm 切换 Node.js 版本：</p><p>使用以下命令查看可用的 Node.js 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm ls-remote<br></code></pre></td></tr></table></figure><p>该命令将显示可用的 Node.js 版本列表。</p><p>使用以下命令安装特定版本的 Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install &lt;node-version&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install 12.22.6<br></code></pre></td></tr></table></figure><p>这将安装 Node.js 版本 12.22.6。</p><p>使用以下命令切换到特定版本的 Node.js：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm use &lt;node-version&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm use 12.22.6<br></code></pre></td></tr></table></figure><p>这将切换到 Node.js 版本 12.22.6。</p><p>确认当前使用的 Node.js 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>如果一切顺利，您将看到当前使用的 Node.js 版本号。</p><h1 id="ERROR-合集"><a href="#ERROR-合集" class="headerlink" title="ERROR 合集"></a>ERROR 合集</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Error-Could-not-find-or-load-main-class-org-apache-maven-wrapper-MavenWrapperMain"><a href="#Error-Could-not-find-or-load-main-class-org-apache-maven-wrapper-MavenWrapperMain" class="headerlink" title="Error: Could not find or load main class org.apache.maven.wrapper.MavenWrapperMain"></a>Error: Could not find or load main class org.apache.maven.wrapper.MavenWrapperMain</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">maven 相关依赖还没下载完<br></code></pre></td></tr></table></figure><h3 id="JSON-parse-error-Cannot-construct-instance-of"><a href="#JSON-parse-error-Cannot-construct-instance-of" class="headerlink" title="JSON parse error: Cannot construct instance of"></a>JSON parse error: Cannot construct instance of</h3><p>确认请求方式是 get 还是 post，如果是 post 是不是前端发了一个空串。空串要用{}包裹</p><h3 id="Error-JAVA-HOME-is-not-defined-correctly"><a href="#Error-JAVA-HOME-is-not-defined-correctly" class="headerlink" title="Error: JAVA_HOME is not defined correctly"></a>Error: JAVA_HOME is not defined correctly</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 缺少.mavenrc 配置文件</span><br>vim ~/.mavenrc<br><span class="hljs-comment"># 将 JAVA 配置放进去</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/lib/jvm/jdk1dot8<br></code></pre></td></tr></table></figure><h3 id="配置数据表中不存在的字段"><a href="#配置数据表中不存在的字段" class="headerlink" title="配置数据表中不存在的字段"></a>配置数据表中不存在的字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@TableField(exist = false)</span><br></code></pre></td></tr></table></figure><h3 id="Error-creating-bean-with-name-‘minioController’-endpoint-must-not-be-null"><a href="#Error-creating-bean-with-name-‘minioController’-endpoint-must-not-be-null" class="headerlink" title="Error creating bean with name ‘minioController’  endpoint must not be null"></a>Error creating bean with name ‘minioController’  endpoint must not be null</h3><p>检查配置文件是否配置了 endpoint</p><h3 id="解决-MyBatis-报错-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found"><a href="#解决-MyBatis-报错-org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found" class="headerlink" title="解决 MyBatis 报错 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)"></a>解决 MyBatis 报错 org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)</h3><p>1、检查 xml 文件的 namespace 是否对应接口，要是全路径。</p><p>2、xml 中的函数 id 和接口中的函数名是否对得上，参数类型、返回值类型是否对得上</p><p>3、去看输出目录中有没有 xml 映射文件，maven 项目默认把资源文件放在 src/main/resources 下，默认只识别 src/main/resources 下的资源文件。</p><h3 id="Unable-to-obtain-LocalDateTime-from-TemporalAccessor"><a href="#Unable-to-obtain-LocalDateTime-from-TemporalAccessor" class="headerlink" title="Unable to obtain LocalDateTime from TemporalAccessor"></a>Unable to obtain LocalDateTime from TemporalAccessor</h3><p>You can’t parse a date string into LocalDateTime without a time.</p><p>  LocalDateTime.parse(“2019-10-25”, DateTimeFormatter.ofPattern(“yyyy-MM-dd”))</p><p>You should parse the string into <code>LocalDate</code> and call <code>LocalDate.atStartOfDay()</code> to return <code>LocalDateTime</code> with time <code>00:00:00</code>.</p><p>  LocalDate.parse(“2019-10-25”, DateTimeFormatter.ofPattern(“yyyy-MM-dd”)).atStartOfDay()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 传入的时间格式要和解析的时间格式保持一致，如以下解析方式，传入参数  2023-03-08 11:11:11</span><br>LocalDateTime startDateTime = LocalDateTime.parse(startTime,<br>        DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>LocalDateTime endDateTime = LocalDateTime.parse(endTime,<br>        DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>        DateTimeFormatter localDateFmt = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <br>        <br> DateTimeFormatter localDateFmt = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(startTime) &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(endTime)) &#123;<br>      LocalDate startDate = LocalDate.parse(startTime, localDateFmt);<br>      LocalDate endDate = LocalDate.parse(endTime, localDateFmt);<br>      LocalDateTime startDateTime = LocalDateTime.of(startDate, LocalTime.MIN);<br>      LocalDateTime endDateTime = LocalDateTime.of(endDate, LocalTime.MAX);<br>      log.debug(<span class="hljs-string">&quot;startDateTime: &quot;</span> + startDateTime);<br>      log.debug(<span class="hljs-string">&quot;endDateTime: &quot;</span> + endDateTime);<br>      queryWrapper.between(<span class="hljs-string">&quot;create_time&quot;</span>, startDateTime, endDateTime);<br>  &#125;<br><br></code></pre></td></tr></table></figure><h3 id="mybatisplus-提交数据后无法立即被查询到"><a href="#mybatisplus-提交数据后无法立即被查询到" class="headerlink" title="mybatisplus 提交数据后无法立即被查询到"></a>mybatisplus 提交数据后无法立即被查询到</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">提升事务隔离级别<br><span class="hljs-meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><br><br></code></pre></td></tr></table></figure><h3 id="One-record-is-expected-but-the-query-result-is-multiple-records"><a href="#One-record-is-expected-but-the-query-result-is-multiple-records" class="headerlink" title="One record is expected, but the query result is multiple records"></a>One record is expected, but the query result is multiple records</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">解决方案：如果想取一条并不想报错时使用 getOne(queryWrapper,<span class="hljs-keyword">false</span>)<br><br></code></pre></td></tr></table></figure><h3 id="注意-mybatisplus-的-sql-返回值"><a href="#注意-mybatisplus-的-sql-返回值" class="headerlink" title="注意 mybatisplus 的 sql 返回值"></a>注意 mybatisplus 的 sql 返回值</h3><h3 id="java-lang-NumberFormatException-null"><a href="#java-lang-NumberFormatException-null" class="headerlink" title="java.lang.NumberFormatException: null"></a>java.lang.NumberFormatException: null</h3><p>检查使用 Integer.parseInt 转换时，是否转换的数可能为 null</p><h4 id="Unexpected-error-occurred-in-scheduled-taskjava-lang-NullPointerException-null"><a href="#Unexpected-error-occurred-in-scheduled-taskjava-lang-NullPointerException-null" class="headerlink" title="Unexpected error occurred in scheduled taskjava.lang.NullPointerException: null"></a>Unexpected error occurred in scheduled taskjava.lang.NullPointerException: null</h4><p>服务类没有正确注入，每一个需要注入类都需要添加 Autowire 注解</p><h3 id="Unhandled-exception-type"><a href="#Unhandled-exception-type" class="headerlink" title="Unhandled exception type"></a>Unhandled exception type</h3><p>原因：被强制异常处理的代码块，必须进行异常处理，否则编译器会提示“Unhandled exception type Exception”错误警告。</p><p>需要将代码写到 try catch 里！</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="数据库乱码，前端乱码"><a href="#数据库乱码，前端乱码" class="headerlink" title="数据库乱码，前端乱码"></a>数据库乱码，前端乱码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/mysql/my.cnf<br><span class="hljs-comment"># 填写如下配置</span><br>[client]<br>default-character-set=utf8mb4<br><br>[mysqld]<br>character-set-server = utf8mb4<br>collation-server = utf8mb4_unicode_ci<br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8mb4&#x27;</span><br>skip-character-set-client-handshake = <span class="hljs-literal">true</span><br><br>[mysql]<br>default-character-set = utf8mb4<br></code></pre></td></tr></table></figure><h3 id="nested-exception-is-java-lang-NullPointerException-with-root-cause"><a href="#nested-exception-is-java-lang-NullPointerException-with-root-cause" class="headerlink" title="nested exception is java.lang.NullPointerException] with root cause"></a>nested exception is java.lang.NullPointerException] with root cause</h3><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/11-21-20-55f1e2de81e6858f99707dea6a5e0292-20230216112119-174d50.png"></p><h3 id="Error-attempting-to-get-column-‘motion-id’-from-result-set"><a href="#Error-attempting-to-get-column-‘motion-id’-from-result-set" class="headerlink" title="Error attempting to get column ‘motion_id’ from result set"></a>Error attempting to get column ‘motion_id’ from result set</h3><p>数据库字段类型与后端类型不一致</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="digital-envelope-routines-unsupported"><a href="#digital-envelope-routines-unsupported" class="headerlink" title="digital envelope routines::unsupported"></a>digital envelope routines::unsupported</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> NODE_OPTIONS=--openssl-legacy-provider<br></code></pre></td></tr></table></figure><h3 id="禁止跨域策略-CORS-policy"><a href="#禁止跨域策略-CORS-policy" class="headerlink" title="禁止跨域策略 (CORS policy)"></a>禁止跨域策略 (CORS policy)</h3><h3 id="node-–openssl-legacy-provider-is-not-allowed-in-NODE-OPTIONS"><a href="#node-–openssl-legacy-provider-is-not-allowed-in-NODE-OPTIONS" class="headerlink" title="node: –openssl-legacy-provider is not allowed in NODE_OPTIONS"></a>node: –openssl-legacy-provider is not allowed in NODE_OPTIONS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">unset NODE_OPTIONS<br><br></code></pre></td></tr></table></figure><h3 id="Unexpected-character-‘-’"><a href="#Unexpected-character-‘-’" class="headerlink" title="Unexpected character (‘}’"></a>Unexpected character (‘}’</h3><p>请求的时候最后一个字段后面不要加逗号</p><h3 id="The-value-of-the-‘Access-Control-Allow-Origin’-header-in-the-response-must-not-be-the-wildcard-‘-’-when-the-request’s-credentials-mode-is-‘include’-The-credentials-mode-of-requests-initiated-by-the-XMLHttpRequest-is-controlled-by-the-withCredentials-attribute"><a href="#The-value-of-the-‘Access-Control-Allow-Origin’-header-in-the-response-must-not-be-the-wildcard-‘-’-when-the-request’s-credentials-mode-is-‘include’-The-credentials-mode-of-requests-initiated-by-the-XMLHttpRequest-is-controlled-by-the-withCredentials-attribute" class="headerlink" title="The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute"></a>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute</h3><p>这个错误通常是因为在使用 XMLHttpRequest 对象进行跨域请求时，服务器返回的响应头中的 Access-Control-Allow-Origin 的值为*，但请求的 withCredentials 属性被设置为 true，这两者之间是相互冲突的。</p><p>XMLHttpRequest 对象具有 withCredentials 属性，如果设置为 true，它将在请求中包括来自其他域的 cookie 等凭据信息。但是，如果服务器在响应头中将 Access-Control-Allow-Origin 设置为*，浏览器会禁止访问这些凭据信息。这是一项安全保护措施，防止敏感信息泄露。</p><p>解决这个问题的方法是，在服务器端，将 Access-Control-Allow-Origin 设置为请求来源的域名，而不是使用通配符*。这可以让浏览器安全地发送凭据信息。</p><p>在前端，需要将 withCredentials 属性设置为 true，以便在请求中包含凭据信息。同时，需要确保请求的来源域名与服务器端设置的 Access-Control-Allow-Origin 一致。</p><p>如果你无法更改服务器端的设置，可以考虑使用代理或者 JSONP 等跨域解决方案。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/02/22/3c3171236ca43b99771480eeea4a6f2f.png"></p><h3 id="VUE-项目端口不固定"><a href="#VUE-项目端口不固定" class="headerlink" title="VUE 项目端口不固定"></a>VUE 项目端口不固定</h3><h3 id="Application-run-failed-org-springframework-beans-factory-BeanCreationException-Error-creating-bean-with-name-‘communityInfoController’"><a href="#Application-run-failed-org-springframework-beans-factory-BeanCreationException-Error-creating-bean-with-name-‘communityInfoController’" class="headerlink" title="Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘communityInfoController’"></a>Application run failed org.springframework.beans.factory.BeanCreationException: Error creating bean with name ‘communityInfoController’</h3><p>检查target/classes/mapper/DepartmentMapper.xml中的格式是否正确，检查引号是否多了，少了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">&lt;select id=<span class="hljs-string">&quot;findIdByOrgId&quot;</span> resultType=<span class="hljs-string">&quot;resultType=&quot;</span>java.lang.Integer<span class="hljs-string">&quot;&gt;</span><br><span class="hljs-string">SELECT CAST(id AS UNSIGNED) AS id FROM department WHERE organization_id = #&#123;orgId&#125;</span><br><span class="hljs-string">&lt;/select&gt;</span><br></code></pre></td></tr></table></figure><h3 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h3><ul><li>400-前后端参数对不上</li></ul><h3 id="POST-GET-there-is-already-xx-bean-method"><a href="#POST-GET-there-is-already-xx-bean-method" class="headerlink" title="{POST/GET} there is already xx bean method"></a>{POST/GET} there is already xx bean method</h3><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/19-15-47-0a06b9a67f496f6ec023534fc4381876-20230217191545-f22ccc.png"></p><h3 id="NPM-启动-digital-envelope-routines-unsupported"><a href="#NPM-启动-digital-envelope-routines-unsupported" class="headerlink" title="NPM 启动:digital envelope routines::unsupported"></a>NPM 启动:digital envelope routines::unsupported</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> NODE_OPTIONS=--openssl-legacy-provider<br>npm run serve<br></code></pre></td></tr></table></figure><h3 id="The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes"><a href="#The-field-file-exceeds-its-maximum-permitted-size-of-1048576-bytes" class="headerlink" title="The field file exceeds its maximum permitted size of 1048576 bytes"></a>The field file exceeds its maximum permitted size of 1048576 bytes</h3><p>spring boot 上传文件时接口报错 The field file exceeds its maximum permitted size of 1048576 bytes.经排查官方设置每个文件的配置最大为 1Mb，单次请求的文件的总数不能大于 10Mb，上传大于 1Mb 的文件需要修改配置文件（application.properties）<br>1.Spring Boot 1.3.x 或者之前</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">multipart.maxFileSize</span>=<span class="hljs-number">100</span>Mb<br><span class="hljs-attr">multipart.maxRequestSize</span>=<span class="hljs-number">1000</span>Mb<br></code></pre></td></tr></table></figure><p>2.Spring Boot 1.4.x 以后</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">spring.http.multipart.maxFileSize</span>=<span class="hljs-number">100</span>Mb<br><span class="hljs-attr">spring.http.multipart.maxRequestSize</span>=<span class="hljs-number">1000</span>Mb<br></code></pre></td></tr></table></figure><p>3.Spring Boot 2.0 之后</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">spring</span>.servlet.multipart.<span class="hljs-keyword">max</span>-<span class="hljs-keyword">file</span>-<span class="hljs-keyword">size</span>=<span class="hljs-number">100</span>MB<br><span class="hljs-keyword">spring</span>.servlet.multipart.<span class="hljs-keyword">max</span>-request-<span class="hljs-keyword">size</span>=<span class="hljs-number">1000</span>MB<br></code></pre></td></tr></table></figure><h3 id="字段不存在"><a href="#字段不存在" class="headerlink" title="字段不存在"></a>字段不存在</h3><p>请求的时候字段名字和 java 中命名保持一直，而不是和数据库名字保持一样</p><h3 id="数据库-communications-link-failure"><a href="#数据库-communications-link-failure" class="headerlink" title="数据库 communications link failure"></a>数据库 communications link failure</h3><h3 id="配置请求超时时间"><a href="#配置请求超时时间" class="headerlink" title="配置请求超时时间"></a>配置请求超时时间</h3><p>src/utils/request.js</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/14-18-57-4ffa9b2c1ef5817aa81ba91b0257cddc-20230214141856-8b5215.png"></p><h3 id="Request-method-GET-not-supported"><a href="#Request-method-GET-not-supported" class="headerlink" title="Request method GET not supported"></a>Request method GET not supported</h3><p>前端请求事件没有设置请求方式  post 还是 get</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/10-27-11-20135e8d24b909084fc2d36e3ca3d469-20230208102710-382029.png"></p><h3 id="Invalid-cros-request"><a href="#Invalid-cros-request" class="headerlink" title="Invalid cros request"></a>Invalid cros request</h3><p>跨域</p><h3 id="处理未来数据"><a href="#处理未来数据" class="headerlink" title="处理未来数据"></a>处理未来数据</h3><p><a href="https://www.bilibili.com/video/BV1U44y1W77D?t=1655.5&p=23">https://www.bilibili.com/video/BV1U44y1W77D?t=1655.5&amp;p=23</a></p><h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><h3 id="前端保存代码需要等待一段时间生效"><a href="#前端保存代码需要等待一段时间生效" class="headerlink" title="前端保存代码需要等待一段时间生效"></a>前端保存代码需要等待一段时间生效</h3><h3 id="获取用户-IP"><a href="#获取用户-IP" class="headerlink" title="获取用户 IP"></a>获取用户 IP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">String userIp =  request.getRemoteAddr();<br></code></pre></td></tr></table></figure><h3 id="解决方案：Java-实体类字段-不返回给前端"><a href="#解决方案：Java-实体类字段-不返回给前端" class="headerlink" title="解决方案：Java 实体类字段 不返回给前端"></a>解决方案：Java 实体类字段 不返回给前端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@JsonIgnore</span><br><span class="hljs-meta">@ApiModelProperty(value = &quot;不重要&quot;)</span><br><span class="hljs-meta">@TableField(exist = false)</span><br><span class="hljs-keyword">private</span> String unimportant;<br></code></pre></td></tr></table></figure><h3 id="Dateutil-包"><a href="#Dateutil-包" class="headerlink" title="Dateutil 包"></a>Dateutil 包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br></code></pre></td></tr></table></figure><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  <span class="hljs-comment">//获取请求参数</span><br>    String queryString = request.getQueryString();<br>    log.info(<span class="hljs-string">&quot;请求参数:&#123;&#125;&quot;</span>, queryString);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="后端设置-header-前端获取不到"><a href="#后端设置-header-前端获取不到" class="headerlink" title="后端设置 header 前端获取不到"></a>后端设置 header 前端获取不到</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"># 必须要加这条字段控制能够获取的 header<br>        response.addHeader(<span class="hljs-string">&quot;Access-Control-Expose-Headers&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>              response.addHeader(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;sdfdsfdsf&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="axios-请求"><a href="#axios-请求" class="headerlink" title="axios 请求"></a>axios 请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java">axios.get(<span class="hljs-string">&#x27;http://opm.eswincomputing.com:9090/user/page&#x27;</span>)<br>  .then(function (response) &#123;<br>    console.log(response.headers);<br>  &#125;)<br>  .<span class="hljs-keyword">catch</span>(function (error) &#123;<br>    console.log(error.headers);<br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="查询端口占用"><a href="#查询端口占用" class="headerlink" title="查询端口占用"></a>查询端口占用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">lsof -i<br>lsof -i:<span class="hljs-number">8080</span>：查看 <span class="hljs-number">8080</span> 端口占用<br></code></pre></td></tr></table></figure><h3 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"># Application.yml<br>logging:<br>  level:<br>    com.eswincomputing.springboot: debug<br># 使用<br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/patch-record&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PatchRecordController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IPatchRecordService patchRecordServic<br>    log.info(version);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="校验字符串是否为空"><a href="#校验字符串是否为空" class="headerlink" title="校验字符串是否为空"></a>校验字符串是否为空</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">StrUtil.isBlank()<br></code></pre></td></tr></table></figure><h3 id="查询主键"><a href="#查询主键" class="headerlink" title="查询主键"></a>查询主键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">SELECT id FROM department WHERE organization_id = <span class="hljs-comment">#&#123;orgId&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="字符整型互转"><a href="#字符整型互转" class="headerlink" title="字符整型互转"></a>字符整型互转</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">Integer.parseInt(user.getDelFlag())<br></code></pre></td></tr></table></figure><h3 id="解析-json-字符串"><a href="#解析-json-字符串" class="headerlink" title="解析 json 字符串"></a>解析 json 字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">   <br>&lt;!-- json 解析 --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>&lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.0</span><span class="hljs-number">.21</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br><br><br>   JSONObject object = JSONObject.parseObject(patchRecord.getAttachmentList());<br>    String fileUID = object.getString(<span class="hljs-string">&quot;file_uid&quot;</span>);<br>    String fileName = object.getString(<span class="hljs-string">&quot;file_name&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="逗号分割字符串"><a href="#逗号分割字符串" class="headerlink" title="逗号分割字符串"></a>逗号分割字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java">String string = <span class="hljs-string">&quot;张三，李四，王五，马六，小气&quot;</span>;<br>       String substring = string.substring(<span class="hljs-number">0</span>, string.length() - <span class="hljs-number">1</span>);<br>       System.out.println(substring);<br>       String[] split = substring.split(<span class="hljs-string">&quot;,&quot;</span>);<span class="hljs-comment">//以逗号分割</span><br>       <span class="hljs-keyword">for</span> (String string2 : split) &#123;<br>           System.out.println(<span class="hljs-string">&quot;数据--&gt;&gt;&gt;&quot;</span> + string2);<br>       &#125;<br></code></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础设施&quot;&gt;&lt;a href=&quot;#基础设施&quot; class=&quot;headerlink&quot; title=&quot;基础设施&quot;&gt;&lt;/a&gt;基础设施&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本章记录一些配置笔记，不是 step by step 教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;</summary>
      
    
    
    
    <category term="JAVA 开发" scheme="http://example.com/categories/JAVA-%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Gitlab CI Pipeline</title>
    <link href="http://example.com/2023/01/07/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Gitlab-CI-Pipeline/"/>
    <id>http://example.com/2023/01/07/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Gitlab-CI-Pipeline/</id>
    <published>2023-01-07T03:08:19.000Z</published>
    <updated>2023-03-25T04:13:10.820Z</updated>
    
    <content type="html"><![CDATA[<p>GitLab CI/CD 是一个强大的工具，可以帮助开发团队实现自动化构建、测试和部署。本文将介绍如何使用 GitLab CI/CD 的 Pipeline 功能，以实现将 Markdown 文件自动编译为 PDF 并上传至 GitLab Release 界面的功能。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始使用 GitLab CI/CD 的 Pipeline 功能之前，需要进行一些准备工作。具体步骤如下：</p><ol><li>创建 GitLab 项目：在 GitLab 上创建一个新项目，并将 Markdown 文件上传至项目的某个目录下。例如，我们将 Markdown 文件上传至项目的根目录下，并命名为 <code>example.md</code>。</li></ol><ul><li><p>安装 Pandoc：Pandoc 是一个用于文档转换的工具，我们将使用它将 Markdown 文件转换为 PDF。在安装 Pandoc 之前，需要先安装 LaTeX，因为 Pandoc 使用 LaTeX 进行 PDF 渲染。具体安装步骤请参考 Pandoc 和 LaTeX 的官方文档。</p></li><li><p>创建 Release：在 GitLab 上创建一个 Release，用于存储编译好的 PDF 文件。具体操作方法请参考 GitLab 的官方文档。</p></li><li><p>创建 CI/CD 配置文件：在项目根目录下创建一个<code>.gitlab-ci.yml</code> 文件，并在其中定义 Pipeline 的流程。</p></li></ul><h2 id="编写-CI-CD-配置文件"><a href="#编写-CI-CD-配置文件" class="headerlink" title="编写 CI/CD 配置文件"></a>编写 CI/CD 配置文件</h2><p>下面是一个样例的<code>.gitlab-ci.yml</code> 文件，用于实现将 Markdown 文件编译为 PDF 并上传至 GitLab Release 界面的功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image:</span> <span class="hljs-string">pandoc/core:latest</span><br><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br><br><span class="hljs-attr">pdf:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">pandoc</span> <span class="hljs-string">example.md</span> <span class="hljs-string">-o</span> <span class="hljs-string">example.pdf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">--header</span> <span class="hljs-string">&quot;PRIVATE-TOKEN: $&#123;CI_PRIVATE_TOKEN&#125;&quot;</span> <span class="hljs-string">--upload-file</span> <span class="hljs-string">example.pdf</span> <span class="hljs-string">&quot;$&#123;CI_API_V4_URL&#125;/projects/$&#123;CI_PROJECT_ID&#125;/uploads&quot;</span><br>  <span class="hljs-attr">artifacts:</span><br>    <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">example.pdf</span><br></code></pre></td></tr></table></figure><p>上述配置文件中，我们使用了 <code>pandoc/core:latest</code> 作为 Docker 镜像，该镜像已经预安装了 Pandoc 工具。</p><p>该文件中包含了一个 build 阶段，其中包含了一个 pdf 任务。在 pdf 任务中，我们使用 Pandoc 工具将 Markdown 文件转换为 PDF 文件，并使用 cURL 工具将编译好的 PDF 文件上传至 GitLab Release 界面。注意，我们使用了环境变量<code>$&#123;CI_PRIVATE_TOKEN&#125;</code>和$<code>&#123;CI_API_V4_URL&#125;</code>，这些变量是 GitLab 自动注入的，用于进行身份验证和上传文件。</p><p>最后，我们将编译好的 PDF 文件定义为 Pipeline 的 artifacts，这样可以确保文件能够被保留并可用于后续的部署。</p><h2 id="运行-Pipeline"><a href="#运行-Pipeline" class="headerlink" title="运行 Pipeline"></a>运行 Pipeline</h2><p>完成 CI/CD 配置文件的编写后，我们可以在 GitLab 上启动 Pipeline，将 Markdown 文件自动编译为 PDF 并上传至 GitLab Release 界面。具体步骤如下：</p><ul><li><p>提交代码：将<code>.gitlab-ci.yml</code> 文件提交到 GitLab</p></li><li><p>启动 Pipeline：在 GitLab 上打开项目，并点击“CI/CD”-&gt;“Pipelines”选项卡。点击“Run Pipeline”按钮，启动 Pipeline 流程。</p></li><li><p>等待 Pipeline 完成：在 Pipeline 启动后，GitLab 会自动创建一个 Runner 并分配任务。Pipeline 的状态会在页面上实时更新，直到 Pipeline 执行完成。</p></li><li><p>查看 Release：Pipeline 执行完成后，我们可以在 GitLab Release 界面中找到编译好的 PDF 文件。点击 PDF 文件链接，即可下载并查看编译好的 PDF 文件。</p></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitLab CI/CD 是一个强大的工具，可以帮助开发团队实现自动化构建、测试和部署。本文将介绍如何使用 GitLab CI/CD 的 Pipeline 功能，以实现将 Markdown 文件自动编译为 PDF 并上传至 GitLab Release 界面的功能。&lt;/p&gt;</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="http://example.com/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
  </entry>
  
</feed>
