<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>如云泊</title>
  
  
  <link href="https://lifeislife.cn/atom.xml" rel="self"/>
  
  <link href="https://lifeislife.cn/"/>
  <updated>2024-04-03T18:05:35.695Z</updated>
  <id>https://lifeislife.cn/</id>
  
  <author>
    <name>Dominic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FRP 内网穿透</title>
    <link href="https://lifeislife.cn/2024/04/01/FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://lifeislife.cn/2024/04/01/FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</id>
    <published>2024-04-01T13:08:03.000Z</published>
    <updated>2024-04-03T18:05:35.695Z</updated>
    
    <content type="html"><![CDATA[<p>懒得自己搭建了，还要准备一台公网服务器，直接找第三方服务商。签到免费送流量，不过流量不多，不过用来穿透个小服务还是够的。</p><ul><li><a href="https://chickfrp.com/?affcode=2649EJBPNQ">https://chickfrp.com?affcode=2649EJBPNQ</a></li><li><a href="https://console.openfrp.net/">https://console.openfrp.net/</a></li></ul><p>创建隧道，下载配置文件如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>protocol=tcpserver_addr=ali<span class="token punctuation">-</span>shanghai<span class="token punctuation">-</span>a.chickfrp.comserver_port=7000user=xxxxxxxxxtoken=xxxxxxxxtcp_mux=true<span class="token punctuation">[</span> openai <span class="token punctuation">]</span>type= tcpremote_port= 10006local_ip= 192.168.1.9local_port= 3322use_compression=falseuse_encryption=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置客户端，下面以 Linux 为例，因为需要配置 Docker 服务，所以做个简单记录。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 下载 frp 应用，解压后 frpc 是客户端，frps 是服务端，今天我们只用到 frpc</span>wget https<span class="token punctuation">:</span>//github.com/fatedier/frp/releases/download/v0.56.0/frp_0.56.0_linux_amd64.tar.gztar zxvf frp_0.56.0_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将服务商提供的配置文件复制到<code>frpc.toml</code>中。服务商提供的可能是旧版本的 frp 配置，是<code>ini</code>格式，需要转换成<code>toml</code>格式。有能力可以自己稍微改一下格式就行，不会的话，可以用在线转换工具，比如：<a href="https://toml.info/zh/ini-to-toml%E3%80%82">https://toml.info/zh/ini-to-toml。</a></p><p>简单启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./frpc  -c ./frpc.toml<span class="token number">2024</span>-04-01 <span class="token number">21</span>:04:29.326 <span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token punctuation">[</span>client/control.go:170<span class="token punctuation">]</span> <span class="token punctuation">[</span>19341bf77b5454753237<span class="token punctuation">]</span> <span class="token punctuation">[</span>SDSDasdaderf.openai<span class="token punctuation">]</span> start proxy success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置 Docker-compose 一键启动，将配置文件<code>frpc.toml</code>映射到容器中。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.7"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">frp</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> stilleshan/frpc<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> frp    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /path/to/frpc.toml<span class="token punctuation">:</span>/frp/frpc.toml    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker-compose up -d</code>启动容器。<code>docker logs frp</code>查看日志。出现<code>start proxy success</code>表示成功。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;懒得自己搭建了，还要准备一台公网服务器，直接找第三方服务商。签到免费送流量，不过流量不多，不过用来穿透个小服务还是够的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chickfrp.com/?affcode=2649EJBPNQ&quot;&gt;https://chic</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="https://lifeislife.cn/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="FRP，内网穿透" scheme="https://lifeislife.cn/tags/FRP%EF%BC%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>QEMU Decodetree详解</title>
    <link href="https://lifeislife.cn/2024/03/31/QEMU-Decodetree%E8%AF%A6%E8%A7%A3/"/>
    <id>https://lifeislife.cn/2024/03/31/QEMU-Decodetree%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-03-31T12:41:51.043Z</published>
    <updated>2024-03-31T12:42:29.229Z</updated>
    
    <content type="html"><![CDATA[<p>QEMU 在 decode 指令的时候，需要调用各平台所定义的 instruction decoders 来解析指令。如在 ARM 平台下，就定义了：<code>disas_arm_insn()</code>、<code>disas_thumb_insn()</code> 及 <code>disas_thumb2_insn()</code> 等来分别负责 ARM 32-bits 指令、ARM Thumb 指令及 ARM Thumb2 指令的解析。</p><p>而 <code>Decodetree</code> 则是由 <code>Bastian Koppelmann</code> 于 2017 年在 移植 RISC-V QEMU 的时候所提出来的机制 (详见：<a href="https://lists.gnu.org/archive/html/qemu-devel/2017-07/msg07735.html">讨论邮件1</a>、<a href="https://lists.gnu.org/archive/html/qemu-devel/2017-10/msg05046.html">讨论邮件2</a>)。提出该机制主要是因为过往的 instruction decoders (如：ARM) 都是采用一堆 <code>switch-case</code> 来做判断。不仅难阅读，也难以维护。</p><p>因此 <code>Bastian Koppelmann</code> 就提出了 <code>Decodetree</code> 的机制，开发者只需要通过 <code>Decodetree</code> 的语法定义各个指令的格式，便可交由 <code>Decodetree</code> 来动态生成对应包含 <code>switch-case</code> 的 instruction decoder <code>.c</code> 文档。</p><p><code>Decodetree</code> 特别适合像 RISC-V 这种具有<strong>固定指令格式</strong>的 ISA。</p><ul><li>因为各字段都在固定的位置，(如 RISC-V 的 <code>opcode</code> 都是固定在 <code>bits[6..0]</code> 的位置)。</li></ul><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F18%2F5a051d22c43a2ce34069fecd2e4fb8c0.png"></p><p><code>Decodetree</code> 其实是由 Python script (<code>./scripts/decodetree.py</code>) 所生成的。使用文档可以参考：<code>./docs/devel/decodetree.rst</code>，里面有详细定义了其语法的格式。QEMU 在编译时，会调用 <code>Decodetree</code>，根据各平台所定义的 decode 文档，动态生成对应的 decoder。</p><ul><li><p>如 RISC-V 的 instruction decoders 就是被定义在：<code>./target/riscv/*.decode</code> 中。其 <code>Makefile.obj</code> 就有如下的声明：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">...DECODETREE = $(SRC_PATH)/scripts/decodetree.pydecode32-y = $(SRC_PATH)/target/riscv/insn32.decodedecode32-$(TARGET_RISCV64) += $(SRC_PATH)/target/riscv/insn32-64.decode...target/riscv/decode_insn32.inc.c: $(decode32-y) $(DECODETREE)$(call quiet-command, \  $(PYTHON) $(DECODETREE) -o $@ --static-decode decode_insn32 \          $(decode32-y), "GEN", $(TARGET_DIR)$@)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>Decodetree</code> 的语法共分为：Fields、Argument Sets、Formats、Patterns 五部分。本文将介绍如何通过 <code>Decodetree</code> 的语法，来动态生成一个指令的 decoder。</p><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p><code>Field</code> 定义如何取出一指令中，各<strong>字段</strong> (eg: <code>rd</code>, <code>rs1</code>, <code>rs2</code>, <code>imm</code>) 的值。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">field_def     := '%' identifier ( unnamed_field )* ( !function=identifier )?unnamed_field := number ':' ( 's' ) number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其语法由 <code>%</code> 开头，随后紧接着一个 <code>identifier</code> 及零个或多个 <code>unamed_field</code>，并可再加上可选的 <code>!function</code>。</p><ul><li><code>identifier</code> 可由开发者自定，如：<code>rd</code>、<code>imm</code>… 等。</li><li><code>unamed_field</code> 定义了该字段的所在比特。第一个数字定义了该字段的 <code>least-significant bit position</code>，第二个数字则定义了该字段的<code>比特长度</code>。另外可加上可选的 <code>s</code> 字符来标明在取出该字段后，是否需要做 符号扩展。<ul><li>Eg：<code>%rd 7:5</code> 代表 <code>rd</code> 占了指令中 bits 7 ~ bits 11 的位置 (insn[11:7])，共 5 bits。</li></ul></li><li><code>!function</code> 定义在截取出该字段的值后，所会再调用的 function。</li></ul><p><code>Field</code> (32-bits 指令) 最后会生成对应的 <code>extract32()</code> 及 <code>sextract32()</code> 代码，以用来取得指令中各字段的值：</p><h3 id="Field-示例"><a href="#Field-示例" class="headerlink" title="Field 示例"></a>Field 示例</h3><table><thead><tr><th>Input</th><th>Generated code</th></tr></thead><tbody><tr><td>%disp 0:s16</td><td>sextract(i, 0, 16)</td></tr><tr><td>%imm9 16:6 10:3</td><td>extract(i, 16, 6) &lt;&lt; 3</td></tr><tr><td>%disp12 0:s1 1:1 2:10</td><td>sextract(i, 0, 1) &lt;&lt; 11</td></tr><tr><td>%shimm8 5:s8 13:1 !function=expand_shimm8</td><td>expand_shimm8(sextract(i, 5, 8)) &lt;&lt; 1</td></tr></tbody></table><p>以 RISC-V 的 <code>U-type</code> 指令为例：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F18%2Ffb558390c2c5a8c8b9e1645d90cabfc8.png"></p><p>其中，<code>imm</code> 占 <code>insn[31:12]</code>，共20位，<code>rd</code> 占 <code>insn[11:7]</code>，且 <code>imm</code> 需要做 符号扩展 后 <code>左移 12 位</code> (<code>20-bit immediate is shifted left by 12 bits to form U immediates</code>)。因此，如果我们要定义 RISC-V 的 <code>U-type</code> 指令，则可以声明成：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">%rd       7:5%imm_u    12:s20                 !function=ex_shift_12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>20 表示占 20 bits</p></blockquote><p>最后会生成如下的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_u <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>static void decode_insn32_extract_u()</code> 是由下文 Format 定义所生成的，而 <code>arg_u *a</code> 则是由 Argument Set 定义所生成的，将会在后面的部分再做说明。</p></blockquote><p>可以看到：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>a-&gt;imm</code> 是由 <code>insn[31:12]</code> 所取得并做符号扩展，且会再调用 <code>ex_shift_12()</code> 来 <code>左移 12 个 bits</code>。</p><ul><li><p>P.S. RISC-V 的 <code>ex_shift_12()</code> 是通过定义在<code>./target/riscv/translate.c</code> 中 <code>EX_SH</code> 这个 macro 所展开的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">EX_SH</span><span class="token expression"><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">int</span> ex_shift_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">amount</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token keyword">int</span> imm<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#123;</span>                                         </span><span class="token punctuation">\</span>        <span class="token expression"><span class="token keyword">return</span> imm <span class="token operator">&lt;&lt;</span> amount<span class="token punctuation">;</span>                 </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span class="token function">EX_SH</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">EX_SH</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">EX_SH</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">EX_SH</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">EX_SH</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>a-&gt;rd</code> 是由 <code>insn[11:7]</code> 所取得。</p></li></ul><p>此外，在 <code>Decodetree</code> 的 spec 中也有提到，我们可以通过只定义 <code>!function</code> 来直接调用该 function。在这种情况下，只有 <code>DisasContext</code> 会被传入该 function。</p><p>如 ARM Thumb <code>./target/arm/t16.decode</code> 就有定义：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># Set S if the instruction is outside of an IT block.%s               !function=t16_setflags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">disas_t16_extract_addsub_2i</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_s_rri_rot <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rn <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>s <span class="token operator">=</span> <span class="token function">t16_setflags</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token operator">-></span>rot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，未包含任何 <code>unnamed_fields</code> 或 <code>!function</code> 的 <code>Field</code> 会被视为错误。</p><hr><h2 id="Argument-Set"><a href="#Argument-Set" class="headerlink" title="Argument Set"></a>Argument Set</h2><p><code>Argument Set</code> 定义用来保存从指令中所截取出来各字段的值。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">args_def    := '&amp;' identifier ( args_elt )+ ( !extern )?args_elt    := identifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其语法由 <code>&amp;</code> 开头，随后紧接着一个或多个的 <code>identifier</code> ，并可再加上可选的 <code>!extern</code> 。</p><ul><li><code>identifier</code> 可由开发者自订，如：<code>regs</code>、<code>loadstore</code>… 等。</li><li><code>!extern</code> 则表示是否在其他地方已经由其他的 decoder 定义过。如果有该字段，就<strong>不会</strong>再次生成对应的 <code>argument set struct</code>。</li></ul><h3 id="Argument-Set-示例"><a href="#Argument-Set-示例" class="headerlink" title="Argument Set 示例"></a>Argument Set 示例</h3><p>例1：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&amp;ampreg3 ra rb rc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成以下的 <code>argument set struct</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ra<span class="token punctuation">;</span>    <span class="token keyword">int</span> rb<span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_reg3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&amp;loadstore reg base offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则会生成以下的 <code>argument set struct</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> base<span class="token punctuation">;</span>    <span class="token keyword">int</span> offset<span class="token punctuation">;</span>    <span class="token keyword">int</span> reg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_loadstore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，以刚刚的 RISC-V <code>U-type</code> 指令为例，我们需要从指令中截取 <code>imm</code> 及 <code>rd</code> 字段的值，可以声明其 <code>argument set</code> 如下：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&amp;u    imm rd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后会生成以下的 <code>argument set struct</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> imm<span class="token punctuation">;</span>    <span class="token keyword">int</span> rd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_u<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此 <code>argument set struct</code> 会被传入由 <code>Format</code> 定义所生成的 extract function：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_u <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所传入的<code>arg_u</code> 会保存从指令中截取出的 <code>imm</code> 及 <code>rd</code> 字段的值，待后续使用。</p><h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p><code>Format</code> 定义了指令的格式 (如 RISC-V 中的 <code>R</code>、<code>I</code>、<code>S</code>、<code>B</code>、<code>U</code>、<code>J-type</code>)，并会生成对应的 decode function。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">fmt_def      := '@' identifier ( fmt_elt )+fmt_elt      := fixedbit_elt | field_elt | field_ref | args_reffixedbit_elt := [01.-]+field_elt    := identifier ':' 's'? numberfield_ref    := '%' identifier | identifier '=' '%' identifierargs_ref     := '&amp;' identifier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其语法由 <code>@</code> 开头，随后紧接着一个 <code>identifier</code> 及一个以上的 <code>fmt_elt</code>。</p><ul><li><p><code>identifier</code> 可由开发者自订，如：<code>opr</code>、<code>opi</code>… 等。</p></li><li><p><code>fmt_elt</code> 则可以采用以下不同的语法：</p><ul><li><p><code>fixedbit_elt</code> 包含一个或多个 <code>0</code>、<code>1</code>、<code>.</code>、<code>-</code>，每一个代表指令中的 1 个 bit。</p><ul><li><code>.</code> 代表该 bit 可以用 <code>0</code> 或是 <code>1</code> 来表示。</li><li><code>-</code> 代表该 bit 完全被忽略。</li></ul></li><li><p><code>field_elt</code> 可以用 Field 的语法来声明。</p><ul><li>Eg：<code>ra:5</code>、<code>rb:5</code>、<code>lit:8</code></li></ul></li><li><p><code>field_ref</code> 有下列两种格式 (以下范例参考上文所定义之 Field)：</p><ul><li><p><code>&#39;%&#39; identifier</code>：直接参考一个被定义过的 <code>Field</code>。</p><ul><li><p>如：<code>%rd</code>，会生成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><code>identifier &#39;=&#39; &#39;%&#39; identifier</code>：直接参考一个被定义过的 <code>Field</code>，但通过第一个 <code>identifier</code> 来重命名其所对应的 <code>argument</code> 名称。此方式可以用来指定不同的 <code>argument</code> 名称来参考至同一个 <code>Field</code>。</p><ul><li><p>如：<code>my_rd=%rd</code>，会生成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">-></span>my_rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p><code>args_ref</code> 指定所传入 decode function 的 <code>Argument Set</code>。若没有指定 <code>args_ref</code> 的话，<code>Decodetree</code> 会根据 <code>field_elt</code> 或 <code>field_ref</code> 自动生成一个 <code>Argument Set</code>。此外，一个 <code>Format</code> 最多只能包含一个 <code>args_ref</code>。</p></li></ul></li></ul><p>当 <code>fixedbit_elt</code> 或 <code>field_ref</code> 被定义时，该 <code>Foramt</code> 的所有的 bits 都必须被定义 (可通过 <code>fixedbit_elt</code> 或 <code>.</code> 来定义各个 bits，<code>空格</code>会被忽略)。</p><h3 id="Format-示例"><a href="#Format-示例" class="headerlink" title="Format 示例"></a>Format 示例</h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">@opi    ...... ra:5 lit:8    1 ....... rc:5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义了 <code>op1</code> 这个 <code>Format</code>，其中：</p><ul><li>insn[31:26] 可为 <code>0</code> 或 <code>1</code>。</li><li>insn[25:21] 为 <code>ra</code>。</li><li>insn[20:13] 为 <code>lit</code>。</li><li>insn[12] 固定为 <code>1</code>。</li><li>insn[11:5] 可为 <code>0</code> 或 <code>1</code>。</li><li>insn[4:0] 为 <code>rc</code>。</li></ul><p>此 <code>Format</code> 会生成以下的 decode function：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lit<span class="token punctuation">;</span>    <span class="token keyword">int</span> ra<span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_decode_insn320<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_opi</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_decode_insn320 <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>ra <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>lit <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rc <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于我们没有指定 <code>args_ref</code>，因此 <code>Decodetree</code> 根据了 <code>field_elt</code> 的定义，自动生成了 <code>arg_decode_insn320</code> 这个 <code>Argument Set</code>。</p><p>以 RISC-V <code>I-type</code> 指令为例：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># Fields:%rs1       15:5%rd        7:5# immediates:%imm_i    20:s12# Argment sets:&amp;i    imm rs1 rd@i       ........ ........ ........ ........ &amp;i      imm=%imm_i     %rs1 %rd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了 <code>i</code> 这个 <code>Format</code>，其中：</p><ul><li>insn[31:20] 为 <code>imm</code>，且为 符号扩展。</li><li>insn[19:5] 为 <code>rs1</code>。</li><li>insn[11:7] 为 <code>rd</code>。</li></ul><p>此外，我们可以看到：</p><ul><li>此 <code>Format</code> 指定了 <code>Argument Set</code>：<code>&amp;i</code>。 <code>&amp;i</code> 中必须包含所有有用到的 <code>arguments</code> (也就是：<code>imm</code>、<code>rs1</code> 及 <code>rd</code>)</li><li><code>imm</code> 是通过重命名的方式来参考 <code>%imm_i</code> 这个 <code>Field</code>。</li></ul><p>此范例会生成以下的 decode function：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> imm<span class="token punctuation">;</span>    <span class="token keyword">int</span> rd<span class="token punctuation">;</span>    <span class="token keyword">int</span> rs1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_i<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32extract_i</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_i <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     a<span class="token operator">-></span>rs1 <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比于第一个范例，由于这次我们有指定 <code>args_ref</code>：<code>&amp;i</code>，因此对应的 <code>arg_i</code> 会被传入 decode function。</p><hr><p>回到先前的 RISC-V <code>U-type</code> 指令，我们可以如同 <code>I-type</code> 指令定义其格式：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># Fields:%rd        7:5# immediates:%imm_u    12:s20                 !function=ex_shift_12# Argument sets:&amp;u    imm rd@u       ....................      ..... ....... &amp;u      imm=%imm_u          %rd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了 <code>u</code> 这个 <code>Format</code>，其中：</p><ul><li>insn[31:12] 为 <code>imm</code>，且为 符号扩展。</li><li>insn[11:7] 为 <code>rd</code>。</li></ul><p>会生成以下的 decode function：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> imm<span class="token punctuation">;</span>    <span class="token keyword">int</span> rd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_u<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_u <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到：</p><ul><li>此 <code>Format</code> 指定了 <code>Argument Set</code>：<code>&amp;u</code>。 <code>&amp;u</code> 中必须包含所有有用到的 <code>arguments</code> (也就是：<code>imm</code>、<code>rd</code>)</li><li><code>imm</code> 是通过重命名的方式来参考 <code>%imm_u</code> 这个 <code>Field</code>。</li></ul><h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p><code>Pattern</code> 实际定义了一个指令的 decode 方式。<code>Decodetree</code> 会根据 <code>Patterns</code> 的定义，来动态产生出对应的 <code>switch-case</code> decode 判断分支。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">pat_def      := identifier ( pat_elt )+pat_elt      := fixedbit_elt | field_elt | field_ref | args_ref | fmt_ref | const_eltfmt_ref      := '@' identifierconst_elt    := identifier '=' number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其语法由用户所定义的 <code>identifier</code>，随后紧接着一个以上的 <code>pat_elt</code>。</p><ul><li><p><code>identifier</code> 可由开发者自订，如：<code>addl_r</code>、<code>addli</code> … 等。</p></li><li><p><code>pat_elt</code> 则可以采用以下不同的语法：</p><ul><li><code>fixedbit_elt</code> 与在 <code>Format</code> 中 <code>fixedbit_elt</code> 的定义相同。</li><li><code>field_elt</code> 与在 <code>Format</code> 中 <code>field_elt</code> 的定义相同。</li><li><code>field_ref</code> 与在 <code>Format</code> 中 <code>field_ref</code> 的定义相同。</li><li><code>args_ref</code> 与在 <code>Format</code> 中 <code>args_ref</code> 的定义相同。</li><li><code>fmt_ref</code> 直接参考一个被定义过的Format。</li><li><code>const_elt</code> 可以直接指定某一个 <code>argument</code> 的值。</li></ul></li></ul><p>由于 <code>Pattern</code> 实际定义了一个指令的 decode 方式，因此<strong>所有的 bits</strong> 及 <strong>arguments (如果有参考 args_ref 的话)</strong>  都必须明确的被定义，如果在搭配了所有的 <code>pat_elt</code> 后还有未定义的 bits 或是 arguments 的话，<code>Decodetree</code> 便会报错。</p><p>此外，<code>Pattern</code> 所产生出来的 decoder，最后还会调用对应的 <code>translator function</code>。<code>translator function</code> 需开发者自行定义。</p><h3 id="Pattern-示例"><a href="#Pattern-示例" class="headerlink" title="Pattern 示例"></a>Pattern 示例</h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">addl_i   010000 ..... ..... .... 0000000 ..... @opi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义了 <code>addl_i</code> 这个指令的 <code>Pattern</code>，其中：</p><ul><li>insn[31:26] 为 <code>010000</code>。</li><li>insn[11:5] 为 <code>0000000</code>。</li><li>参考了 Format 示例中 定义的 <code>@opi</code> <code>Format</code>。</li><li>由于 <code>Pattern</code> 的<strong>所有 bits</strong> 都必须明确的被定义，因此 <code>@opi</code> 必须包含其余 <code>insn[25:12]</code> 及 <code>insn[4:0]</code> 的格式定义，否则 <code>Decodetree</code> 便会报错。</li></ul><p>最后 <code>addl_i</code> 的 decoder 还会调用 <code>trans_addl_i()</code> 这个 <code>translator function</code>。</p><p>搭配之前介绍的 Fields、Argument Sets 及 Formats，让我们再看几个完整的例子应该会更清楚 <code>Decodetree</code> 是怎产生一个指令的 decoder 的。</p><p>首先是 RISC-V 的 <code>lui</code> 及 <code>auipc</code> 指令：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F19%2F922be39211d73158159edf9993a2c906.png"></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># Fields:%rd        7:5# immediates:%imm_u    12:s20                 !function=ex_shift_12# Argument sets:&amp;u    imm rd# Formats:@u       ....................      ..... ....... &amp;u      imm=%imm_u          %rd# Patternslui      ....................       ..... 0110111 @uauipc    ....................       ..... 0010111 @u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会产生以下 <code>lui</code> 及 <code>auipc</code> 的 decoder：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> imm<span class="token punctuation">;</span>    <span class="token keyword">int</span> rd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_u<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_u <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> bool <span class="token function">decode_insn32</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        arg_u f_u<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> u<span class="token punctuation">;</span>    <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000007f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0x00000017</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_auipc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0x00000037</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_lui</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾到目前为止所介绍的：</p><ul><li><p><code>Argument Sets</code>：<code>&amp;u</code> 这个 <code>argument set</code> 包含了 <code>imm</code> 及 <code>rd</code> 这两个 <code>arguments</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> imm<span class="token punctuation">;</span>    <span class="token keyword">int</span> rd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_u<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Fields</code>： <code>imm</code> 及 <code>rd</code> 分别位在 insn[31:12] 及 insn[11:7]，且 <code>imm</code> 为 符号扩展。最后在截取出 <code>imm</code> 的值后，还会调用 <code>ex_shift_12()</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>Formats</code>：<code>@u</code> 定义了 RISC-V <code>U-type</code> 指令的格式</p><ul><li>参考了 <code>&amp;u</code> 这个 <code>Argument Set</code>，因此 decode function 会传入 <code>arg_u</code> 作为参数。</li><li>insn[31:12] 参考了 <code>imm_u</code> 这个 <code>Field</code> (并重命名为 <code>imm</code>)</li><li>insn[11:7] 参考了 <code>rd</code> 这个 <code>Field</code>。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_u <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token function">ex_shift_12</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">sextract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Patterns</code>：</p><ul><li><code>lui</code> 的 <code>opcode</code> (insn[6:0]) 为 <code>0010111</code>，也就是 <code>0x17</code>，在产生出来的 <code>switch-case</code> 中可以看到其对应的 <code>case</code>。</li><li><code>lui</code> 的 decoder 最后调用了 <code>trans_lui()</code>，并传入 <code>DisasContext</code> 及经由 <code>decode_insn32_extract_u()</code> 所解析出来的 <code>arg_u</code>。</li><li><code>auipc</code> 的 <code>opcode</code> (insn[6:0]) 为 <code>0110111</code>，也就是 <code>0x37</code>，在产生出来的 <code>switch-case</code> 中可以看到其对应的 <code>case</code>。</li><li><code>auipc</code> 的 decoder 最后调用了 <code>trans_auipc()</code>，并传入 <code>DisasContext</code> 及经由 <code>decode_insn32_extract_u()</code> 所解析出来的 <code>arg_u</code>。</li><li>P.S. 这边由于 <code>Decodetree</code> 发现 <code>lui</code> 及 <code>auipc</code> 可以共用 <code>decode_insn32_extract_u()</code>，因此将其提到了 <code>switch-case</code> 之外。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool <span class="token function">decode_insn32</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        arg_u f_u<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> u<span class="token punctuation">;</span>    <span class="token function">decode_insn32_extract_u</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000007f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0x00000017</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_auipc</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0x00000037</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_lui</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们另外可以发现，<code>Pattern</code> + <code>Format</code> 把所有的 32-bits 都给了明确的定义：</p><ul><li><code>Pattern</code> 定义了 <code>opcode</code> (insn[6:0])。</li><li><code>Format</code> 参考了 <code>imm</code> (insn[31:12]) 及 <code>rd</code> (insn[11:7])。</li></ul><p>如果有任何未明确定义的 bits 的话，<code>Decodetree</code> 便会报错，例如如果我们将 <code>lui</code> 的 <code>opcode</code> 最高 2 个 bits (insn[6:5]) 由 <code>01</code> 改成 <code>..</code>：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">lui      ....................       ..... ..10111 @u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Decodetree</code> 在解析时，便会报错：</p><blockquote><p>./insn32.decode:17: error: (‘bits left unspecified (0x00000060)’,)</p></blockquote><p><code>Decodetree</code> 提醒我们，insn[6:5] (<code>0x00000060</code>) 尚未给出明确定义，并会显示出其错误的行数。</p><p><code>trans_lui()</code> 和 <code>trans_auipc()</code> 被定义在 <code>target/riscv/insn_trans/trans_rvi.inc.c</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool <span class="token function">trans_lui</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_lui <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>rd <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">tcg_gen_movi_tl</span><span class="token punctuation">(</span>cpu_gpr<span class="token punctuation">[</span>a<span class="token operator">-></span>rd<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token operator">-></span>imm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> bool <span class="token function">trans_auipc</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_auipc <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>rd <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">tcg_gen_movi_tl</span><span class="token punctuation">(</span>cpu_gpr<span class="token punctuation">[</span>a<span class="token operator">-></span>rd<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token operator">-></span>imm <span class="token operator">+</span> ctx<span class="token operator">-></span>base<span class="token punctuation">.</span>pc_next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>trans_*()</code> 负责实际指令的业务逻辑及产生对应的 <code>TCG codes</code>。</p></li></ul><p>如同先前所介绍，<code>Patterns</code> 的 <code>pat_elt</code> 也可以采用 <code>field_elt</code> 语法，如 RISC-V 的 <code>fence</code> 指令：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">fence    ---- pred:4 succ:4 ----- 000 ----- 0001111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>insn[27:24] 为 <code>pred</code>。</li><li>insn[23:20] 为 <code>succ</code>。</li><li>insn[14:12] 固定为 <code>000</code>。</li><li>insn[6:0] 为 <code>opcode</code> (<code>0001111</code>)。</li><li>没有参考任何的 <code>Format</code>。</li><li>剩下的 insn[31:28]、insn[19:15]、insn[11:7] 被声明为 <code>-</code>，因此就算没有被明确定义也没有关系。</li></ul><p>所生成 <code>fence</code> 的 decoder 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pred<span class="token punctuation">;</span>    <span class="token keyword">int</span> succ<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> arg_decode_insn320<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn32_extract_decode_insn32_Fmt_0</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_decode_insn320 <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>pred <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>succ <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> bool <span class="token function">decode_insn32</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        arg_decode_insn320 f_decode_insn320<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> u<span class="token punctuation">;</span>    <span class="token function">decode_insn32_extract_decode_insn32_Fmt_0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode_insn320<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000707f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0x0000000f</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_fence</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode_insn320<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，虽然这次我们没有参考任何的 <code>Argument Set</code>，但 <code>Decodetree</code> 还是替我们生成了一个包含 <code>pred</code> 和 <code>succ</code> 的 <code>arg_decode_insn320</code> 。</p><p><code>trans_fence()</code> 同样是被定义在 <code>./target/riscv/insn_trans/trans_rvi.inc.c</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool <span class="token function">trans_fence</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_fence <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">tcg_gen_mb</span><span class="token punctuation">(</span>TCG_MO_ALL <span class="token operator">|</span> TCG_BAR_SC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pattern-Groups"><a href="#Pattern-Groups" class="headerlink" title="Pattern Groups"></a>Pattern Groups</h2><p><code>Pattern Groups</code> 由一个以上的 <code>Patterns</code> 所组成，其主要差别是不同 <code>Patterns</code> 之间的 bits 可以 overlap。当同组中有多个 <code>Patterns</code> 时，会依据该组中各 <code>Pattern</code> 的声明顺序依序判断目前的指令是否符合其定义。除此之外，当符合的 <code>Pattern</code> 其 <code>trans_*()</code> 回传值为 <code>false</code> 时，也会被视为<strong>不相符</strong>，而继续判断该组中的下一个 <code>Pattern</code>。因此 <code>Pattern Groups</code> 非常适合将多个相似格式的指令给组成同一个 <code>Pattern Group</code>。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">group    := '&#123;' ( pat_def | group )+ '&#125;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各 <code>Pattern Group</code> 以 <code>&#123;</code> 开头，并以 <code>&#125;</code> 结尾，且允许 <code>nested pattern groups</code> 的存在，其他语法皆与 <code>Pattern</code> 相同。</p><h3 id="Pattern-Group-示例"><a href="#Pattern-Group-示例" class="headerlink" title="Pattern Group 示例"></a>Pattern Group 示例</h3><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">&#123;  &#123;    nop   000010 ----- ----- 0000 001001 0 00000    copy  000010 00000 r1:5  0000 001001 0 rt:5  &#125;  or      000010 rt2:5 r1:5  cf:4 001001 0 rt:5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会产生以下的 decoder：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0xfc000fe0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0x08000240</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000f000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000001f</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">extract_decode_Fmt_0</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode0<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_nop</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x03e00000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">extract_decode_Fmt_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode1<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_copy</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>　      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">extract_decode_Fmt_2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode2<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_or</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>  <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当指令的值符合 <code>nop</code> 及 <code>copy</code> 这个内层 <code>Pattern Group</code> 时，会先判断该指令是否符合 <code>nop</code> 指令的定义，且 <code>trans_nop()</code> 的回传值为 <code>true</code>。否则的话，就会继续判断是否符合同组中的 <code>copy</code> 指令。若都不符，就会再判断是否符合外层 <code>Pattern Group</code> 的 <code>or</code> 指令。若仍不符，才会回传 <code>false</code> 表示 decode 失败。</p><p>与单纯使用 <code>Pattern</code> 最大不同的是，当一 <code>Pattern</code> 的 <code>trans_*()</code> 回传值为 <code>false</code> 时，不会直接回传 <code>false</code> (代表 decode 失败)，而是会接续着判断后续的 <code>Patterns</code> 是否相符。</p><p>RISC-V Compressed-Extension 中的 <code>c.ebreak</code>、<code>c.jalr</code>、及 <code>c.add</code> 指令，由于这三个指令的格式非常相似，因此非常适合使用 <code>Pattern Group</code> 来定义：</p><p>RISC-V spec. 中定义：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F19%2F722c64cc1a321ef23fab81e722a24154.png"></p><ul><li><code>C.EBREAK</code>指令与<code>C.ADD</code>指令共享相同的<code>opcode</code>，但是<code>rd</code>和<code>rs2</code>都为<code>zero</code>，因此也可以使用<code>CR</code>格式。</li><li><code>C.JALR</code>指令只有在<code>rs1≠x0</code>时才有效；当<code>rs1=x0</code>时，对应的代码点是<code>C.EBREAK</code>指令。</li><li><code>C.ADD</code>指令只有在<code>rs2≠x0</code>时才有效；当<code>rs2=x0</code>时，对应的代码点是<code>C.JALR</code>和<code>C.EBREAK</code>指令。具有<code>rs2̸=x0</code>和<code>rd=x0</code>的代码点是<code>HINTs</code>。</li></ul><p><code>c.ebreak</code>、<code>c.jalr</code>、<code>c.add</code> 三个指令：</p><ul><li>insn[15:13]、insn[12]、insn[1:0] 的值皆相同。</li><li>当 insn[11:7] 且 insn[6:2] 的值皆为 <code>0</code> (<code>rs1=0</code> 且 <code>rs2=0</code>) 时为 <code>c.ebreak</code> 指令。</li><li>当只有 insn[11:7] 的值为 <code>0</code> (<code>rs1=0</code> 且 <code>rs2≠0</code>) 时为 <code>c.jalr</code> 指令。</li><li>否则为 <code>c.add</code> 指令 (<code>rs1≠x0</code> 且 <code>rs2≠0</code>)。</li></ul><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain"># Fields%rd        7:5%rs2_5     2:5# Argument Sets&amp;r         rd rs1 rs2   !extern&amp;i         imm rs1 rd   !extern# Formats@cr        ....  ..... .....  .. &amp;r      rs2=%rs2_5       rs1=%rd     %rd@c_jalr    ... . .....  ..... .. &amp;i      imm=0 rs1=%rd# Pattern Groups&#123;  ebreak          100 1  00000  00000 10  jalr            100 1  .....  00000 10 @c_jalr rd=1  # C.JALR  add             100 1  .....  ..... 10 @cr&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所生成的 decoder 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn16_extract_c_jalr</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_i <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>imm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     a<span class="token operator">-></span>rs1 <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn16_extract_cr</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_r <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">-></span>rs2 <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rs1 <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-></span>rd <span class="token operator">=</span> <span class="token function">extract32</span><span class="token punctuation">(</span>insn<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">decode_insn16_extract_decode_insn16_Fmt_2</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> arg_decode_insn162 <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> bool <span class="token function">decode_insn16</span><span class="token punctuation">(</span>DisasContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> insn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        arg_decode_insn162 f_decode_insn162<span class="token punctuation">;</span>        arg_i f_i<span class="token punctuation">;</span>        arg_r f_r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> u<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000f003</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0x00009002</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x00000ffc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token function">decode_insn16_extract_decode_insn16_Fmt_2</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode_insn162<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_ebreak</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_decode_insn162<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>insn <span class="token operator">&amp;</span> <span class="token number">0x0000007c</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token function">decode_insn16_extract_c_jalr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_i<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>            u<span class="token punctuation">.</span>f_i<span class="token punctuation">.</span>rd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_jalr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token function">decode_insn16_extract_cr</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_r<span class="token punctuation">,</span> insn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trans_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>f_r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当指令格式符合 <code>c.ebreak</code>、<code>c.jalr</code>、<code>c.add</code> 的 <code>Pattern Group</code> 时，会依序判断该指令是否符合 <code>c.ebreak</code>、<code>c.jalr</code>、<code>c.add</code> 的定义以及其对应的 <code>trans_*()</code>。</p><p>另外值得一提的是，在 <code>c_jalr</code> <code>Format</code> 和 <code>jalr</code> <code>Pattern</code> 中有分别指定其 <code>imm</code> 及 <code>rd</code> 的值为 <code>0</code>，所生成的 codes 也会分别在对应的地方将该值设为 <code>0</code> (见 codes 注解说明)。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是 <code>Decodetree</code> 的语法说明。通过 <code>Decodetree</code>，我们不用再像以前以样写一大包的 <code>switch-case</code> 来 decode 指令。将不同类型的指令写至不同的 decode 档，不仅方便维护，阅读起来也更为容易。</p><hr><ul><li><code>--translate</code>：translator function 的 prefix，默认为 <code>trans</code>。一旦指定后，translator function 的 scope 就不会再是 <code>static</code>。</li><li><code>--decode</code>：decode function 的 prefix，默认为 <code>decode</code>，且 scope 为 <code>static</code>。一旦指定后，decode function 的 scope 就不会再是 <code>static</code>。</li><li><code>--static-decode</code>：如同 <code>--decode</code>，不过 decode function 的 scope 仍维持为 <code>static</code>。</li><li><code>-o</code> / <code>--output</code>：指定生成的 decoder <code>.c</code> 档路径。</li><li><code>-w</code> / <code>--insnwidth</code>：指令长度，eg：<code>32</code> or <code>16</code>，默认为 <code>32</code>。</li><li><code>--varinsnwidth</code>：指令为不定长度。</li><li><code>最后一个参数</code>为输入的 decode 档路径。</li></ul><p>运行范例：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">./decodetree.py -o target/riscv/decode_insn16.inc.c --static-decode decode_insn16 \    -w 16 ./insn16.decode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">static inline int32_t sextract32(uint32_t value, int start, int length)&#123;    assert(start &gt;&#x3D; 0 &amp;&amp; length &gt; 0 &amp;&amp; length &lt;&#x3D; 32 - start);        return ((int32_t)(value &lt;&lt; (32 - length - start))) &gt;&gt; (32 - length);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;QEMU 在 decode 指令的时候，需要调用各平台所定义的 instruction decoders 来解析指令。如在 ARM 平台下，就定义了：&lt;code&gt;disas_arm_insn()&lt;/code&gt;、&lt;code&gt;disas_thumb_insn()&lt;/code&gt; </summary>
      
    
    
    
    <category term="QEMU 源码分析" scheme="https://lifeislife.cn/categories/QEMU-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
    <category term="QEMU" scheme="https://lifeislife.cn/tags/QEMU/"/>
    
    <category term="TCG" scheme="https://lifeislife.cn/tags/TCG/"/>
    
    <category term="Decodetree" scheme="https://lifeislife.cn/tags/Decodetree/"/>
    
  </entry>
  
  <entry>
    <title>BootROM 中 SPI 如何适配不同厂家的 Flash 芯片</title>
    <link href="https://lifeislife.cn/2024/03/30/BootROM%E4%B8%ADSPI%E5%A6%82%E4%BD%95%E9%80%82%E9%85%8D%E4%B8%8D%E5%90%8C%E5%8E%82%E5%AE%B6%E7%9A%84Flash%E8%8A%AF%E7%89%87/"/>
    <id>https://lifeislife.cn/2024/03/30/BootROM%E4%B8%ADSPI%E5%A6%82%E4%BD%95%E9%80%82%E9%85%8D%E4%B8%8D%E5%90%8C%E5%8E%82%E5%AE%B6%E7%9A%84Flash%E8%8A%AF%E7%89%87/</id>
    <published>2024-03-30T13:38:10.000Z</published>
    <updated>2024-03-31T02:47:01.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>一款 SoC 芯片，会支持多种方式启动，比如从 NAND Flash、SPI Flash、eMMC、USB、UART 启动。对于 SPI Flash 启动，BootROM 需要知道 SPI Flash 的型号、容量、页大小、擦除大小等信息，以便正确读取、写入、擦除 SPI Flash。但是，不同厂家的 SPI Flash，这些参数可能不同，而 ROM 中的代码是无法修改的，并且容量有限，如何以最小的代码量，适配不同厂家的 SPI Flash 呢？</p><h1 id="SPI-开发流程"><a href="#SPI-开发流程" class="headerlink" title="SPI 开发流程"></a>SPI 开发流程</h1><ul><li><p>SPI 控制器初始</p><ul><li>SPI 控制器有自己的寄存器，可以配置 SPI 的页，块的擦除时间，是否需要 DMA，是否开启中断，单次读写的大小等等。</li></ul></li><li><p>使用 SPI 对 Flash 进行配置</p><ul><li>BootROM 的 SPI 支持三种模式：Single、Dual、Quad，这不仅要配置 SPI 本身的寄存器，也需要配置 Flash 的寄存器。配置 Flash 的寄存器就需要使用 SPI 来完成。<ul><li>BootROM 中配置 SPI 控制器的 <code>SPIC_CSR_01</code> 寄存器的<code>spi_bus_mode</code> 位可以配置 SPI 的模式；</li><li>查阅 Flash 手册，找到配置总线模式的寄存器以及操作它的命令，如 WINBOND-W25Q128JW 这款 Flash 的配置寄存器为 <code>Status Register-2</code>，Flash 的寄存器是无法直接读写的，所以需要在 Flash 手册中找到操作这个寄存器的命令，在手册的 Instructions 章节可以找到这款 Flash 的配置命令为 <code>Write Status Register-2</code>，命令码为 <code>0x31</code>，只要我们向 Flash 发送 <code>0x31</code>，就可以配置 Flash 的总线模式了。<br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F30%2Fe7024b05e381b724d3471744f323de76.png"><br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F30%2F350d91ef1d63ed0c5650e4dfd2c72917.png"></li><li>如何向 Flash 发送指令？需要将真正要发送的指令写入 SPI 的寄存器<code>SPIC_CSR_06</code>，该寄存器的各个 Bit 可以配置命令码，命令类型，命令是否有效等信息。我们将之前的命令码<code>0x31</code>写入到<code>SPIC_CSR_06</code>的<code>command_code</code>位，然后将<code>SPIC_CSR_06</code>的<code>command_type</code>位设置为<code>write status register</code>，SPI 就会自动将这些信息发送给 Flash。Flash 接收到命令后，会根据命令码执行配置寄存器的操作。</li></ul></li></ul></li><li><p>SPI 读写 Flash</p><ul><li>和配置 Flash 总线模式一样，读写 Flash 也需要配置 SPI 控制器的寄存器，以及配置 Flash 的寄存器。SPI 控制器的寄存器配置和配置 Flash 总线模式一样，只是命令码和命令类型不同。稍有不同的是需要先配置好 SPI 寄存器，配置读写的大小以及读写的地址，然后再配置<code>SPIC_CSR_06</code>。Flash接收到命令后，会根据命令码执行读写操作。主设备只需要读写 Flash 的指定地址即可读写到数据。</li></ul></li></ul><h1 id="SPI-驱动如何适配不同的-Flash"><a href="#SPI-驱动如何适配不同的-Flash" class="headerlink" title="SPI 驱动如何适配不同的 Flash"></a>SPI 驱动如何适配不同的 Flash</h1><p>在开发流程中我们并未考虑不同厂家的 Flash 如何操作，只是关心了 WINBOND-W25Q128JW 这款 Flash 的操作。在操作过程中我们可以发现，不同厂家的 Flash 的操作基本一致，只是命令码、页大小、擦除大小等参数不同。我们只要针对不同的 Flash，配置不同的参数即可。但是，如何知道当前 Flash 的参数呢？这就需要用到 SFDP 了。</p><p>SFDP 是 JEDEC 发布的 JESD216 的一个新标准，目前的版本号是 V1.0。简而言之，SFDP（Serial Flash Discoverable Parameters）就相当于一张存储了 FLASH 部分属性的表，此表是不占用 FLASH 本身的存储空间的。SFDP 中的信息自出厂就被固定，只供读取，开发人员可通过发送操作指令 0x5A 来读取当前 FLASH 的 SFDP 相关内容，这有利于开发人员了解 FLASH 之间的差异，提高开发效率，缩短整个开发周期。</p><p>也就是只要 Flash 研发时遵循了 JESD216 这个标准，我们都可以通过发送 0x5A 这个命令码，去获取Flash相关参数。最为关键的就是其中会保存 Flash 厂商的 ID，当我们获取到 Flash 厂商的 ID 时，我们就可以根据 ID 执行不同的配置操作。</p><p>对于 WINBOND-W25Q128JW 这款 Flash，在数据手册的Feature里就可以看到它是支持 SFDP 的：<br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F30%2Fbe54a549cc9266d120b1e2db37d68555.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h1&gt;&lt;p&gt;一款 SoC 芯片，会支持多种方式启动，比如从 NAND Flash、SPI Flash、eMMC、USB、UART 启动。</summary>
      
    
    
    
    <category term="Embedded Development" scheme="https://lifeislife.cn/categories/Embedded-Development/"/>
    
    
    <category term="BootROM" scheme="https://lifeislife.cn/tags/BootROM/"/>
    
    <category term="SPI" scheme="https://lifeislife.cn/tags/SPI/"/>
    
    <category term="Flash" scheme="https://lifeislife.cn/tags/Flash/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Copilot CLI命令行AI工具</title>
    <link href="https://lifeislife.cn/2024/03/24/GitHub-Copilot-CLI%E5%91%BD%E4%BB%A4%E8%A1%8CAI%E5%B7%A5%E5%85%B7/"/>
    <id>https://lifeislife.cn/2024/03/24/GitHub-Copilot-CLI%E5%91%BD%E4%BB%A4%E8%A1%8CAI%E5%B7%A5%E5%85%B7/</id>
    <published>2024-03-24T01:44:16.000Z</published>
    <updated>2024-03-24T02:33:53.513Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub Copilot CLI 是一个命令行工具，它允许你在终端中使用 GitHub Copilot。你可以使用它来获取代码建议，这些建议是由 OpenAI 的 GPT-4 模型生成的。这个工具可以在任何支持命令行的环境中使用，包括 Visual Studio Code 的集成终端。</p><p>参考官方文档：<a href="https://docs.github.com/en/copilot/github-copilot-in-the-cli/using-github-copilot-in-the-cli">Using GitHub Copilot in the CLI - GitHub Docs</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>前提：</p><ol><li><p>需要订阅Github Copilot，每月$10。</p></li><li><p>需要安装GH CLI</p></li></ol><p>订阅自行解决，接下来安装GH CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p -m <span class="token number">755</span> /etc/apt/keyrings <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/keyrings/githubcli-archive-keyring.gpg <span class="token operator">></span> /dev/null <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chmod</span> go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/github-cli.list <span class="token operator">></span> /dev/null <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gh -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没法安装，可以下载deb文件手动安装。<a href="https://github.com/cli/cli/releases/tag/v2.46.0">Release GitHub CLI 2.46.0 · cli/cli</a></p><p>安装完GH CLI后，安装Copilot CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gh auth login<span class="token comment"># 选择登录账号类型为Github.com</span>? What account <span class="token keyword">do</span> you want to log into?  <span class="token punctuation">[</span>Use arrows to move, <span class="token builtin class-name">type</span> to filter<span class="token punctuation">]</span><span class="token operator">></span> GitHub.com  GitHub Enterprise Server<span class="token comment"># 选择传输协议为SSH</span>? What is your preferred protocol <span class="token keyword">for</span> Git operations on this host?  <span class="token punctuation">[</span>Use arrows to move, <span class="token builtin class-name">type</span> to filter<span class="token punctuation">]</span>  HTTPS<span class="token operator">></span> SSH<span class="token comment"># 选择一个本地的公钥，并命名SSH key的名称</span>? Title <span class="token keyword">for</span> your SSH key: <span class="token punctuation">(</span>GitHub CLI<span class="token punctuation">)</span> wsl2<span class="token comment"># 选择验证方式为使用浏览器验证</span>? How would you like to authenticate GitHub CLI?  <span class="token punctuation">[</span>Use arrows to move, <span class="token builtin class-name">type</span> to filter<span class="token punctuation">]</span><span class="token operator">></span> Login with a web browser  Paste an authentication token<span class="token operator">!</span> First copy your one-time code: 7AAA-SA47<span class="token comment"># 回车后会弹出浏览器，输入验证码即可</span>Press Enter to <span class="token function">open</span> github.com <span class="token keyword">in</span> your browser<span class="token punctuation">..</span>.<span class="token operator">!</span> Failed opening a web browser at https://github.com/login/device  fork/exec /usr/bin/winchrome: <span class="token builtin class-name">exec</span> <span class="token function">format</span> error  Please try entering the URL <span class="token keyword">in</span> your browser manually<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>WSL2 环境下可能会出现无法打开浏览器的情况，可以手动打开浏览器输入地址验证<a href="https://github.com/login/device%E3%80%82">https://github.com/login/device。</a></p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>支持两个命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解释代码</span>gh copilot explain<span class="token comment"># 获取命令行建议</span>gh copilot suggest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gh copilot explain <span class="token string">"sudo apt-get"</span>Welcome to GitHub Copilot <span class="token keyword">in</span> the CLI<span class="token operator">!</span>version <span class="token number">1.0</span>.1 <span class="token punctuation">(</span><span class="token number">2024</span>-03-22<span class="token punctuation">)</span>I'm powered by AI, so surprises and mistakes are possible. Make sure to verify any generated code or suggestions, and share feedback so that we can learn and improve. For <span class="token function">more</span> information, see https://gh.io/gh-copilot-transparencyExplanation:                                                                                                                                                                                                                                                                                                                                                            • <span class="token function">sudo</span> is used to run a <span class="token builtin class-name">command</span> with elevated rights, typically as a superuser.                                                                                                      • <span class="token function">apt-get</span> is the Ubuntu package manager.                                                                                                                                             • It is used to manage packages on the system, including installing, updating, and removing software packages.                                                                     • It requires administrative privileges to perform these operations.                                                                                                               • Additional sub-commands can be used with <span class="token function">apt-get</span> to perform specific tasks, such as install, remove, update, etc.                                                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gh copilot suggest <span class="token string">"Install git"</span>Welcome to GitHub Copilot <span class="token keyword">in</span> the CLI<span class="token operator">!</span>version <span class="token number">1.0</span>.1 <span class="token punctuation">(</span><span class="token number">2024</span>-03-22<span class="token punctuation">)</span>I'm powered by AI, so surprises and mistakes are possible. Make sure to verify any generated code or suggestions, and share feedback so that we can learn and improve. For <span class="token function">more</span> information, see https://gh.io/gh-copilot-transparency? What kind of <span class="token builtin class-name">command</span> can I <span class="token builtin class-name">help</span> you with?  <span class="token punctuation">[</span>Use arrows to move, <span class="token builtin class-name">type</span> to filter<span class="token punctuation">]</span><span class="token operator">></span> generic shell <span class="token builtin class-name">command</span>  gh <span class="token builtin class-name">command</span>  <span class="token function">git</span> <span class="token builtin class-name">command</span>Suggestion:                                                                                                                                                                          <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>                                                                                                                                                     ? Select an option  <span class="token punctuation">[</span>Use arrows to move, <span class="token builtin class-name">type</span> to filter<span class="token punctuation">]</span><span class="token operator">></span> Copy <span class="token builtin class-name">command</span> to clipboard  Explain <span class="token builtin class-name">command</span>  Execute <span class="token builtin class-name">command</span>  Revise <span class="token builtin class-name">command</span>  Rate response  Exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gh copilot 默认提供了这两个命令的别名，无需输入完整命令，可以直接使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ghce 为 gh copilot explain 的别名</span>ghce <span class="token string">"sudo apt-get"</span><span class="token comment"># ghcs 为 gh copilot suggest 的别名</span>ghcs <span class="token string">"install git"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了便于在每个终端中使用 gh copilot cli，将以下配置放到配置文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'eval "$(gh copilot alias -- zsh)"'</span> <span class="token operator">>></span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub Copilot CLI 是一个命令行工具，它允许你在终端中使用 GitHub Copilot。你可以使用它来获取代码建议，这些建议是由 OpenAI 的 GPT-4 模型生成的。这个工具可以在任何支持命令行的环境中使用，包括 Visual Studio Cod</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="https://lifeislife.cn/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="GitHub Copilot" scheme="https://lifeislife.cn/tags/GitHub-Copilot/"/>
    
    <category term="AI" scheme="https://lifeislife.cn/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>RemoteX11 远程调试带GUI应用</title>
    <link href="https://lifeislife.cn/2024/03/03/RemoteX11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6GUI%E5%BA%94%E7%94%A8/"/>
    <id>https://lifeislife.cn/2024/03/03/RemoteX11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6GUI%E5%BA%94%E7%94%A8/</id>
    <published>2024-03-03T12:45:56.000Z</published>
    <updated>2024-03-03T12:46:46.706Z</updated>
    
    <content type="html"><![CDATA[<p>Windows上通过WSL2进行Linux开发，但是有时候需要开发带GUI的引用，这样就需要将图像转发。</p><h2 id="配置Windows"><a href="#配置Windows" class="headerlink" title="配置Windows"></a>配置Windows</h2><p>下载安装XMing，启动Xlaunch。</p><ol><li>选择MultiWindow</li><li>设置Display number为10（可以自行设置，主要是需要和后面在WSL2中设置的变量保持一致）</li><li>选择Start no client（Windows的XMing是被动等待接收图像数据，所以选择该项）</li><li>一直下一页，其余保持默认，点击完成即可。</li></ol><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/03/b1fa974ebfa7e08576cc61bce4307640.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/03/b0a29ceb2b30d4dc68a9d969859698c3.png"></p><h2 id="配置VSCode"><a href="#配置VSCode" class="headerlink" title="配置VSCode"></a>配置VSCode</h2><p>安装RemoteX11插件，直接在插件中心搜索安装即可。</p><p>打开设置页面，搜索Remote x11，找到如下配置项，将Display Number配置为10</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/03/6bf072325b38892eda270dabf4d3a1be.png"></p><h2 id="配置WSL2"><a href="#配置WSL2" class="headerlink" title="配置WSL2"></a>配置WSL2</h2><p>安装xclock用于测试</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt-get install xclock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境变量</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">export DISPLAY=localhost<span class="token punctuation">:</span><span class="token number">10.0</span><span class="token comment"># 或者</span>export DISPLAY=<span class="token punctuation">:</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行xclock查看结果</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/03/2e35553c8672c1bd92e4320b2d88d562.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows上通过WSL2进行Linux开发，但是有时候需要开发带GUI的引用，这样就需要将图像转发。&lt;/p&gt;
&lt;h2 id=&quot;配置Windows&quot;&gt;&lt;a href=&quot;#配置Windows&quot; class=&quot;headerlink&quot; title=&quot;配置Windows&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="https://lifeislife.cn/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
    <category term="Linux" scheme="https://lifeislife.cn/tags/Linux/"/>
    
    <category term="VSCode" scheme="https://lifeislife.cn/tags/VSCode/"/>
    
    <category term="WSL2" scheme="https://lifeislife.cn/tags/WSL2/"/>
    
  </entry>
  
  <entry>
    <title>解决系统依赖错误GLIBCXX_3.4.29 not found</title>
    <link href="https://lifeislife.cn/2024/03/02/%E8%A7%A3%E5%86%B3%E7%B3%BB%E7%BB%9F%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AFGLIBCXX-3-4-29-not-found/"/>
    <id>https://lifeislife.cn/2024/03/02/%E8%A7%A3%E5%86%B3%E7%B3%BB%E7%BB%9F%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AFGLIBCXX-3-4-29-not-found/</id>
    <published>2024-03-02T14:21:23.000Z</published>
    <updated>2024-03-03T02:22:11.707Z</updated>
    
    <content type="html"><![CDATA[<p>以前对软件包的构建不太了解，喜欢随意修改软件源列表，软件源和当前系统的版本不一致就会出现安装了一个依赖较多的软件包后会出现连锁反应，修改了所有依赖的软件包版本，导致系统故障。最常出现的就是修改了GCC版本，导致GLIBCXX版本不一致，导致系统软件无法运行。</p><p>如果你的系统还能正常安装软件，那么修改软件源和当前系统版本保存一致，然后更新软件，并重新安装GCC即可解决问题。具体步骤如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改软件源</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list<span class="token comment"># 检查当前系统版本</span>lsb_release -a<span class="token comment"># 将软件源修改为当前系统版本的软件源，Ubuntu系统版本号对应的软件源列表可以在https://wiki.ubuntu.com/Releases查看</span><span class="token comment"># 更新软件</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token comment"># 安装GCC，build-essential包含了GCC</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你和我一样倒霉，连 apt 都无法使用，那么可以使用 dpkg 命令手动安装 GCC。</p><p>因为误操作在 Ubuntu 20.04 上安装了 Ubuntu 18.04 的 GCC，导致系统软件无法运行，apt 也无法使用，所以只能手动安装 GCC。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt: libx86_64-linux-gnu-libstdc++.so.6: version `GLIBCXX_3.4.29' not found <span class="token punctuation">(</span>required by libx86_64-linux-gnulibapt-private.so.0.0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>既然libstdc++版本不一致，我们就去下载对应版本的GCC，访问<a href="https://packages.ubuntu.com/%EF%BC%8C%E5%9C%A8%E4%B8%8B%E6%96%B9%E7%9A%84%E6%90%9C%E7%B4%A2%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5libstdc++6%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%EF%BC%8C%E7%84%B6%E5%90%8E%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84GCC%E3%80%82">https://packages.ubuntu.com/，在下方的搜索框中输入libstdc++6，选择对应的系统版本，然后下载对应的GCC。</a></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/02/64ad9d26ea0d40d39a17330698dd805d.png"></p><p>点击搜索结果，点击系统的架构，一般为amd64，</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/02/4965061df423ae7897faa87cce2a5fc6.png"></p><p>具体下载地址比较隐蔽，直接点击红框的链接没有反应，你可以右键另存为到本地，我习惯复制链接后用wget下载。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/02/b69d28c1b5515dd8898213332baa9b99.png"></p><p>下载完成后，使用dpkg命令安装GCC。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i libstdc++6_12.3.0-1ubuntu1<span class="token punctuation">\</span>~22.04_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后可以检查一下缺失的GLIBCXX版本已经安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ strings /lib/x86_64-linux-gnu/libstdc++.so.6 <span class="token operator">|</span> <span class="token function">grep</span> GLIBCXX                               GLIBCXX_3.4GLIBCXX_3.4.1GLIBCXX_3.4.2GLIBCXX_3.4.3GLIBCXX_3.4.4GLIBCXX_3.4.5GLIBCXX_3.4.6GLIBCXX_3.4.7GLIBCXX_3.4.8GLIBCXX_3.4.9GLIBCXX_3.4.10GLIBCXX_3.4.11GLIBCXX_3.4.12GLIBCXX_3.4.13GLIBCXX_3.4.14GLIBCXX_3.4.15GLIBCXX_3.4.16GLIBCXX_3.4.17GLIBCXX_3.4.18GLIBCXX_3.4.19GLIBCXX_3.4.20GLIBCXX_3.4.21GLIBCXX_3.4.22GLIBCXX_3.4.23GLIBCXX_3.4.24GLIBCXX_3.4.25GLIBCXX_3.4.26GLIBCXX_3.4.27GLIBCXX_3.4.28GLIBCXX_3.4.29GLIBCXX_3.4.30GLIBCXX_DEBUG_MESSAGE_LENGTH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时apt 应该就可以正常使用了，我们只需要修复一下所有软件包，让它回到正确的版本即可恢复系统。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> --fix-broken <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前对软件包的构建不太了解，喜欢随意修改软件源列表，软件源和当前系统的版本不一致就会出现安装了一个依赖较多的软件包后会出现连锁反应，修改了所有依赖的软件包版本，导致系统故障。最常出现的就是修改了GCC版本，导致GLIBCXX版本不一致，导致系统软件无法运行。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Bug 踩坑记录" scheme="https://lifeislife.cn/categories/Bug-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Bug" scheme="https://lifeislife.cn/tags/Bug/"/>
    
    <category term="Ubuntu" scheme="https://lifeislife.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>repo源配置解析</title>
    <link href="https://lifeislife.cn/2024/01/17/repo%E6%BA%90%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://lifeislife.cn/2024/01/17/repo%E6%BA%90%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2024-01-17T13:32:04.000Z</published>
    <updated>2024-01-17T13:32:40.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="repo-源配置解析"><a href="#repo-源配置解析" class="headerlink" title="repo 源配置解析"></a>repo 源配置解析</h1><p>openEuler 的软件源配置文件位于/etc/yum.repos.d/目录下，以.repo 为后缀名，文件名可以任意取，但是必须以.repo 结尾。</p><pre class="line-numbers language-repo" data-language="repo"><code class="language-repo">#generic-repos is licensed under the Mulan PSL v2.#You can use this software according to the terms and conditions of the Mulan PSL v2.#You may obtain a copy of Mulan PSL v2 at:#    http:&#x2F;&#x2F;license.coscl.org.cn&#x2F;MulanPSL2#THIS SOFTWARE IS PROVIDED ON AN &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR#IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR#PURPOSE.#See the Mulan PSL v2 for more details.[OS]name&#x3D;OSbaseurl&#x3D;http:&#x2F;&#x2F;repo.openeuler.org&#x2F;openEuler-23.09&#x2F;OS&#x2F;$basearch&#x2F;metalink&#x3D;https:&#x2F;&#x2F;mirrors.openeuler.org&#x2F;metalink?repo&#x3D;$releasever&#x2F;OS&amp;arch&#x3D;$basearchmetadata_expire&#x3D;1henabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;http:&#x2F;&#x2F;repo.openeuler.org&#x2F;openEuler-23.09&#x2F;OS&#x2F;$basearch&#x2F;RPM-GPG-KEY-openEuler[source]name&#x3D;sourcebaseurl&#x3D;http:&#x2F;&#x2F;repo.openeuler.org&#x2F;openEuler-23.09&#x2F;source&#x2F;metalink&#x3D;https:&#x2F;&#x2F;mirrors.openeuler.org&#x2F;metalink?repo&#x3D;$releasever&amp;arch&#x3D;sourcemetadata_expire&#x3D;1henabled&#x3D;1gpgcheck&#x3D;1gpgkey&#x3D;http:&#x2F;&#x2F;repo.openeuler.org&#x2F;openEuler-23.09&#x2F;source&#x2F;RPM-GPG-KEY-openEuler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中各个配置项的含义如下：</p><ul><li>[repoid]中的 repoid 为软件仓库（repository）的 ID 号，所有.repo 配置文件中的各 repoid 不能重复，必须唯一。示例中 repoid 为 OS 和 source。</li><li>name 为软件仓库描述的字符串，可以任意取，但是建议取一个有意义的名称，方便用户理解。示例中 name 为 OS 和 source。</li><li>baseurl 为软件仓库的地址，可以是 http、https、ftp 等协议，也可以是本地目录。</li><li>enabled 为是否启用该软件源仓库，可选值为 1 和 0。默认值为 1，表示启用该软件源仓库。示例中 enabled 为 1。</li><li>metalink 为动态的镜像地址，用于镜像加速。</li><li>metadata_expire 为元数据过期时间，单位为秒。默认值为 90 分钟，即 5400 秒。示例中 metadata_expire 为 1h，即 1 小时。</li><li>gpgcheck 可设置为 1 或 0，1 表示进行 gpg（GNU Private Guard）校验，0 表示不进行 gpg 校验，gpgcheck 可以确定 rpm 包的来源是有效和安全的。</li><li>gpgkey 为验证签名用的公钥地址，如果 gpgcheck 为 1，则必须设置 gpgkey。</li></ul><h2 id="gpgcheck-详解"><a href="#gpgcheck-详解" class="headerlink" title="gpgcheck 详解"></a>gpgcheck 详解</h2><p><code>RPM-GPG-KEY</code> 是一个公共密钥，用于验证由该密钥签名的RPM包的真实性和完整性。在使用 <code>yum</code> 或 <code>dnf</code> 这样的包管理工具时，这些工具会使用 GPG 密钥来验证软件包的签名，以确保软件包来自于可信的源，且未被篡改。</p><ol><li><p><strong>命名约定：</strong> <code>RPM-GPG-KEY</code> 是一个命名约定，通常与其所属的仓库或发行版相关。例如，如果你在使用某个特定发行版的官方仓库，它可能会提供一个 <code>RPM-GPG-KEY</code> 文件来进行软件包签名验证。如openEuler官方仓库提供的 <code>RPM-GPG-KEY</code> 文件名为 <code>RPM-GPG-KEY-openEuler</code>。</p></li><li><p><strong>密钥生成：</strong> 这个密钥是通过 GPG（GNU Privacy Guard）工具生成的。GPG 是一个用于进行加密和签名的开源工具。<code>RPM-GPG-KEY</code> 文件包含了一个公钥，该公钥由仓库所有者使用私钥签署软件包，而用户使用公钥验证软件包。</p></li><li><p><strong>验证软件包：</strong> 当用户使用 <code>yum</code> 或 <code>dnf</code> 安装软件包时，这些工具会检查软件包的签名，并使用相应的 <code>RPM-GPG-KEY</code> 文件中的公钥来验证签名。如果验证通过，工具会认为软件包是可信的，否则将会发出警告或拒绝安装。</p></li><li><p><strong>导入密钥：</strong> 为了使用 <code>RPM-GPG-KEY</code> 文件，用户通常需要将密钥导入到本地系统中。这通常可以通过运行类似于以下命令的导入密钥的操作来完成：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> --import /etc/pki/rpm-gpg/RPM-GPG-KEY-openEuler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 上述命令中的 <code>/etc/pki/rpm-gpg/RPM-GPG-KEY-openEuler</code> 路径可能会因发行版和配置而有所不同。</p></li></ol><h2 id="RPM包签名"><a href="#RPM包签名" class="headerlink" title="RPM包签名"></a>RPM包签名</h2><p>对于发布的 RPM 包进行 GPG 签名是一种重要的安全措施，可以确保接收者能够验证软件包的真实性和完整性。以下是一般的步骤：</p><ol><li><p><strong>生成 GPG 密钥：</strong> 如果你还没有 GPG 密钥对，你需要使用 GPG 工具生成一对密钥，包括私钥和公钥。你可以运行以下命令来生成密钥：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpg --gen-key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 当你运行 <code>gpg --gen-key</code> 命令时，它会启动 GPG（GNU Privacy Guard）的密钥生成过程。这个过程将引导你提供一些必要的信息以生成密钥对，包括私钥和公钥。以下是这个命令的详细步骤：</p><ul><li><p><strong>选择密钥类型：</strong> 你将被要求选择密钥的类型。通常，默认的 RSA 和 DSA 都是可接受的选择，你可以通过键入数字来选择。</p></li><li><p><strong>选择密钥大小：</strong> 你将被要求选择密钥的大小。通常，默认值（通常是2048位）是足够的，但你也可以选择更大的值。</p></li><li><p><strong>选择密钥的有效期：</strong> 你将被要求选择密钥的有效期。你可以选择密钥永久有效，或者在一段特定的时间内有效。如果你选择了特定的时间，你需要输入一个表示有效期的值，例如1y表示一年，1m表示一个月。</p></li><li><p><strong>提供用户标识信息：</strong> 你将被要求提供与密钥相关联的用户标识信息。这包括你的真实姓名、电子邮件地址和一个可选的注释。</p></li><li><p><strong>确认提供的信息：</strong> GPG 将显示你提供的信息并询问你是否确认。如果确认无误，你可以输入 <code>O</code> 或直接按回车键。</p></li><li><p><strong>输入保护密语（passphrase）：</strong> 你将被要求输入保护密语，用于保护你的私钥。请确保选择一个强密码。</p></li><li><p><strong>等待密钥生成：</strong> GPG 将使用提供的信息生成密钥对。这可能需要一些时间，具体取决于你选择的密钥大小。</p></li><li><p><strong>生成完成：</strong> 一旦生成完成，你将看到一条消息表明密钥生成成功。</p></li></ul><p> 在整个过程中，你将看到类似以下的一些提示：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpg: key ABCDEFGH marked as ultimately trustedgpg: revocation certificate stored as <span class="token string">'/home/your_user/.gnupg/openpgp-revocs.d/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.rev'</span>public and secret key created and signed.gpg: checking the trustdbgpg: <span class="token number">3</span> marginal<span class="token punctuation">(</span>s<span class="token punctuation">)</span> needed, <span class="token number">1</span> complete<span class="token punctuation">(</span>s<span class="token punctuation">)</span> needed, PGP trust modelgpg: depth: <span class="token number">0</span>  valid:   <span class="token number">2</span>  signed:   <span class="token number">0</span>  trust: <span class="token number">0</span>-, 0q, 0n, 0m, 0f, 2upub   2048R/XXXXXXXX <span class="token number">2024</span>-01-01 <span class="token punctuation">[</span>expires: <span class="token number">2024</span>-01-01<span class="token punctuation">]</span>    Key fingerprint <span class="token operator">=</span> XXXX YYYY ZZZZ AAAA BBBB  CCCC DDDD EEEE FFFF <span class="token number">1111</span>uid                  Your Name <span class="token operator">&lt;</span>your.email@example.com<span class="token operator">></span>sub   2048R/YYYYYYYY <span class="token number">2024</span>-01-01 <span class="token punctuation">[</span>expires: <span class="token number">2024</span>-01-01<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在这个例子中，<code>XXXXXXXX</code> 是你的密钥 ID，<code>YYYYYYYY</code> 是子密钥的 ID。你可以使用这些 ID 来引用你的密钥。</p></li><li><p><strong>导出公钥：</strong> 生成密钥后，你需要将公钥导出。运行以下命令：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpg --output RPM-GPG-KEY-your-repo --armor --export your@email.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这将生成一个 ASCII 格式的公钥文件 <code>RPM-GPG-KEY-your-repo</code>，你可以与软件包一起发布。</p></li><li><p><strong>为 RPM 包签名：</strong> 在构建 RPM 包时，使用 <code>rpmbuild</code> 命令时，可以通过添加 <code>--sign</code> 选项来指示 <code>rpmbuild</code> 对 RPM 包进行签名。例如：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpmbuild -ba your-package.spec --sign<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 当你执行 <code>rpmbuild -ba your-package.spec --sign</code> 命令时，<code>rpmbuild</code> 会使用默认的 GPG 密钥进行签名。这通常是你在系统上配置为默认 GPG 密钥的密钥。</p><p> 你可以通过检查 <code>rpmbuild</code> 使用的 GPG 密钥来确认它是哪个密钥：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -q gpg-pubkey --qf <span class="token string">'%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125; --> %&#123;summary&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这个命令将显示系统上安装的 GPG 公钥，其中默认的密钥可能是 “gpg-pubkey-xxxxxxxx-yyyyyyyy”。你可以根据密钥的 “xxxxxxxx-yyyyyyyy” 部分来确定默认使用的 GPG 密钥。</p><p> 如果你想使用不同的 GPG 密钥进行签名，可以在 <code>rpmbuild</code> 命令中使用 <code>--signwith</code> 选项，例如：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rpmbuild -ba your-package.spec --signwith <span class="token operator">&lt;</span>key-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 其中 <code>&lt;key-id&gt;</code> 是你想要使用的 GPG 密钥的 ID。这会覆盖默认的密钥。确保你在构建和签名 RPM 包时使用的是正确的 GPG 密钥。</p></li><li><p><strong>导入密钥：</strong> 为了验证你的软件包，用户需要导入你的公钥。他们可以运行以下命令：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> --import RPM-GPG-KEY-your-repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>发布：</strong> 将签名的 RPM 包和公钥一起发布。确保用户知道他们可以使用导入的公钥来验证软件包的签名。</p></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;repo-源配置解析&quot;&gt;&lt;a href=&quot;#repo-源配置解析&quot; class=&quot;headerlink&quot; title=&quot;repo 源配置解析&quot;&gt;&lt;/a&gt;repo 源配置解析&lt;/h1&gt;&lt;p&gt;openEuler 的软件源配置文件位于/etc/yum.repos.d/目</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://lifeislife.cn/tags/Linux/"/>
    
    <category term="DevOps" scheme="https://lifeislife.cn/tags/DevOps/"/>
    
    <category term="openEuler" scheme="https://lifeislife.cn/tags/openEuler/"/>
    
    <category term="Centos" scheme="https://lifeislife.cn/tags/Centos/"/>
    
    <category term="RPM" scheme="https://lifeislife.cn/tags/RPM/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核模块校验机制</title>
    <link href="https://lifeislife.cn/2024/01/13/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6/"/>
    <id>https://lifeislife.cn/2024/01/13/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E6%A0%A1%E9%AA%8C%E6%9C%BA%E5%88%B6/</id>
    <published>2024-01-13T14:00:16.000Z</published>
    <updated>2024-01-17T13:24:00.848Z</updated>
    
    <content type="html"><![CDATA[<p>初学 Linux 内核或者第一次编译使用内核模块时经常会遇到类似这样的错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">insmod: ERROR: could not insert module kvm.ko: Invalid module <span class="token function">format</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个报错通常由于当前插入<code>kvm.ko</code>的<code>version magic</code>版本信息与正在运行的 kernel 的<code>version magic</code>版本不一致导致的。</p><h1 id="内核校验模块的流程"><a href="#内核校验模块的流程" class="headerlink" title="内核校验模块的流程"></a>内核校验模块的流程</h1><p>我们从问题出发，看看内核是如何校验模块的。搜索了内核源码，找到了在函数<code>check_version</code>中抛出了<code>disagrees about version of symbol</code>错误信息，我们根据源码来回溯一下整个过程。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/module.c</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">check_version</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">load_info</span> <span class="token operator">*</span>info<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symname<span class="token punctuation">,</span>    <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>mod<span class="token punctuation">,</span>    <span class="token keyword">const</span> s32 <span class="token operator">*</span>crc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> Elf_Shdr <span class="token operator">*</span>sechdrs <span class="token operator">=</span> info<span class="token operator">-></span>sechdrs<span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> versindex <span class="token operator">=</span> info<span class="token operator">-></span>index<span class="token punctuation">.</span>vers<span class="token punctuation">;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> num_versions<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">modversion_info</span> <span class="token operator">*</span>versions<span class="token punctuation">;</span> <span class="token comment">/* Exporting module didn't supply crcs?  OK, we're already tainted. */</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>crc<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">/* No versions at all?  modprobe --force does this. */</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>versindex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">try_to_force_load</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> symname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> versions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> sechdrs<span class="token punctuation">[</span>versindex<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_addr<span class="token punctuation">;</span> num_versions <span class="token operator">=</span> sechdrs<span class="token punctuation">[</span>versindex<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size  <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">modversion_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_versions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  u32 crcval<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> symname<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_MODULE_REL_CRCS<span class="token punctuation">)</span><span class="token punctuation">)</span>   crcval <span class="token operator">=</span> <span class="token function">resolve_rel_crc</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>   crcval <span class="token operator">=</span> <span class="token operator">*</span>crc<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>crc <span class="token operator">==</span> crcval<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">pr_debug</span><span class="token punctuation">(</span><span class="token string">"Found checksum %X vs module %lX\n"</span><span class="token punctuation">,</span>    crcval<span class="token punctuation">,</span> versions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>crc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">goto</span> bad_version<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/* Broken toolchain. Warn once, then let it go.. */</span> <span class="token function">pr_warn_once</span><span class="token punctuation">(</span><span class="token string">"%s: no symbol version for %s\n"</span><span class="token punctuation">,</span> info<span class="token operator">-></span>name<span class="token punctuation">,</span> symname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>bad_version<span class="token operator">:</span> <span class="token function">pr_warn</span><span class="token punctuation">(</span><span class="token string">"%s: disagrees about version of symbol %s\n"</span><span class="token punctuation">,</span>        info<span class="token operator">-></span>name<span class="token punctuation">,</span> symname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>info: 包含正在加载信息的结构体。</li><li>symname: 需要查找对比的符号的名称。</li><li>mod: 表示模块的结构体。</li><li>crc: 当前正在运行的内核的模块符号的 CRC（Cyclic Redundancy Check）值</li></ul><ol><li>如果 CRC 为空，不检查直接 PASS</li><li>如果模块中没有_versions 小节，表示模块没有开启 CRC<ol><li>如果开启了 CONFIG_MODULE_FORCE_LOAD，则强制加载，内核标记为 tainted，直接 PASS</li><li>如果没有开启 CONFIG_MODULE_FORCE_LOAD，则报错</li></ol></li><li>如果模块中有_versions 小节，没有找到 module_layout 符号，报 warning，直接 PASS</li><li>如果模块中有_versions 小节，找到 module_layout 符号<ol><li>对比_versions 小节中的 CRC 和参数中的 CRC，如果一致，PASS</li><li>如果不一致，报错</li></ol></li></ol><blockquote><p>插播一句，CRC是什么？在 Linux 内核中，模块符号 CRC（Cyclic Redundancy Check）是一种校验值，用于确保模块中的符号（函数、变量等）在加载时与内核中的符号一致。当模块被构建时，针对每个符号都会计算一个 CRC 值，然后将这些 CRC 值保存在模块的符号版本表中。简单理解就是如果要保持CRC不变，需要满足两个条件：</p><ol><li>语法保持不变<br>  遵守这个条件，说明如果模块在新内核下重新编译，那应该没有任何语法问题。 即导出符号的类型名没有变化，如果是函数，则要求参数和返回值类型没有任何变化；如果这些类型是结构体的话，结构体的成员名也没有有任何变化。</li><li>语义保持不变<br> 这要求符号的类型不能有变化，如果类型本身是结构体(struct)，则它成员的类型不能有变化，成员在结构体内的位置不能有变化，以及成员本身不能增删。<br>如果想要深入了解如何计算CRC可以参考这篇博客：<a href="https://blog.csdn.net/linyt/article/details/42559639">Linux内核模块符号CRC检查机制-CSDN博客</a></li></ol></blockquote><p>分析代码我们可以知道，内核会通过遍历正在加载的模块的版本信息的数组<code>versions</code>，从中查找与给定符号名称匹配的版本信息。如果找到匹配的版本信息，则计算 CRC 值，与参数中的 CRC 值进行比较。（通过后续分析我们知道参数的 CRC 就是正在运行的内核的 module_layout 符号的 CRC）如果匹配，表示版本一致，返回 1。如果不匹配，打印调试信息，并跳转到 <code>bad_version</code>，输出警告信息。</p><p>这里有两个疑问，</p><ol><li><code>versions</code> 内容是怎么链接到模块的 elf 文件中的？</li></ol><p>我们找到模块的<code>mod.c</code>文件，打开可以发现以下内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MODULE_INFO</span><span class="token punctuation">(</span>vermagic<span class="token punctuation">,</span> VERMAGIC_STRING<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MODULE_INFO</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> KBUILD_MODNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>__visible <span class="token keyword">struct</span> <span class="token class-name">module</span> __this_module<span class="token function">__section</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gnu<span class="token punctuation">.</span>linkonce<span class="token punctuation">.</span>this_module<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>name <span class="token operator">=</span> KBUILD_MODNAME<span class="token punctuation">,</span> <span class="token punctuation">.</span>init <span class="token operator">=</span> init_module<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_MODULE_UNLOAD</span></span> <span class="token punctuation">.</span>exit <span class="token operator">=</span> cleanup_module<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span> <span class="token punctuation">.</span>arch <span class="token operator">=</span> MODULE_ARCH_INIT<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_RETPOLINE</span></span><span class="token function">MODULE_INFO</span><span class="token punctuation">(</span>retpoline<span class="token punctuation">,</span> <span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">modversion_info</span> ____versions<span class="token punctuation">[</span><span class="token punctuation">]</span>__used <span class="token function">__section</span><span class="token punctuation">(</span>__versions<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">0x3e549f1d</span><span class="token punctuation">,</span> <span class="token string">"module_layout"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0x5138e6ba</span><span class="token punctuation">,</span> <span class="token string">"param_ops_int"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0x183b57f9</span><span class="token punctuation">,</span> <span class="token string">"phy_ethtool_nway_reset"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0x6e5363eb</span><span class="token punctuation">,</span> <span class="token string">"eth_validate_addr"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0x4df55e5b</span><span class="token punctuation">,</span> <span class="token string">"usb_deregister"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0x8e48f69b</span><span class="token punctuation">,</span> <span class="token string">"usb_register_driver"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件是在编译过程中调用了<code>scripts/modpost</code>脚本生成的，它的功能是在里面增加了 2 个<code>__section</code>，<code>.gnu.linkonce.this_module</code>和<code>__versions</code>。__versions 小节的内容就是一些字符串和值组成的数组，<code>check_version</code>就是解析这个小节去做验证。</p><ol start="2"><li>CRC 值哪来的？</li></ol><p>我们继续向上跟踪，找到函数<code>check_modstruct_version</code>，其中<code>find_symbol</code>会在内核符号表中查找给定符号名称的符号信息，接着调用<code>check_version</code>函数，传入符号名称、模块结构体和 CRC 值，进行版本匹配。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/module.c</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">check_modstruct_version</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">load_info</span> <span class="token operator">*</span>info<span class="token punctuation">,</span>       <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>mod<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> s32 <span class="token operator">*</span>crc<span class="token punctuation">;</span> <span class="token comment">/*  * Since this should be found in kernel (which can't be removed), no  * locking is necessary -- use preempt_disable() to placate lockdep.  */</span> <span class="token function">preempt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">find_symbol</span><span class="token punctuation">(</span><span class="token string">"module_layout"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>crc<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">preempt_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">BUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token function">preempt_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">check_version</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">"module_layout"</span><span class="token punctuation">,</span> mod<span class="token punctuation">,</span> crc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 获取当前运行内核 module_layout 函数的 crc 值</span><span class="token function">find_symbol</span><span class="token punctuation">(</span><span class="token string">"module_layout"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>crc<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">)</span>    <span class="token function">each_symbol_section</span><span class="token punctuation">(</span>find_exported_symbol_in_section<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fsa<span class="token punctuation">)</span>        <span class="token comment">// 遍历内核三个导出符号表段__start___ksymtab，__start___ksymtab_gpl 和__start___ksymtab_gpl_future，为每段调用 find_symbol_in_section</span>        <span class="token function">each_symbol_in_section</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token comment">// 遍历内核每个已加载模块的三个导出符号表段 mod->syms,mod->gpl_syms,mod->gpl_future_syms，为每段调用 find_symbol_in_section</span>        <span class="token function">each_symbol_in_section</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> mod<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> data<span class="token punctuation">)</span>            <span class="token comment">// 对导出符号表进行二分查找，按照字符串排序，符号表的地址按照地址排序</span>            <span class="token function">find_exported_symbol_in_section</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">symsearch</span> <span class="token operator">*</span>syms<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Linux 对可装载模块采取了两层验证</strong>：除了上述的模块 CRC 值校验外还有 <code>vermagic</code> 的检查。模块 vermagic（即 Version Magic String）保存了模块编译时的内核版本以及 SMP 等配置信息，当模块 vermagic 与主机信息不相符时也无法加载模块。</p><p>在内核中<code>load_module</code>函数调用<code>check_modstruct_version</code>函数完成 CRC 校验后，就会继续调用<code>layout_and_allocate --&gt; check_modinfo</code> 完成 vermagic 校验。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// kernel/module.c</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">check_modinfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>mod<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">load_info</span> <span class="token operator">*</span>info<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>modmagic <span class="token operator">=</span> <span class="token function">get_modinfo</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">"vermagic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> err<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> MODULE_INIT_IGNORE_VERMAGIC<span class="token punctuation">)</span>  modmagic <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* This is allowed: modprobe --force will invalidate it. */</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>modmagic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  err <span class="token operator">=</span> <span class="token function">try_to_force_load</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"bad vermagic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token keyword">return</span> err<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same_magic</span><span class="token punctuation">(</span>modmagic<span class="token punctuation">,</span> vermagic<span class="token punctuation">,</span> info<span class="token operator">-></span>index<span class="token punctuation">.</span>vers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">"%s: version magic '%s' should be '%s'\n"</span><span class="token punctuation">,</span>         info<span class="token operator">-></span>name<span class="token punctuation">,</span> modmagic<span class="token punctuation">,</span> vermagic<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span>ENOEXEC<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get_modinfo</code> 会获取内核中的 vermagic 信息，模块 vermagic 信息则被保存在了 ELF 的 <code>.modinfo</code> 小节中。这里我们说的 vermagic 就是下文提到的拓展版本信息，它就是系统配置信息组成的一个字符串。</p><h1 id="如何解决模块校验错误"><a href="#如何解决模块校验错误" class="headerlink" title="如何解决模块校验错误"></a>如何解决模块校验错误</h1><p>Linux 对可装载模块采取了两层验证，我们需要分别从 CRC 和 vermagic 两个方面来解决模块校验错误。首先从简单的 vermagic 校验开始。我们需要保证运行的内核版本与模块编译时的内核版本一致，这样才能保证 vermagic 校验通过。首先了解如何查看内核版本以及模块版本信息，然后修改内核模块版本信息。</p><h2 id="解决-vermagic-校验错误"><a href="#解决-vermagic-校验错误" class="headerlink" title="解决 vermagic 校验错误"></a>解决 vermagic 校验错误</h2><h3 id="如何查看内核版本以及模块版本信息"><a href="#如何查看内核版本以及模块版本信息" class="headerlink" title="如何查看内核版本以及模块版本信息"></a>如何查看内核版本以及模块版本信息</h3><p><code>uname</code>参数功能：</p><ul><li>-s, 输出 kernel 名称；</li><li>-n, 输出主机名；</li><li>-r, 输出 kernel 发行版本号；</li><li>-v, 输出操作系统版本；</li><li>-m, 输出主机的硬件架构名称；</li><li>-p, 输出处理器类型；</li><li>-i, 输出硬件平台；</li><li>-o, 输出操作系统名称</li><li>-a, 输出所有信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出kernel发行版本号</span><span class="token function">uname</span> -r<span class="token number">6.4</span>.0-10.1.0.20.oe2309.riscv64<span class="token comment"># 输出所有信息</span><span class="token function">uname</span> -aLinux openeuler <span class="token number">6.4</span>.0-10.1.0.20.oe2309.riscv64 <span class="token comment">#1 SMP Sat Oct  7 06:19:28 UTC 2023 riscv64 riscv64 riscv64 GNU/Linux</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>modinfo 可以查看模块信息，包括模块vermagic信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">modinfo kvm.kofilename:       /root/build-kernel/kernel/./arch/riscv/kvm/kvm.kolicense:        GPLauthor:         Qumranetsrcversion:     5DA13DC0E55100B5FE1D56Adepends:intree:         Yname:           kvmvermagic:       <span class="token number">6.4</span>.0 SMP mod_unload modversions riscvparm:           halt_poll_ns:uintparm:           halt_poll_ns_grow:uintparm:           halt_poll_ns_grow_start:uintparm:           halt_poll_ns_shrink:uint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>vermagic</code>就是<code>version magic</code>版本信息，可以看到当前<code>kvm.ko</code>的<code>version magic</code>版本信息为<code>6.4.0</code>。与前文的<code>uname -r</code>输出的 kernel 发行版本号<code>6.4.0-10.1.0.20.oe2309.riscv64</code>不一致。所以会报错。</p><h3 id="修改内核模块版本信息"><a href="#修改内核模块版本信息" class="headerlink" title="修改内核模块版本信息"></a>修改内核模块版本信息</h3><ol><li>修改基础版本信息</li></ol><p>打开内核源代码根目录下的 Makefile 文件。你会找到一个包含内核版本信息的地方，类似于：</p><pre class="line-numbers language-Makefile" data-language="Makefile"><code class="language-Makefile"># SPDX-License-Identifier: GPL-2.0VERSION &#x3D; 6PATCHLEVEL &#x3D; 4SUBLEVEL &#x3D; 0EXTRAVERSION &#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示内核版基础本号为<code>6.4.0</code>。</p><ol start="2"><li>修改拓展版本信息</li></ol><p>kernel 引入了一些配置来增强版本信息，在内核源码的<code>&quot;include/linux/vermagic.h&quot;</code>下我们可以看到模块的健全版本信息，如下默认配置的有：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Simply sanity version stamp for modules. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SMP</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_SMP</span> <span class="token string">"SMP "</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_SMP</span> <span class="token string">""</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_PREEMPT_BUILD</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_PREEMPT</span> <span class="token string">"preempt "</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_PREEMPT_RT<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_PREEMPT</span> <span class="token string">"preempt_rt "</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_PREEMPT</span> <span class="token string">""</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_MODULE_UNLOAD</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_MODULE_UNLOAD</span> <span class="token string">"mod_unload "</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_MODULE_UNLOAD</span> <span class="token string">""</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_MODVERSIONS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_MODVERSIONS</span> <span class="token string">"modversions "</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_VERMAGIC_MODVERSIONS</span> <span class="token string">""</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RANDSTRUCT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;generated/randstruct_hash.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_RANDSTRUCT</span> <span class="token string">"RANDSTRUCT_"</span> <span class="token expression">RANDSTRUCT_HASHED_SEED</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MODULE_RANDSTRUCT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VERMAGIC_STRING</span>                                                 <span class="token punctuation">\</span>        <span class="token expression">UTS_RELEASE </span><span class="token string">" "</span>                                                 <span class="token punctuation">\</span>        <span class="token expression">MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT                     </span><span class="token punctuation">\</span>        <span class="token expression">MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS       </span><span class="token punctuation">\</span>        <span class="token expression">MODULE_ARCH_VERMAGIC                                            </span><span class="token punctuation">\</span>        <span class="token expression">MODULE_RANDSTRUCT</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>&quot;UTS_RELEASE&quot;</code>的配置在内核源码的<code>&quot;include/generated/utsrelease.h&quot;</code>下可以看到，<code>utsrelease.h</code>的内容是由<code>Makefile</code>和``.config<code>的内容来生成的，当成功编译kernel以后，</code>utsrelease.h`得到更新，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#defineUTS_RELEASE "6.4.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么前文”6.4.0-d46299ae”中的”-d46299ae”是如何得来的呢？其实这个是开发者使用了 Git 来管理代码。当你修改或者提交代码以后，每次编译内核后，在”UTS_RELEASE”后面就会看到一串哈希值，例如”6.4.0-d46299ae”，其中”-d46299ae”这个就是 Git 版本控制而产生的哈希值。发行版本号只是各个厂商用于区别自己发布的不同时期的 kernel 版本或者产品版本而产生的编号，完全由各厂商自己定义。</p><h2 id="解决-CRC-校验错误"><a href="#解决-CRC-校验错误" class="headerlink" title="解决 CRC 校验错误"></a>解决 CRC 校验错误</h2><p>我们可以通过一些手段修改新模块的 module_layout 的 CRC 与内核CRC相同，再插入。<code>/boot</code>目录下通常有个在<code>symvers-&lt;kernel_version&gt;.gz</code> 文件通常包含了内核模块的符号版本信息。这个文件是由 Linux 内核构建时生成的，用于记录在该内核版本下构建的模块的符号信息，包括函数和变量的名称、版本号等。里面就保存了内核的 module_layout 的 CRC 值。我们可以使用<code>gzip -d</code>命令解压这个文件，找到 module_layout 的 CRC 值，记录下来。</p><ul><li><p>方法一：使用 16 进制编辑器修改模块文件，将 module_layout 的值修改为相同的值，再插入。<br>  在 Linux 中，可以使用 <code>hexdump</code> 和 <code>xxd</code> 等工具查看二进制文件的内容，并尝试编辑。下面是一种使用 <code>xxd</code> 查看和修改二进制文件的方法：</p><ol><li><p>使用 <code>xxd</code> 将二进制文件转换为十六进制文本：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xxd /usr/src/linux-6.4.0-10.1.0.20.oe2309.riscv64/arch/riscv/kvm/kvm.ko <span class="token operator">></span> kvm_hex.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这将创建一个名为 <code>kvm_hex.txt</code> 的文本文件，其中包含 <code>kvm.ko</code> 的十六进制表示。</p></li><li><p>使用文本编辑器（如 <code>nano</code> 或 <code>vim</code>）打开 <code>kvm_hex.txt</code>，找到并编辑 <code>module_layout</code> 的值。请确保你了解所做更改的含义，并且只修改你确信的内容。</p></li><li><p>保存并关闭文本编辑器。</p></li><li><p>使用 <code>xxd</code> 将修改后的十六进制文本转换回二进制文件：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xxd -r kvm_hex.txt <span class="token operator">></span> /usr/src/linux-6.4.0-10.1.0.20.oe2309.riscv64/arch/riscv/kvm/kvm.ko<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 这将覆盖原始的 <code>kvm.ko</code> 文件。</p></li></ol></li><li><p>方法二：修改 Module.symvers</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清理编译结果。不要使用 make distclean，这会删除.config 文件以及 Module.symvers 文件</span><span class="token function">make</span> clean<span class="token comment"># 修改 Module.symvers 文件</span><span class="token function">sed</span> -i  <span class="token string">'/module_layout/ s/0x[0-9a-f][0-9a-f]*/0xdf88831e/'</span> Module.symvers<span class="token comment"># 重新编译模块</span><span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>./arch/riscv/kvm/ -j33<span class="token comment"># 检查模块的 module_layout</span>modprobe --dump-modversions /usr/src/linux-6.4.0-10.1.0.20.oe2309.riscv64/arch/riscv/kvm/kvm.ko <span class="token operator">|</span> <span class="token function">grep</span> module_layout0xdf88831e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="如何生成-mod-c-文件"><a href="#如何生成-mod-c-文件" class="headerlink" title="如何生成 .mod.c 文件"></a>如何生成 .mod.c 文件</h1><p>如果是自己写的模块，可以根据下面的命令编译模块，就可以得到<code>.mod.c</code>文件，它是源文件到<code>.mod.o</code>文件的一个中间文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> -C /root/build-kernel/kernel <span class="token assign-left variable">M</span><span class="token operator">=</span>/driver_study/ modules -j22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是用内核自己的模块，执行<code>make modules</code>命令，也可以得到<code>.mod.c</code>文件。但是一般执行<code>make -j22</code>命令就不会生成这些文件，我们可以找一个启用的内核模块，例如<code>kvm.ko</code>，执行下面的命令，就可以得到<code>.mod.c</code>文件。不能随便找个模块，必须在 config 中开启的模块，否则会报错<code>undefined!</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>  <span class="token assign-left variable">M</span><span class="token operator">=</span>./arch/riscv/kvm modules -j22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初学 Linux 内核或者第一次编译使用内核模块时经常会遇到类似这样的错误：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;insmo</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://lifeislife.cn/tags/Linux/"/>
    
    <category term="Kernel" scheme="https://lifeislife.cn/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>x86 平台使用 Gitea Actions 构建多架构应用 (binfmt_misc)</title>
    <link href="https://lifeislife.cn/2024/01/10/x86%E5%B9%B3%E5%8F%B0%E4%BD%BF%E7%94%A8Gitea-Actions%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%9E%B6%E6%9E%84%E5%BA%94%E7%94%A8/"/>
    <id>https://lifeislife.cn/2024/01/10/x86%E5%B9%B3%E5%8F%B0%E4%BD%BF%E7%94%A8Gitea-Actions%E6%9E%84%E5%BB%BA%E5%A4%9A%E6%9E%B6%E6%9E%84%E5%BA%94%E7%94%A8/</id>
    <published>2024-01-10T03:10:04.000Z</published>
    <updated>2024-01-17T13:26:18.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="binfmt-misc-简介"><a href="#binfmt-misc-简介" class="headerlink" title="binfmt_misc 简介"></a>binfmt_misc 简介</h1><p><code>binfmt_misc</code> 是 Linux 内核提供的一个机制，它允许用户空间定义新的二进制格式，并将它们与相应的解释器关联起来。这个机制使得在 Linux 上能够动态地注册并运行不同架构的二进制可执行文件，从而支持交叉编译和多架构环境。</p><p>具体来说，<code>binfmt_misc</code> 的功能可以通过 <code>/proc/sys/fs/binfmt_misc/</code> 目录下的文件系统接口实现。这个目录下的文件用于注册和管理二进制格式和相应解释器之间的关联关系。</p><p>下面是一些与 <code>binfmt_misc</code> 相关的重要概念和文件：</p><ol><li><strong>注册表文件：</strong>   在 <code>/proc/sys/fs/binfmt_misc/</code> 目录下，每个注册的二进制格式都有一个对应的注册表文件。这些文件的命名通常遵循格式 <code>&lt;格式名称&gt;</code>，例如 <code>qemu-riscv64</code>。</li><li><strong>注册和注销：</strong>   用户空间可以通过在注册表目录下创建文件来注册新的二进制格式。这可以通过写入注册表文件的方式完成。相反，通过删除这些文件，可以注销二进制格式的支持。</li><li><strong>解释器：</strong>   对于每种注册的二进制格式，需要指定相应的解释器，即用于执行这种格式的程序。在注册表文件中，通过 <code>interpreter</code> 字段指定解释器的路径。</li><li><strong>参数：</strong>   除了解释器，还可以为每个注册的格式指定一些参数。这些参数可以影响如何运行二进制文件。</li></ol><h1 id="内核如何通过-binfmt-misc-机制添加新架构的支持？"><a href="#内核如何通过-binfmt-misc-机制添加新架构的支持？" class="headerlink" title="内核如何通过 binfmt_misc 机制添加新架构的支持？"></a>内核如何通过 binfmt_misc 机制添加新架构的支持？</h1><p>可以通过向 <code>/proc/sys/fs/binfmt_misc/register</code> 文件写入注册信息来注册新的二进制格式。告诉内核某一格式的文件用什么解释器来执行。写入的格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:name:type:offset:magic:mask:interpreter:flags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>各个字段以冒号分隔，部分字段可以缺省，但是冒号需要保留。</p></blockquote><p>字段含义如下：</p><ul><li><p><code>name</code>：二进制格式的名称，比如<code>qemu-riscv64</code>。</p></li><li><p><code>type</code>：类型为 E 或 M。</p><ul><li>如果是 E，可执行文件格式由其文件扩展名标识：magic 是要与二进制格式相关联的文件扩展名；offset 和 mask 将被忽略。</li><li>如果是 M，格式由文件中绝对偏移（默认为 0）处的魔数标识，并且 mask 是一个位掩码（默认为全 0xFF），表示数字中哪些位是有效的。</li></ul></li><li><p><code>interpreter</code>：是要作为匹配文件的参数运行的解释器，使用解释器的绝对路径，比如<code>/usr/bin/qemu-riscv64-static</code>。</p></li><li><p><code>flags</code>：可选字段，控制 <code>interpreter</code> 打开文件的行为。共支持 <code>POCF</code> 四种 flag。</p><ul><li><code>P</code> 表示 preserve-argv[0]，保留原始的 <code>argv[0]</code> 参数。</li><li><code>O</code> 表示 open-binary，<code>binfmt-misc</code> 默认会传递文件的路径，而启用这个参数时，<code>binfmt-misc</code> 会打开文件，传递文件描述符。</li><li><code>C</code> 表示 credentials，即会传递文件的 <code>setuid</code> 等权限，这个选项也隐含了 <code>O</code>。</li><li><code>F</code> 表示 fix binary，<code>binfmt-misc</code> 默认的行为在 spwan 进程时会延迟，这种方式可能会受到 <code>mount</code> 命名空间和 <code>chroot</code> 的影响，设置 <code>F</code> 时会立刻打开二进制文件。</li></ul></li></ul><p>举个例子，如果要在 x86_64 架构的系统上运行 RISC-V 架构的二进制文件，可以通过以下方式注册 RISC-V 二进制格式：</p><p>首先需要<strong>添加解释器</strong>，通常使用 QEMU 的静态二进制文件作为解释器，在 Ubuntu 系统中我们可以使用以下命令安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user-static<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注册二进制格式</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">':qemu-riscv64:M:0:7f454c460201010000000000000000000200f300::/usr/libexec/qemu-binfmt/riscv64-binfmt-P:POCF'</span> <span class="token operator">></span> /proc/sys/fs/binfmt_misc/register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示将 RISC-V 二进制格式注册到 <code>/proc/sys/fs/binfmt_misc/qemu-riscv64</code> 文件中，使用 <code>/usr/libexec/qemu-binfmt/riscv64-binfmt-P</code> 作为解释器，同时传递 <code>POCF</code> 参数。执行了以上命令，内核会自动创建一个 <code>/proc/sys/fs/binfmt_misc/qemu-riscv64</code> 文件，内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span>  /proc/sys/fs/binfmt_misc/qemu-riscv64enabledinterpreter /usr/libexec/qemu-binfmt/riscv64-binfmt-Pflags: POCFoffset <span class="token number">0</span>magic 7f454c460201010000000000000000000200f300mask ffffffffffffff00fffffffffffffffffeffffff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就完成了 RISC-V 二进制格式的注册。此时，你就可以在 x86_64 架构的系统上运行 RISC-V 架构的二进制文件了。</p><p>使用 Docker 运行 RISC-V 的容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run --rm -it devops/openeuler-builder:23.09-riscv64  <span class="token function">uname</span> -mriscv64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用封装好的程序简化注册过程"><a href="#使用封装好的程序简化注册过程" class="headerlink" title="使用封装好的程序简化注册过程"></a>使用封装好的程序简化注册过程</h2><p>以上的写入 register 文件的方式比较繁琐，可以使用封装好的程序来简化注册过程。</p><p>方式一：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user-binfmt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以安装所有 QEMU 支持的架构。</p><p>方式二：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装解释器</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user-static<span class="token comment"># 安装binfmt操作支持</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> binfmt-support<span class="token comment"># 开启异构支持</span><span class="token function">sudo</span> update-binfmts --package<span class="token operator">=</span>qemu-user-static --enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同上。</p><h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -1 <span class="token operator">></span>/proc/sys/fs/binfmt_misc/status <span class="token comment"># 注销所有注册的条目</span><span class="token builtin class-name">echo</span> -1 <span class="token operator">></span>/proc/sys/fs/binfmt_misc/qemu-riscv64 <span class="token comment"># 注销单个条目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者通过命令行工具完成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装binfmt操作支持</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> binfmt-support<span class="token comment"># 禁用qemu-riscv64，再次查看/proc/sys/fs/binfmt_misc/发现qemu-riscv64已被删除</span><span class="token function">sudo</span> update-binfmts --disable qemu-riscv64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Gitea-如何实现多架构应用构建？"><a href="#Gitea-如何实现多架构应用构建？" class="headerlink" title="Gitea 如何实现多架构应用构建？"></a>Gitea 如何实现多架构应用构建？</h1><p>Gitea 不会自己运行 Job，而是将 Job 委托给 Runner。Gitea Actions 的 Runner 被称为 act runner，它是一个独立的程序。在接收到 Job 后，act runner 会根据 Job 的内容，启用不同的 Container 来运行 Job。</p><p>为了避免消耗过多资源并影响 Gitea 实例，Gitea 和 Runner 一般运行在不同的机器上。但是同一个 Runner 启动的容器一定在同一台机器上。我这里演示的统一都在同一台 x86 架构的机器上。</p><p>因为都运行在 x86 架构的机器上，所有执行任务的 Container 也一定是 x86 架构的。但是我们了解了上面的 binfmt_misc 机制后，就可以在容器内部通过注册不同架构的二进制格式，从而在 x86 架构的机器上运行不同架构的二进制文件。就可以实现多架构应用构建。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/17-49-15-4cd035ef3794eae7de157dd25af6148e-giteaactionsrunner-5cf8e3.png"></p><p>打开 Gitea 的 tea 的项目源码找到它的 release <a href="https://gitea.com/gitea/tea/src/commit/c74177556b8e63252491003f1cbcd3882bfff15d/.gitea/workflows/release-nightly.yml#L53">workflow 文件</a>，可以看到它使用了<code>docker/setup-qemu-action@v3</code>这个 action 来实现多架构构建。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up QEMU<span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/setup<span class="token punctuation">-</span>qemu<span class="token punctuation">-</span>action@v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查阅<a href="https://github.com/tonistiigi/binfmt/blob/a92dbabe8fddb096b8cb307aa1c6bbe65dc0884f/cmd/binfmt/main.go#L63C1-L103C2">action 的源码</a>，可以发现底层实现是通过<code>binfmt_misc</code>来实现的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义了一些全局变量</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mount<span class="token punctuation">,</span> <span class="token string">"mount"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/fs/binfmt_misc"</span><span class="token punctuation">,</span> <span class="token string">"binfmt_misc mount point"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>toInstall<span class="token punctuation">,</span> <span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"architectures to install"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>toUninstall<span class="token punctuation">,</span> <span class="token string">"uninstall"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"architectures to uninstall"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flVersion<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"display version"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">install</span><span class="token punctuation">(</span>arch <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>cfg<span class="token punctuation">,</span> ok <span class="token operator">:=</span> configs<span class="token punctuation">[</span>arch<span class="token punctuation">]</span>    <span class="token comment">// 拼接路径为/proc/sys/fs/binfmt_misc/register，打开这个文件检查是否能够打开成功</span>register <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>mount<span class="token punctuation">,</span> <span class="token string">"register"</span><span class="token punctuation">)</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span>register<span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>binaryBasename<span class="token punctuation">,</span> binaryFullpath<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getBinaryNames</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>    <span class="token comment">// 向/proc/sys/fs/binfmt_misc/register 写入 line，注册二进制格式</span>line <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%s:M:0:%s:%s:%s:%s"</span><span class="token punctuation">,</span> binaryBasename<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>magic<span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>mask<span class="token punctuation">,</span> binaryFullpath<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>PathError<span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Err <span class="token operator">==</span> syscall<span class="token punctuation">.</span>EEXIST <span class="token punctuation">&#123;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%s already registered"</span><span class="token punctuation">,</span> binaryBasename<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"cannot register %q to %s: %s"</span><span class="token punctuation">,</span> binaryFullpath<span class="token punctuation">,</span> register<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h1><h2 id="为何-proc-sys-fs-binfmt-misc-register-文件是只读的？"><a href="#为何-proc-sys-fs-binfmt-misc-register-文件是只读的？" class="headerlink" title="为何/proc/sys/fs/binfmt_misc/register 文件是只读的？"></a>为何/proc/sys/fs/binfmt_misc/register 文件是只读的？</h2><p><code>/proc/sys/fs/binfmt_misc/register</code> 文件是只写的，这是因为在 Linux 中，<code>/proc</code> 文件系统下的很多文件都是通过对文件进行写入来进行配置和控制的。这些文件通常<strong>代表内核参数或控制接口</strong>，提供了一种方便的方式来与内核进行交互。</p><p>对于 <code>/proc/sys/fs/binfmt_misc/register</code> 文件来说，通过写入注册信息，用户可以向内核注册新的二进制格式，告知内核如何执行特定的二进制文件。这种只写的设计是为了保持简单性和安全性。允许用户在运行时动态地注册新的格式，而不是从文件中读取注册信息，可以提供更大的灵活性。</p><p>虽然 <code>/proc/sys/fs/binfmt_misc/register</code> 文件是只写的，但是通过向文件中写入正确格式的注册信息，用户仍然能够有效地配置新的二进制格式。这种设计符合 Linux 中的文件系统和权限模型。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/torvalds/linux/pulse">Kernel Support for miscellaneous Binary Formats (binfmt_misc)</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;binfmt-misc-简介&quot;&gt;&lt;a href=&quot;#binfmt-misc-简介&quot; class=&quot;headerlink&quot; title=&quot;binfmt_misc 简介&quot;&gt;&lt;/a&gt;binfmt_misc 简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;binfmt_misc&lt;/cod</summary>
      
    
    
    
    <category term="Self-Hosted" scheme="https://lifeislife.cn/categories/Self-Hosted/"/>
    
    
    <category term="Docker" scheme="https://lifeislife.cn/tags/Docker/"/>
    
    <category term="DevOps" scheme="https://lifeislife.cn/tags/DevOps/"/>
    
    <category term="Gitea" scheme="https://lifeislife.cn/tags/Gitea/"/>
    
    <category term="Actions" scheme="https://lifeislife.cn/tags/Actions/"/>
    
  </entry>
  
  <entry>
    <title>解决Armoury Crate(华硕奥创中心）安装驱动卡在55%</title>
    <link href="https://lifeislife.cn/2024/01/07/%E8%A7%A3%E5%86%B3Armoury-Crate-%E5%8D%8E%E7%A1%95%E5%A5%A5%E5%88%9B%E4%B8%AD%E5%BF%83%EF%BC%89%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%8D%A1%E5%9C%A855/"/>
    <id>https://lifeislife.cn/2024/01/07/%E8%A7%A3%E5%86%B3Armoury-Crate-%E5%8D%8E%E7%A1%95%E5%A5%A5%E5%88%9B%E4%B8%AD%E5%BF%83%EF%BC%89%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8%E5%8D%A1%E5%9C%A855/</id>
    <published>2024-01-07T02:37:28.000Z</published>
    <updated>2024-01-07T02:50:50.150Z</updated>
    
    <content type="html"><![CDATA[<p>卡在55%的基本上驱动已经下载完成，但是还没有安装。这时我们找到下载的文件手动安装即可。一般保存的路径为<code>C:\Users\Administrator\AppData\Local\Packages\B9ECED6F.ArmouryCrate_qmba6cd70vzyy\LocalState\SupportTemp</code>，找到需要安装的驱动文件夹，双击<code>setup.exe</code>即可。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;卡在55%的基本上驱动已经下载完成，但是还没有安装。这时我们找到下载的文件手动安装即可。一般保存的路径为&lt;code&gt;C:\Users\Administrator\AppData\Local\Packages\B9ECED6F.ArmouryCrate_qmba6cd70vz</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迁移WSL2到非系统盘</title>
    <link href="https://lifeislife.cn/2024/01/06/%E8%BF%81%E7%A7%BBWSL2%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98/"/>
    <id>https://lifeislife.cn/2024/01/06/%E8%BF%81%E7%A7%BBWSL2%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98/</id>
    <published>2024-01-06T08:47:57.000Z</published>
    <updated>2024-01-06T09:26:13.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭WSL2</span>wsl --shutdown<span class="token comment"># 查看WSL2的状态</span>wsl -l -vNAME                   STATE           VERSIONStopped         <span class="token number">2</span>  Ubuntu         Stopped         <span class="token number">2</span><span class="token comment"># 导出WSL2</span>wsl --export Ubuntu D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>ubuntu.tar正在导出，这可能需要几分钟时间。操作成功完成。<span class="token comment"># 删除WSL2</span>wsl --unregister Ubuntu正在注销。操作成功完成。<span class="token comment"># 导入WSL2</span>wsl --import Ubuntu D:<span class="token punctuation">\</span>wsl2 D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>ubuntu.tar --version <span class="token number">2</span>正在导入，这可能需要几分钟时间。操作成功完成。<span class="token comment"># 设置默认用户，如果不设置将会使用root用户，因为之前我一直使用自己创建的用户，所以需要设置，否则zsh配置文件会找不到</span>ubuntu.exe config --default-user nic<span class="token comment"># 启动WSL2</span>wsl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能有人和我一样安装了Docker，启用WSL后，docker运行数据都在WSL发行版中，文件位置都只能由WSL管理！</p><p>安装docker后，docker会自动创建2个发行版：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl -l -vNAME                   STATE           VERSIONStopped         <span class="token number">2</span>  docker-desktop         Stopped         <span class="token number">2</span>  docker-desktop-data    Stopped         <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上面一样需要到导出，删除，导入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭docker</span>将Docker程序退出即可<span class="token comment"># 导出docker-desktop</span>wsl --export docker-desktop D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop<span class="token punctuation">\</span>docker-desktop.tar<span class="token comment"># 删除docker-desktop</span>wsl --unregister docker-desktop<span class="token comment"># 导入docker-desktop</span>wsl --import docker-desktop D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop<span class="token punctuation">\</span>docker-desktop.tar --version <span class="token number">2</span><span class="token comment"># 导出docker-desktop-data</span>wsl --export docker-desktop-data D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop-data.tar<span class="token comment"># 删除docker-desktop-data</span>wsl --unregister docker-desktop-data<span class="token comment"># 导入docker-desktop-data</span>wsl --import docker-desktop-data D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop-data D:<span class="token punctuation">\</span>wsl2<span class="token punctuation">\</span>docker-desktop-data<span class="token punctuation">\</span>docker-desktop-data.tar --version <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;迁移过程&quot;&gt;&lt;a href=&quot;#迁移过程&quot; class=&quot;headerlink&quot; title=&quot;迁移过程&quot;&gt;&lt;/a&gt;迁移过程&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;cod</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>耳机换电池复活耳机小记</title>
    <link href="https://lifeislife.cn/2024/01/06/%E8%80%B3%E6%9C%BA%E6%8D%A2%E7%94%B5%E6%B1%A0%E5%A4%8D%E6%B4%BB%E8%80%B3%E6%9C%BA%E5%B0%8F%E8%AE%B0/"/>
    <id>https://lifeislife.cn/2024/01/06/%E8%80%B3%E6%9C%BA%E6%8D%A2%E7%94%B5%E6%B1%A0%E5%A4%8D%E6%B4%BB%E8%80%B3%E6%9C%BA%E5%B0%8F%E8%AE%B0/</id>
    <published>2024-01-06T02:34:10.000Z</published>
    <updated>2024-01-08T12:48:55.630Z</updated>
    
    <content type="html"><![CDATA[<p>半月前给用了三年的小米 10 换了一块二手电池，手机又可以再战三年了。想着自己还有两个耳机，也没有严重故障，只是电池亏点用不了半小时，于是也想着换个电池，看看能不能复活。本来以为耳机太小，太精密，怕自己修不了，但是想想如果不换电池，这个耳机也还是死路一条，不如自己尝试尝试，也能积攒一点经验。实操下来，发现并没有想象中那么难，只要有耐心，还是能修好的。甚至比换手机电池还要容易些，没有那么多螺丝需要拆，也没有那么多胶需要撬。</p><h1 id="小米-FlipBuds-Pro"><a href="#小米-FlipBuds-Pro" class="headerlink" title="小米 FlipBuds Pro"></a>小米 FlipBuds Pro</h1><h2 id="配件和工具准备"><a href="#配件和工具准备" class="headerlink" title="配件和工具准备"></a>配件和工具准备</h2><p>配件</p><ul><li>CR1254 3V 锂电池（可以直接淘宝搜索 FlipBuds Pro 电池，也可以直接搜这个型号，最好买带线的，不带线焊接会比较麻烦）</li></ul><p>工具</p><ul><li>热风枪（吹风机即可）</li><li>电烙铁（小米的这个耳机是需要焊接电池线的）</li><li>镊子（清理耳机里面的胶水）</li></ul><h2 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h2><p>用吹风机对准耳机吹一两分钟，沿着合模线徒手就能掰开。打开腔体时需要慢一点，有地方有胶水粘粘，不是一打开就是图中的样子，需要把胶水清理干净。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/c97ee9c173d49027e1c145e7748f6b4e.png"></p><p>分离后可以从边缘将电池撬出来。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/17af1dbe363d6214d480c9fe2aa7519b.png"></p><p>电池正极上用的双面胶将导线粘到了正极，用吹风机对准图中位置稍微加热一分钟作用，然后将电池正极上的贴片取下来。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/943150df37aebd615bb13f44495a620a.png"></p><p>除了上面一个连接点，还有两个焊接的连接点，用电烙铁加热取下即可将电池脱离。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/10486c9c31baf01807387577005fde05.png"></p><blockquote><p>没有微距镜头，用了<a href="https://www.52audio.com/archives/81082.html">我爱音频网的图片</a></p></blockquote><h2 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h2><p>将电池红线连接到正极，黑线连接到负极，然后将电池放回原位，合模即可。如果不知道正负极，可以在耳机线路板上有标识。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/3009a9fd386dfa462ed8670f86d589cb.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/f4c49ecc202e7f2d1aeba87877ad6411.png"></p><p>还有个需要注意的地方就是吸附磁铁的安装，可能在拆电池时候磁铁会掉落，可以根据图片中磁铁的位置进行安装。先放磁铁再安电池。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/2aebcb22ce86092bc3fe9c6404f0dcfd.png"></p><p>在装机过程中就可以连接手机，并播放音乐测试耳机是否能正常工作。因为合模时需要大力压合，播放音乐还能保证压合过程中线路没有断开。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/06/574b07106665802d5f64677b6f1fb4d9.png"></p><p>用了一天，耳机电池能用四小时左右，基本上和全新的一样。</p><h1 id="索尼-WF-1000XM3、"><a href="#索尼-WF-1000XM3、" class="headerlink" title="索尼 WF-1000XM3、"></a>索尼 WF-1000XM3、</h1><h2 id="配件和工具准备-1"><a href="#配件和工具准备-1" class="headerlink" title="配件和工具准备"></a>配件和工具准备</h2><p>配件</p><ul><li>CR1254 3.7V 锂电池，原装的是 VARTA 品牌的，我买的是 ZeniPower，只要型号一样，品牌自己选。甚至可以选 3.85V，75mAh 的续航更好。</li></ul><p>工具</p><ul><li>热风枪（吹风机即可）</li><li>镊子（清理耳机里面的胶水）</li><li>螺丝刀</li></ul><h2 id="拆机-1"><a href="#拆机-1" class="headerlink" title="拆机"></a>拆机</h2><p>用吹风机对着耳机的触摸原盘吹一两分钟胶水只在这块区域，边缘是卡扣不需要加热，指甲长的话直接用指甲掰开即可。打开后的样子如下图所示。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/08/4a441a4377b1a34b8cf32615a75284ee.png"></p><p>有两个小螺丝，拧下后就可以将盖板翻过来，电池就在下方。电池下方有双面胶，直接抠不容易抠出来，用吹风机对着盖板吹一两分钟就可以将胶水软化，然后用镊子将胶水取下。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/08/a76356a4a815618316219d9cf652d9fb.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将电池放回原位，盖板合上，拧上螺丝即可。在安装回耳机盖时需要注意耳机盖是分左右的，如果左右颠倒了是合不上的。参考图中的位置。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/08/a2c39abaab296e00d56e4677efc472fb.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;半月前给用了三年的小米 10 换了一块二手电池，手机又可以再战三年了。想着自己还有两个耳机，也没有严重故障，只是电池亏点用不了半小时，于是也想着换个电池，看看能不能复活。本来以为耳机太小，太精密，怕自己修不了，但是想想如果不换电池，这个耳机也还是死路一条，不如自己尝试尝试，</summary>
      
    
    
    
    <category term="缝缝补补又三年" scheme="https://lifeislife.cn/categories/%E7%BC%9D%E7%BC%9D%E8%A1%A5%E8%A1%A5%E5%8F%88%E4%B8%89%E5%B9%B4/"/>
    
    
    <category term="维修" scheme="https://lifeislife.cn/tags/%E7%BB%B4%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>解决Adobe Photoshop正版升级弹窗</title>
    <link href="https://lifeislife.cn/2023/12/23/%E8%A7%A3%E5%86%B3Adobe-Photoshop%E6%AD%A3%E7%89%88%E5%8D%87%E7%BA%A7%E5%BC%B9%E7%AA%97/"/>
    <id>https://lifeislife.cn/2023/12/23/%E8%A7%A3%E5%86%B3Adobe-Photoshop%E6%AD%A3%E7%89%88%E5%8D%87%E7%BA%A7%E5%BC%B9%E7%AA%97/</id>
    <published>2023-12-23T04:08:36.000Z</published>
    <updated>2023-12-23T04:26:51.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>不知什么原因，一直正常使用的Adobe Photoshop 2021突然开始弹窗提示升级，还是日文的（应该是代理到到日本了），可能根据地区不同，弹窗的内容也不同，但是都是提示升级，倒计时10天，不知道十天之后啥情况。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/a8b83c2f3e0916e9b2fd92dc7332dc89.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>Adobe的其他软件同理，比如我在用的Lightroom也是这样，解决方法也是一样的。以下方式基于Windows 11，其他版本的Windows也是类似的。</p><p><strong>如果没有用代理</strong>，可以直接将Photoshop程序禁止联网。可以通过配置Windows的防火墙来实现，具体方法如下：</p><ol><li><p>打开设置搜索“防火墙”，打开Windows防火墙，选择“高级设置”。</p><p> <img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/a38bd63b6c184481c797cd3143e3b21d.png"></p></li><li><p>选择“出站规则”，点击“新建规则”，选择规则类型为“程序”，程序选择为Photoshop的安装目录下的Photoshop.exe，然后选择“阻止连接”，一路下一步，最后命名规则为“禁止Photoshop联网”。<br> <img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/23/31498beb037fc282838480a3624850cc.png"></p></li></ol><p><strong>如果使用了代理</strong>，防火墙可能会被绕过，Photoshop可能仍然会通过代理访问更新服务器。需要通过配置代理将Photoshop禁止代理。如果不配置，可以在<strong>每次打开Adobe相关软件前关闭代理</strong>，如果配置，这里以Clash for Windows为例，可以通过配置Clash的规则来实现，不用关闭代理。具体方法如下：</p><p>点击“Profiles”，选择自己的订阅，右击选择“Edit”，将以下这些规则添加到配置文件中保存即可：</p><pre class="line-numbers language-ymal" data-language="ymal"><code class="language-ymal">- PROCESS-NAME,Lightroom.exe,REJECT- PROCESS-NAME,lightroom.exe,REJECT- PROCESS-NAME,Photoshop.exe,REJECT- PROCESS-NAME,photoshop.exe,REJECT- PROCESS-NAME,Adobe Lightroom CEF Helper.exe,REJECT- PROCESS-NAME,AdobeIPCBroker.exe,REJECT- PROCESS-NAME,dynamiclinkmanager.exe,REJECT- PROCESS-NAME,dynamiclinkmediaserver.exe,REJECT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他程序你可以自己添加，格式为<code>PROCESS-NAME,程序名,REJECT</code>。表示拒绝这些程序访问网络。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;不知什么原因，一直正常使用的Adobe Photoshop 2021突然开始弹窗提示升级，还是日文的（应该是代理到到日本了）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ZWIFT使用Tips</title>
    <link href="https://lifeislife.cn/2023/12/17/ZWIFT%E4%BD%BF%E7%94%A8Tips/"/>
    <id>https://lifeislife.cn/2023/12/17/ZWIFT%E4%BD%BF%E7%94%A8Tips/</id>
    <published>2023-12-17T05:24:55.000Z</published>
    <updated>2023-12-18T13:49:42.260Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/0573bf51587d55e549ac5fd4719733b4.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/6fb1f8bb10562bb55eb8b7eddb97a0ce.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="启动后闪退"><a href="#启动后闪退" class="headerlink" title="启动后闪退"></a>启动后闪退</h2><p>将输入法切换为英文模式再重新启动。</p><h2 id="没有其他玩家，只有自己"><a href="#没有其他玩家，只有自己" class="headerlink" title="没有其他玩家，只有自己"></a>没有其他玩家，只有自己</h2><p>挂全局代理重新启动。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/17/0573bf51587d55e549ac5fd4719733b4.png&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nexus搭建内部镜像</title>
    <link href="https://lifeislife.cn/2023/12/16/Nexus-%E9%95%9C%E5%83%8F%E4%BB%A3%E7%90%86/"/>
    <id>https://lifeislife.cn/2023/12/16/Nexus-%E9%95%9C%E5%83%8F%E4%BB%A3%E7%90%86/</id>
    <published>2023-12-16T04:16:34.000Z</published>
    <updated>2024-03-16T01:32:02.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.8"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nexus</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> sonatype/nexus3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nexus    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8081<span class="token punctuation">:</span><span class="token number">8081</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /srv/nexus/data<span class="token punctuation">:</span>/nexus<span class="token punctuation">-</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改/srv/nexus目录的所有者为当前用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R username:username /srv/nexus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改data目录有最高权限，否则无法启动成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">777</span> /srv/nexus/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="代理Docker-Hub"><a href="#代理Docker-Hub" class="headerlink" title="代理Docker Hub"></a>代理Docker Hub</h1><h2 id="登录WEB页面"><a href="#登录WEB页面" class="headerlink" title="登录WEB页面"></a>登录WEB页面</h2><p>登录WEB页面，地址为：<a href="http://192.168.1.9:8081。">http://192.168.1.9:8081。</a><br>用户名为：admin，密码通过命令获取：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> nexus3 <span class="token function">cat</span> /nexus-data/admin.password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建Blob"><a href="#创建Blob" class="headerlink" title="创建Blob"></a>创建Blob</h2><p>在 Nexus Repository Manager 中，Blob Store（二进制大对象存储）是一个用于存储仓库数据的核心组件。Blob Store 主要用于存储各种二进制文件，例如软件包、依赖库、构建产物等，这些文件通常被称为“blob”。</p><p>Blob Store 的作用包括：</p><ol><li><p><strong>存储二进制文件：</strong> Blob Store 被设计用来安全、可靠地存储二进制文件。这些文件可以是各种形式的构建产物、软件包、依赖库等。Blob Store 是 Nexus 仓库管理系统的核心，它为这些文件提供了一个中央存储位置。</p></li><li><p><strong>支持不同类型的存储后端：</strong> Nexus 支持不同类型的 Blob Store，例如本地文件系统、云存储（如Amazon S3、Google Cloud Storage）等。这使得用户可以根据需求选择不同的存储后端，并根据实际情况进行扩展或迁移。</p></li><li><p><strong>提供存储策略：</strong> Blob Store 允许你定义存储策略，以确定何时以及如何清理或删除不再需要的文件。这对于管理仓库的存储空间非常重要，可以根据策略自动清理不再需要的快照或旧版本。</p></li><li><p><strong>支持代理和缓存：</strong> 在 Maven Repository 的场景下，Blob Store 还可以用于代理远程 Maven 仓库，并缓存远程仓库中的文件。这有助于提高构建性能，减少对远程仓库的依赖。</p></li></ol><p>我们缓存的镜像需要存储为blob，所以需要创建一个Blob store。点击左侧菜单栏的Blob Stores，然后点击Create blob store，选择Type为File，Name填写为dockerhub。</p><h2 id="创建Repository"><a href="#创建Repository" class="headerlink" title="创建Repository"></a>创建Repository</h2><p>在 Nexus Repository Manager 中，有三种主要的仓库类型：Hosted Repository、Proxy Repository、和 Group Repository。每种类型都有不同的作用和用途：</p><ul><li><p>Hosted Repository（托管仓库）:</p><ul><li>作用： 用于存储和管理本地创建的部署（deploy）的二进制文件。这包括你自己或你的团队创建的库，例如 Maven 构件、npm 包、Docker 镜像等。</li><li>使用场景： 当你需要在内部存储和分享自己创建的构建产物时，你可以使用 Hosted Repository。</li></ul></li><li><p>Proxy Repository（代理仓库）:</p><ul><li>作用： 用于代理和缓存远程仓库的二进制文件。当你从远程仓库获取构建依赖时，Proxy Repository 会将这些文件缓存在本地，从而提高构建性能并减少对远程仓库的依赖。</li><li>使用场景： 在构建过程中，你通常会依赖于一些公共的远程仓库，例如 Maven Central、npm registry、Docker Hub等。使用 Proxy Repository 可以有效地管理这些依赖并减少对远程仓库的直接访问。</li></ul></li><li><p>Group Repository（组合仓库）:</p><ul><li>作用： 允许你将多个仓库组合成一个逻辑单元。当你需要在构建中同时使用多个仓库的内容时，Group Repository 可以将这些仓库组合在一起，使它们在应用程序中看起来像一个单一的仓库。</li><li>使用场景： 当你有多个 Proxy Repository 或 Hosted Repository 时，你可以使用 Group Repository 将它们组合在一起。这对于简化构建配置、统一依赖管理等非常有用。</li></ul></li></ul><p>我们一般创建三个仓库，proxy代理公共镜像，hosted保存自己的镜像，group将proxy和hosted组合在一起。我们分别创建三个仓库。</p><h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p>点击左侧菜单栏的Repositories，然后点击Create repository，选择Docker (proxy)，按照下图填写：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/65fc511b83db1d0af9a6559da6a80162.png"></p><p>Remote storage 图中填写为<code>https://registry-1.docker.io</code>，这是dockerhub的地址。但是实测会很慢，所以我们使用加速地址<code>https://dockerproxy.com</code>。需要注意修改一下。</p><blockquote><p>还有一些国内镜像源可选，可以参考这个项目。<a href="https://github.com/docker-practice/docker-registry-cn-mirror-test/actions/runs/7228669255">Test Registry · docker-practice/docker-registry-cn-mirror-test@83a4dd4</a></p></blockquote><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/c41a82504deb2a41eab15e4674199445.png"></p><p>Blob store选择为刚刚创建的<code>dockerhub</code>。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/2a4e0d1685e2d3e8a984bc46c0f039d2.png"></p><h3 id="hosted"><a href="#hosted" class="headerlink" title="hosted"></a>hosted</h3><p>hosted比较简单，只需要填个名称就行了，这里填写为<code>docker-hosted</code>。</p><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p>group 需要注意以下：</p><ol><li>HTTP需要单独设置端口号。我们设置与WEB页面不同的端口号，8082即可。</li><li>需要将proxy和hosted都添加到group中，这样才能将两个仓库组合在一起。</li></ol><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/922dcd44e678c2e22df359100fe32d53.png"></p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/8c4d65a43860e9b921eafc6898276123.png"></p><h2 id="启用Realms"><a href="#启用Realms" class="headerlink" title="启用Realms"></a>启用Realms</h2><p>这里要在 Security-Realms 里面启用 Docker Bearer Token Realm。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/6dadf22bfabdf994b394e93a5beb6001.png"></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>如果直接使用docker pull拉取镜像，会报错：</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">$ docker pull 192.168.1.9:8082&#x2F;redisUsing default tag: latestError response from daemon: Get &quot;https:&#x2F;&#x2F;192.168.1.9:8082&#x2F;v2&#x2F;&quot;: http: server gave HTTP response to HTTPS client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编辑<code>/etc/docker/daemon.json</code>文件，添加以下内容：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"192.168.1.9:8082"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"http://192.168.1.9:8082"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：registry-mirrors中只保留一个Nexus的地址，这样默认就会从Nexus拉取镜像。如果有多个地址，就可能会从其他地址拉取镜像。因为我们在Nexus中配置的URL就是docker-proxy的地址，他就是一个国内代理地址，所以这里我们只保留一个Nexus的地址就行。<br>注意： insecure-registries 拼写，不要写成 insecure-registry。最好直接复制，json格式很严格。</p></blockquote><p>重启Docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录Docker Registry：</p><p>需要注意的shi，这里的用户名和密码是Nexus的用户名和密码，不是Docker Hub的用户名和密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker login <span class="token number">192.168</span>.1.9:8082 -u admin -p admin123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拉取镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker pull redis                      Using default tag: latestlatest: Pulling from redis1f7ce2fa46ab: Already exists 4827e9d1e197: Pull complete 5845062cfda9: Pull complete 44d659adcf8b: Pull complete b6962d83313d: Pull complete 5d29cf86ecab: Pull complete 4f4fb700ef54: Pull complete 3a2d9f90268c: Pull complete Digest: sha256:249e1bfb9448ae9e76807748f8cb3c5cc73e55441b7b36364c61a7428c9e814cStatus: Downloaded newer image <span class="token keyword">for</span> <span class="token number">192.168</span>.1.9:8082/redis:latest<span class="token number">192.168</span>.1.9:8082/redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在首页的Browse Docker中看到镜像已经被缓存了。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/151588f16856a1e6e2d5215d230ed0de.png"></p><h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p>如果你需要上传自己修改的镜像，那么就需要修改之前的docker-hosted，其中HTTP中该为8083，和docker-proxy的端口号区分。这样我们就可以从8082下载镜像，从8083推送镜像。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/01/17/be0df03ad283819763b6a9f97ce88a59.png"></p><p>首先我们需要重命名镜像，格式如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker tag <span class="token operator">&lt;</span>imageId or imageName<span class="token operator">></span> <span class="token operator">&lt;</span>nexus-hostname<span class="token operator">></span>:<span class="token operator">&lt;</span>repository-port<span class="token operator">></span>/<span class="token operator">&lt;</span>image<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span>docker tag af340544ed62 <span class="token number">192.168</span>.1.9:8083/hello-world:mytagdocker push <span class="token number">192.168</span>.1.9:8083/hello-world:mytag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拉取这个镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull <span class="token number">192.168</span>.1.9:8083/hello-world:mytag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="代理-YUM-源"><a href="#代理-YUM-源" class="headerlink" title="代理 YUM 源"></a>代理 YUM 源</h1><h1 id="代理-APT-源"><a href="#代理-APT-源" class="headerlink" title="代理 APT 源"></a>代理 APT 源</h1><p>和 YUM 源代理稍有不同的是，APT 源代理时没有 Group 仓库，但是使用APT源的系统如Ubuntu也是有多个版本的，我们只需要在 Distribution 参数里填写需要代理的版本即可，每隔版本用逗号分隔。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2024/03/01/11753bea79901711a31f9e435d31fc91.png"></p><p>常用的版本以及代号如下：</p><ul><li>Ubuntu 16.04 Xenial Xerus</li><li>Ubuntu 18.04 Bionic Beaver</li><li>Ubuntu 20.04 Focal Fossa</li><li>Ubuntu 21.04 Hirsute Hippo</li><li>Ubuntu 21.10 Impish Indri</li><li>Ubuntu 22.04 Jammy Jellyfish</li><li>Ubuntu 22.10 Kinetic Kudu</li><li>Ubuntu 23.04 Lunar Lobster</li><li>Ubuntu 23.10 Mantic Minotau</li></ul><p>代理地址为：<a href="http://192.168.1.9:8081/repository/apt-proxy/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8Ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E6%9D%A5%E4%BB%A3%E7%90%86APT%E6%BA%90%E3%80%82%E4%BF%AE%E6%94%B9%60/etc/apt/sources.list%60%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B0%86%E5%8E%9F%E6%9D%A5%E7%9A%84%E6%BA%90%E5%9C%B0%E5%9D%80%E6%9B%BF%E6%8D%A2%E4%B8%BANexus%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8D%B3%E5%8F%AF%E3%80%82">http://192.168.1.9:8081/repository/apt-proxy/，我们可以在Ubuntu中使用这个地址来代理APT源。修改`/etc/apt/sources.list`文件，将原来的源地址替换为Nexus的地址即可。</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>deb http://192.168.1.9:8081/repository/apt-proxy/ jammy main restricted universe multiverse<span class="token comment"># deb-src http://192.168.1.9:8081/repository/apt-proxy/ jammy main restricted universe multiverse</span>deb http://192.168.1.9:8081/repository/apt-proxy/ jammy-updates main restricted universe multiverse<span class="token comment"># deb-src http://192.168.1.9:8081/repository/apt-proxy/ jammy-updates main restricted universe multiverse</span>deb http://192.168.1.9:8081/repository/apt-proxy/ jammy-backports main restricted universe multiverse<span class="token comment"># deb-src http://192.168.1.9:8081/repository/apt-proxy/ jammy-backports main restricted universe multiverse</span>deb http://192.168.1.9:8081/repository/apt-proxy/ jammy-security main restricted universe multiverse<span class="token comment"># deb-src http://192.168.1.9:8081/repository/apt-proxy/ jammy-security main restricted universe multiverse</span><span class="token comment"># 预发布软件源，不建议启用</span><span class="token comment"># deb http://192.168.1.9:8081/repository/apt-proxy/ jammy-proposed main restricted universe multiverse</span><span class="token comment"># # deb-src http://192.168.1.9:8081/repository/apt-proxy/ jammy-proposed main restricted universe multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代理-pip-源"><a href="#代理-pip-源" class="headerlink" title="代理 pip 源"></a>代理 pip 源</h1><p>使用阿里云作为代理，我们需要在Nexus中创建一个PyPI代理仓库。点击左侧菜单栏的Repositories，然后点击Create repository，选择PyPI (proxy)，按照下图填写：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F15%2Fc88f9c65dceb08b3b1b701a6625a4764.png"></p><p>再创建一个PyPI Group仓库，将刚刚创建的PyPI代理仓库和PyPI Hosted仓库添加到Group仓库中。</p><p>编辑<code>/etc/pip.conf</code>文件，添加以下内容：</p><blockquote><p>或者在用户目录下的<code>~/.pip/pip.conf</code>文件中添加</p></blockquote><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[global]index &#x3D; http:&#x2F;&#x2F;192.168.1.9:8081&#x2F;repository&#x2F;pypi&#x2F;index-url &#x3D; http:&#x2F;&#x2F;192.168.1.9:8081&#x2F;repository&#x2F;pypi&#x2F;simpletrusted-host &#x3D;  192.168.1.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="在-WSL2-中使用-Nexus-代理"><a href="#在-WSL2-中使用-Nexus-代理" class="headerlink" title="在 WSL2 中使用 Nexus 代理"></a>在 WSL2 中使用 Nexus 代理</h1><p>因为 WSL2 使用的是宿主机Windows的Docker desktop作为Docker引擎，所以我们需要在Windows中配置Docker的代理。打开Docker Desktop，点击Settings，然后选择Docker Engine，添加以下内容：</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F15%2Ffa63bec3941423faa870438fc14b06e5.png"></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"builder"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"gc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"defaultKeepStorage"</span><span class="token operator">:</span> <span class="token string">"20GB"</span><span class="token punctuation">,</span>      <span class="token property">"enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"experimental"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"http://192.168.1.9:8082"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"http://192.168.1.9:8082"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启Docker Desktop。然后在WSL2中使用 <code>docker info</code> 查看是否配置成功。</p><p><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/%2F2024%2F03%2F15%2Fa4bf4946f10cce7d25cd5f25ce104fc5.png"></p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="docker-login-nexus-unauthorized-authentication-required"><a href="#docker-login-nexus-unauthorized-authentication-required" class="headerlink" title="docker login nexus unauthorized authentication required"></a>docker login nexus unauthorized authentication required</h2><ol><li>确认登录密码是否正确，密码为Nexus登录密码</li><li>却是否启用Realms</li></ol><h2 id="docker-login-nexus-connection-refused"><a href="#docker-login-nexus-connection-refused" class="headerlink" title="docker login nexus connection refused"></a>docker login nexus connection refused</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker login <span class="token number">192.168</span>.1.9:8082 -u admin -p admin123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>确认Docker compose配置文件中已经将端口8082暴露，如果新增需要重启Nexus</p></li><li><p>确认防火墙关闭或者已经打开端口</p><ol><li>```bash<br> sudo ufw allow 8082<br> sudo ufw allow 8082/tcp <pre class="line-numbers language-none"><code class="language-none">3. 确认已经将私有仓库添加到了&#96;&#x2F;etc&#x2F;docker&#x2F;daemon.json&#96;，并且及时重启了docker服务    1. &#96;&#96;&#96;bash        sudo systemctl restart docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>确认已经开启了Http connector</p><ol><li>如图：<br><img src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2023/12/16/922dcd44e678c2e22df359100fe32d53.png"></li></ol></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker-Compose&quot;&gt;&lt;/a&gt;Docker-Compose&lt;/h1&gt;&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="Self-Hosted" scheme="https://lifeislife.cn/categories/Self-Hosted/"/>
    
    
    <category term="Docker" scheme="https://lifeislife.cn/tags/Docker/"/>
    
    <category term="Nexus" scheme="https://lifeislife.cn/tags/Nexus/"/>
    
    <category term="DevOps" scheme="https://lifeislife.cn/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Tunasync 搭建私有镜像站</title>
    <link href="https://lifeislife.cn/2023/12/14/Tunasync%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E7%AB%99/"/>
    <id>https://lifeislife.cn/2023/12/14/Tunasync%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%95%9C%E5%83%8F%E7%AB%99/</id>
    <published>2023-12-14T06:15:54.000Z</published>
    <updated>2023-12-18T13:50:07.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tunasync-项目简介"><a href="#Tunasync-项目简介" class="headerlink" title="Tunasync 项目简介"></a>Tunasync 项目简介</h1><p>Tunasync 是一个开源的镜像站点镜像工具，可以帮助你快速搭建一个镜像站点，也可以帮助你快速的同步镜像站点的镜像。我们所熟知的清华大学镜像站就是使用 Tunasync 来同步镜像的。</p><h1 id="准备-workspace"><a href="#准备-workspace" class="headerlink" title="准备 workspace"></a>准备 workspace</h1><p>创建目录用于存放 Tunasync 的程序、配置文件和数据库文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/username/tunasync<span class="token function">mkdir</span> /home/username/tunasync/conf<span class="token function">mkdir</span> /home/username/tunasync/db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建目录用于存放镜像文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /srv/mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>srv 目录需要 root 权限，将 mirrors 目录的所有者改为当前用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R username:username /srv/mirrors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="下载-Tunasync"><a href="#下载-Tunasync" class="headerlink" title="下载 Tunasync"></a>下载 Tunasync</h1><p>可以从 <a href="https://github.com/tuna/tunasync">Tunasync 项目</a>的 Github releases 编译好的程序直接使用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/username/tunasync<span class="token function">wget</span> https://github.com/tuna/tunasync/releases/download/v0.8.0/tunasync-linux-amd64-bin.tar.gz<span class="token function">tar</span> -zxvf tunasync-linux-amd64-bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="配置-Tunasync"><a href="#配置-Tunasync" class="headerlink" title="配置 Tunasync"></a>配置 Tunasync</h1><h2 id="Manager-配置"><a href="#Manager-配置" class="headerlink" title="Manager 配置"></a>Manager 配置</h2><p>创建配置文件<code>/home/username/tunasync/conf/manager.conf</code>，并添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">debug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>server<span class="token punctuation">]</span>addr <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>port <span class="token operator">=</span> <span class="token number">12345</span>ssl_cert <span class="token operator">=</span> <span class="token string">""</span>ssl_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">[</span>files<span class="token punctuation">]</span>db_type <span class="token operator">=</span> <span class="token string">"bolt"</span>db_file <span class="token operator">=</span> <span class="token string">"/home/username/tunasync/db/manager.db"</span>ca_cert <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Worker-配置"><a href="#Worker-配置" class="headerlink" title="Worker 配置"></a>Worker 配置</h2><p>创建配置文件<code>/home/username/tunasync/conf/worker-openeuler.conf</code>，并添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token string">"openeuler_worker"</span>log_dir <span class="token operator">=</span> <span class="token string">"/srv/mirrors/log/tunasync/&#123;&#123;.Name&#125;&#125;"</span>mirror_dir <span class="token operator">=</span> <span class="token string">"/srv/mirrors"</span>concurrent <span class="token operator">=</span> <span class="token number">10</span>interval <span class="token operator">=</span> <span class="token number">1440</span><span class="token punctuation">[</span>manager<span class="token punctuation">]</span>api_base <span class="token operator">=</span> <span class="token string">"http://localhost:12345"</span>token <span class="token operator">=</span> <span class="token string">"some_token"</span>ca_cert <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">[</span>cgroup<span class="token punctuation">]</span><span class="token builtin class-name">enable</span> <span class="token operator">=</span> <span class="token boolean">false</span>base_path <span class="token operator">=</span> <span class="token string">"/sys/fs/cgroup"</span>group <span class="token operator">=</span> <span class="token string">"tunasync"</span><span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token function">hostname</span> <span class="token operator">=</span> <span class="token string">"localhost"</span>listen_addr <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>listen_port <span class="token operator">=</span> <span class="token number">16010</span>ssl_cert <span class="token operator">=</span> <span class="token string">""</span>ssl_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">[</span><span class="token punctuation">[</span>mirrors<span class="token punctuation">]</span><span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token string">"centos"</span>provider <span class="token operator">=</span> <span class="token string">"rsync"</span>upstream <span class="token operator">=</span> <span class="token string">"rsync://mirrors.tuna.tsinghua.edu.cn/openeuler/"</span>use_ipv6 <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="启动-Tunasync"><a href="#启动-Tunasync" class="headerlink" title="启动 Tunasync"></a>启动 Tunasync</h1><h2 id="启动-Manager"><a href="#启动-Manager" class="headerlink" title="启动 Manager"></a>启动 Manager</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/username/tunasync./tunasync manager -c conf/manager.conf <span class="token operator">>></span> /srv/mirrors/log/plog/manager.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动-Worker"><a href="#启动-Worker" class="headerlink" title="启动 Worker"></a>启动 Worker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/username/tunasync./tunasync worker -c conf/worker-openeuler.conf <span class="token operator">>></span> /srv/mirrors/log/plog/worker-openeuler.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常可能同步不止一个镜像站点，可以创建多个 Worker 配置文件，然后启动多个 Worker。</p><h1 id="创建-web-服务"><a href="#创建-web-服务" class="headerlink" title="创建 web 服务"></a>创建 web 服务</h1><ol><li><p><strong>安装 Apache2：</strong></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>修改配置文件：</strong></p><p> Ubuntu 中的 Apache2 主要配置文件是 <code>/etc/apache2/apache2.conf</code>。可以在此文件中进行全局配置，也可以使用专门的配置文件，例如 <code>/etc/apache2/sites-available/your-site.conf</code>。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2/apache2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 在 <code>apache2.conf</code> 文件中，添加以下行，设置 <code>DocumentRoot</code> 和目录访问权限：</p> <pre class="line-numbers language-apache" data-language="apache"><code class="language-apache">DocumentRoot &#x2F;mirrors&lt;Directory &quot;&#x2F;mirrors&quot;&gt;    Options Indexes FollowSymLinks    AllowOverride None    Require all granted&lt;&#x2F;Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 请确保将 <code>&lt;Directory&gt;</code> 部分添加到正确的位置。可以在文件中找到 <code>&lt;Directory /var/www/&gt;</code> 部分，然后在该部分下添加配置。</p></li><li><p><strong>重新启动 Apache2 服务：</strong></p><p> 在进行配置更改后，需要重新启动 Apache2 服务以使更改生效：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>补充文件：</strong></p><p> 将 <code>index.html</code> 文件和其他需要的文件添加到 <code>/srv/mirrors</code> 目录中。</p></li><li><p><strong>测试：</strong></p><p> 打开 Web 浏览器，访问 <code>http://your-server-ip</code> 或 <code>http://localhost</code>，应该能够看到 <code>/srv/mirrors</code> 目录中的文件。</p></li><li><p>如打不开，需要开启防火墙</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow http<span class="token function">sudo</span> ufw allow https<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改 Web 服务端口</p><ol><li><p><strong>编辑 Apache2 配置文件：</strong></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apache2/ports.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**在文件中找到 <strong>​</strong><code>Listen</code><strong>​ ** 行，修改端口：</strong></p> <pre class="line-numbers language-apache" data-language="apache"><code class="language-apache">Listen 2081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>编辑虚拟主机配置（如果有）：</strong></p><p> 如果你有虚拟主机配置文件（通常在 <code>/etc/apache2/sites-available/</code> 中），确保其中的 <code>&lt;VirtualHost&gt;</code> 部分中的端口也被修改为 2081。</p></li><li><p><strong>保存并退出配置文件。</strong></p></li><li><p><strong>重启 Apache 服务：</strong></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol><h3 id="打开防火墙端口"><a href="#打开防火墙端口" class="headerlink" title="打开防火墙端口"></a>打开防火墙端口</h3><pre><code>1. **打开 2081 端口：**    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw allow <span class="token number">2081</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>2. **检查配置：**    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    确保 2081 端口已经正确添加。3. **重启防火墙（可选）：**    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>    或者    <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart ufw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这样，你就将 Apache2 Web 服务的端口修改为 2081，并且只开放了 2081 端口。确保修改了防火墙规则后，仍能够通过新的端口访问你的网站。</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tunasync-项目简介&quot;&gt;&lt;a href=&quot;#Tunasync-项目简介&quot; class=&quot;headerlink&quot; title=&quot;Tunasync 项目简介&quot;&gt;&lt;/a&gt;Tunasync 项目简介&lt;/h1&gt;&lt;p&gt;Tunasync 是一个开源的镜像站点镜像工具，可以</summary>
      
    
    
    
    <category term="Self-Hosted" scheme="https://lifeislife.cn/categories/Self-Hosted/"/>
    
    
    <category term="Docker" scheme="https://lifeislife.cn/tags/Docker/"/>
    
    <category term="DevOps" scheme="https://lifeislife.cn/tags/DevOps/"/>
    
    <category term="Tunasync" scheme="https://lifeislife.cn/tags/Tunasync/"/>
    
  </entry>
  
  <entry>
    <title>VSCode Linux内核源码阅读环境</title>
    <link href="https://lifeislife.cn/2023/12/14/VSCode-Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/"/>
    <id>https://lifeislife.cn/2023/12/14/VSCode-Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</id>
    <published>2023-12-14T02:02:32.000Z</published>
    <updated>2023-12-14T02:35:33.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Clangd插件"><a href="#安装Clangd插件" class="headerlink" title="安装Clangd插件"></a>安装Clangd插件</h2><p>在VSCode中，你可以通过以下步骤安装Clangd插件：</p><ul><li>打开VSCode；</li><li>点击左侧的插件图标（Ctrl+Shift+X）；</li><li>搜索“Clangd”插件；</li><li>点击“安装”按钮。</li></ul><h2 id="生成compile-commands-json"><a href="#生成compile-commands-json" class="headerlink" title="生成compile_commands.json"></a>生成compile_commands.json</h2><p>对于make项目来说，常规来讲，可以使用Bear来对源码生成compile_commands.json。首先安装Bear：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> bear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在项目根目录下执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bear <span class="token function">make</span> -j32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译完成后，会在项目根目录下生成compile_commands.json文件。</p><blockquote><p>对于CMAKE项目来说，可以在CMakeLists.txt中添加以下语句，然后重新编译项目即可生成compile_commands.json文件：<br>set(CMAKE_EXPORT_COMPILE_COMMANDS True)</p></blockquote><h2 id="配置Clangd插件"><a href="#配置Clangd插件" class="headerlink" title="配置Clangd插件"></a>配置Clangd插件</h2><p>进入到项目目录下，下载配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/Dunky-Z/dot-vscode.git .vscode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要修改<code>--compile-commands-dir</code>参数，将其修改为自己的路径。</p><p>随便打开内核源码文件，clangd将会自动生成索引，并将索引文件.idx保存在项目根目录下的.cache目录中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Linux-5.4├── .cache│   └── clangd├── .config├── .git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果生成了索引文件，那么说明配置成功，可以打开源码文件看看是否能够正常跳转。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Clangd插件&quot;&gt;&lt;a href=&quot;#安装Clangd插件&quot; class=&quot;headerlink&quot; title=&quot;安装Clangd插件&quot;&gt;&lt;/a&gt;安装Clangd插件&lt;/h2&gt;&lt;p&gt;在VSCode中，你可以通过以下步骤安装Clangd插件：&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="工欲善其事必先利其器" scheme="https://lifeislife.cn/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>嵌入式Linux驱动开发环境搭建踩坑</title>
    <link href="https://lifeislife.cn/2023/12/13/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/"/>
    <id>https://lifeislife.cn/2023/12/13/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%B8%A9%E5%9D%91/</id>
    <published>2023-12-13T14:59:23.000Z</published>
    <updated>2023-12-13T15:12:17.566Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="https://pan.baidu.com/s/1Gnh9G8a05LSgHYlohyl93Q?pwd=root#list/path=%2F">文档资料百度网盘</a>下载配套资料，学习手册目录中有嵌入式Linux应用开发完全手册V5.1_STM32MP157_Pro开发板.pdf，里面有详细的开发环境搭建步骤，但是在搭建过程中还是遇到了一些问题，记录如下：</p><h2 id="ModuleNotFoundError-No-module-named-‘requests’"><a href="#ModuleNotFoundError-No-module-named-‘requests’" class="headerlink" title="ModuleNotFoundError: No module named ‘requests’"></a>ModuleNotFoundError: No module named ‘requests’</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>/repo/repo init -u https://gitee.com/weidongshan/manifests.git -b linux-sdk -m stm32mp1/100ask_stm32mp157_pro_release-v2.0.xml --no-repo-verifyTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"/home/nic/develop/repo/main.py"</span>, line <span class="token number">56</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from subcmds.version <span class="token function">import</span> Version  File <span class="token string">"/home/nic/develop/repo/subcmds/__init__.py"</span>, line <span class="token number">35</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    mod <span class="token operator">=</span> __import__<span class="token punctuation">(</span>__name__,  File <span class="token string">"/home/nic/develop/repo/subcmds/selfupdate.py"</span>, line <span class="token number">22</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from subcmds.sync <span class="token function">import</span> _PostRepoUpgrade  File <span class="token string">"/home/nic/develop/repo/subcmds/sync.py"</span>, line <span class="token number">74</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    from project <span class="token function">import</span> Project  File <span class="token string">"/home/nic/develop/repo/project.py"</span>, line <span class="token number">33</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token function">import</span> requestsModuleNotFoundError: No module named <span class="token string">'requests'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ModuleNotFoundError-No-module-named-‘formatter’"><a href="#ModuleNotFoundError-No-module-named-‘formatter’" class="headerlink" title="ModuleNotFoundError: No module named ‘formatter’"></a>ModuleNotFoundError: No module named ‘formatter’</h2><p>formatter已经在python3.4标记成废弃接口，在python3.10已经正式删除，并且其依赖的cStringIO也已经删除。所以不能简单的安装formatter模块，可以通过两种方式解决：</p><h3 id="方法一：降低python版本到3-9以下"><a href="#方法一：降低python版本到3-9以下" class="headerlink" title="方法一：降低python版本到3.9以下"></a>方法一：降低python版本到3.9以下</h3><ol><li>添加 ppa 源，此源可安装多个 python 版本</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:deadsnakes/ppa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 python3.9</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3.9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>建立 python 的组,并添加 Python3.9 的可选项，优先级为 1</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --install /usr/bin/python python /usr/bin/python3.9 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>验证当前 python 是否是 3.9 版本</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>如果不是，用以下命令手动配置一下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --config python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="方法二：修改repo源码"><a href="#方法二：修改repo源码" class="headerlink" title="方法二：修改repo源码"></a>方法二：修改repo源码</h3><p>将<code>repo/repo/subcmds/help.py</code>文件替换为如下内容：</p><blockquote><p>也可以参考<a href="https://gerrit-review.googlesource.com/c/git-repo/+/303282">Google修复后的代码</a>，根据diff修改文件。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment">#</span><span class="token comment"># Copyright (C) 2008 The Android Open Source Project</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> re<span class="token keyword">import</span> sys<span class="token keyword">import</span> textwrap<span class="token keyword">from</span> subcmds <span class="token keyword">import</span> all_commands<span class="token keyword">from</span> color <span class="token keyword">import</span> Coloring<span class="token keyword">from</span> command <span class="token keyword">import</span> PagedCommand<span class="token punctuation">,</span> MirrorSafeCommand<span class="token punctuation">,</span> GitcAvailableCommand<span class="token punctuation">,</span> GitcClientCommand<span class="token keyword">import</span> gitc_utils<span class="token keyword">class</span> <span class="token class-name">Help</span><span class="token punctuation">(</span>PagedCommand<span class="token punctuation">,</span> MirrorSafeCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>  common <span class="token operator">=</span> <span class="token boolean">False</span>  helpSummary <span class="token operator">=</span> <span class="token string">"Display detailed help on a command"</span>  helpUsage <span class="token operator">=</span> <span class="token triple-quoted-string string">"""%prog [--all|command]"""</span>  helpDescription <span class="token operator">=</span> <span class="token triple-quoted-string string">"""Displays detailed usage information about a command."""</span>  <span class="token keyword">def</span> <span class="token function">_PrintCommands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> commandNames<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Helper to display |commandNames| summaries."""</span>    maxlen <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> commandNames<span class="token punctuation">:</span>      maxlen <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt <span class="token operator">=</span> <span class="token string">'  %%-%ds  %%s'</span> <span class="token operator">%</span> maxlen    <span class="token keyword">for</span> name <span class="token keyword">in</span> commandNames<span class="token punctuation">:</span>      command <span class="token operator">=</span> all_commands<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>        summary <span class="token operator">=</span> command<span class="token punctuation">.</span>helpSummary<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>        summary <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>fmt <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> summary<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">_PrintAllCommands</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'usage: repo COMMAND [ARGS]'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The complete list of recognized repo commands are:'</span><span class="token punctuation">)</span>    commandNames <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>all_commands<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_PrintCommands<span class="token punctuation">(</span>commandNames<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"See 'repo help &lt;command>' for more information on a "</span>          <span class="token string">'specific command.'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">_PrintCommonCommands</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'usage: repo COMMAND [ARGS]'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The most commonly used repo commands are:'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">gitc_supported</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> GitcAvailableCommand<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> GitcClientCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>      <span class="token keyword">if</span> self<span class="token punctuation">.</span>manifest<span class="token punctuation">.</span>isGitcClient<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>      <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> GitcClientCommand<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>      <span class="token keyword">if</span> gitc_utils<span class="token punctuation">.</span>get_gitc_manifest_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>    commandNames <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name                                <span class="token keyword">for</span> name<span class="token punctuation">,</span> command <span class="token keyword">in</span> all_commands<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token keyword">if</span> command<span class="token punctuation">.</span>common <span class="token keyword">and</span> gitc_supported<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_PrintCommands<span class="token punctuation">(</span>commandNames<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>        <span class="token string">"See 'repo help &lt;command>' for more information on a specific command.\n"</span>        <span class="token string">"See 'repo help --all' for a complete list of recognized commands."</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">_PrintCommandHelp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> header_prefix<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">_Out</span><span class="token punctuation">(</span>Coloring<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gc<span class="token punctuation">)</span><span class="token punctuation">:</span>        Coloring<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> gc<span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>heading <span class="token operator">=</span> self<span class="token punctuation">.</span>printer<span class="token punctuation">(</span><span class="token string">'heading'</span><span class="token punctuation">,</span> attr<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_first <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">def</span> <span class="token function">_PrintSection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heading<span class="token punctuation">,</span> bodyAttr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>          body <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> bodyAttr<span class="token punctuation">)</span>        <span class="token keyword">except</span> AttributeError<span class="token punctuation">:</span>          <span class="token keyword">return</span>        <span class="token keyword">if</span> body <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> body <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>          <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_first<span class="token punctuation">:</span>          self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_first <span class="token operator">=</span> <span class="token boolean">False</span>                self<span class="token punctuation">.</span>heading<span class="token punctuation">(</span><span class="token string">'%s%s'</span><span class="token punctuation">,</span> header_prefix<span class="token punctuation">,</span> heading<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>        me <span class="token operator">=</span> <span class="token string">'repo %s'</span> <span class="token operator">%</span> cmd<span class="token punctuation">.</span>NAME        body <span class="token operator">=</span> body<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        body <span class="token operator">=</span> body<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%prog'</span><span class="token punctuation">,</span> me<span class="token punctuation">)</span>        <span class="token comment"># Extract the title, but skip any trailing &#123;#anchors&#125;.</span>        asciidoc_hdr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^\n?#+ ([^&#123;]+)(\&#123;#.+\&#125;)?$'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> para <span class="token keyword">in</span> body<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> para<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'%s'</span><span class="token punctuation">,</span> para<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>          m <span class="token operator">=</span> asciidoc_hdr<span class="token punctuation">.</span>match<span class="token punctuation">(</span>para<span class="token punctuation">)</span>          <span class="token keyword">if</span> m<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>heading<span class="token punctuation">(</span><span class="token string">'%s%s'</span><span class="token punctuation">,</span> header_prefix<span class="token punctuation">,</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>          lines <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>wrap<span class="token punctuation">(</span>para<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>                                break_long_words<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> break_on_hyphens<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'%s'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>nl<span class="token punctuation">(</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> _Out<span class="token punctuation">(</span>self<span class="token punctuation">.</span>manifest<span class="token punctuation">.</span>globalConfig<span class="token punctuation">)</span>    out<span class="token punctuation">.</span>_PrintSection<span class="token punctuation">(</span><span class="token string">'Summary'</span><span class="token punctuation">,</span> <span class="token string">'helpSummary'</span><span class="token punctuation">)</span>    cmd<span class="token punctuation">.</span>OptionParser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span>_PrintSection<span class="token punctuation">(</span><span class="token string">'Description'</span><span class="token punctuation">,</span> <span class="token string">'helpDescription'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">_PrintAllCommandHelp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>all_commands<span class="token punctuation">)</span><span class="token punctuation">:</span>      cmd <span class="token operator">=</span> all_commands<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      cmd<span class="token punctuation">.</span>manifest <span class="token operator">=</span> self<span class="token punctuation">.</span>manifest      self<span class="token punctuation">.</span>_PrintCommandHelp<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> header_prefix<span class="token operator">=</span><span class="token string">'[%s] '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">_Options</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-a'</span><span class="token punctuation">,</span> <span class="token string">'--all'</span><span class="token punctuation">,</span>                 dest<span class="token operator">=</span><span class="token string">'show_all'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span>                 <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'show the complete list of commands'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'--help-all'</span><span class="token punctuation">,</span>                 dest<span class="token operator">=</span><span class="token string">'show_all_help'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span>                 <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'show the --help of all commands'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">Execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> opt<span class="token punctuation">.</span>show_all_help<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_PrintAllCommandHelp<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">elif</span> opt<span class="token punctuation">.</span>show_all<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_PrintAllCommands<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_PrintCommonCommands<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>      name <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> all_commands<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"repo: '%s' is not a repo command."</span> <span class="token operator">%</span> name<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      cmd<span class="token punctuation">.</span>manifest <span class="token operator">=</span> self<span class="token punctuation">.</span>manifest      self<span class="token punctuation">.</span>_PrintCommandHelp<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>_PrintCommandHelp<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过&lt;a href=&quot;https://pan.baidu.com/s/1Gnh9G8a05LSgHYlohyl93Q?pwd=root#list/path=%2F&quot;&gt;文档资料百度网盘&lt;/a&gt;下载配套资料，学习手册目录中有嵌入式Linux应用开发完全手册V5.1_STM32M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决Ubuntu更新源报错Clearsigned file isnt valid, got NOSPLIT</title>
    <link href="https://lifeislife.cn/2023/11/19/%E8%A7%A3%E5%86%B3Ubuntu%E6%9B%B4%E6%96%B0%E6%BA%90%E6%8A%A5%E9%94%99Clearsigned-file-isn-t-valid-got-NOSPLIT/"/>
    <id>https://lifeislife.cn/2023/11/19/%E8%A7%A3%E5%86%B3Ubuntu%E6%9B%B4%E6%96%B0%E6%BA%90%E6%8A%A5%E9%94%99Clearsigned-file-isn-t-valid-got-NOSPLIT/</id>
    <published>2023-11-19T13:18:09.000Z</published>
    <updated>2023-11-19T13:23:00.588Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在更新源时报错 Clearsigned file isn’t valid, got ‘NOSPLIT’ (does the network require authentication?)。</p><p>换中科大的源解决，其余源无法解决。</p><p>如要用于其他版本，把 jammy 换成其他版本代号即可: 22.04：jammy；20.04：focal；18.04：bionic；16.04：xenial；14.04：trusty。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认注释了源码仓库，如有需要可自行取消注释</span>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span>deb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Gitea部署个人代码仓库</title>
    <link href="https://lifeislife.cn/2023/11/18/%E4%BD%BF%E7%94%A8Gitea%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
    <id>https://lifeislife.cn/2023/11/18/%E4%BD%BF%E7%94%A8Gitea%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/</id>
    <published>2023-11-18T10:17:42.000Z</published>
    <updated>2023-11-18T10:33:25.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker-compose 部署"></a>docker-compose 部署</h1><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.7"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">postgres</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> postgres    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 5432<span class="token punctuation">:</span><span class="token number">5432</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> br<span class="token punctuation">-</span>net<span class="token punctuation">-</span>gitea    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> user      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">POSTGRES_DB</span><span class="token punctuation">:</span> gitea    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./postgresql<span class="token punctuation">:</span>/var/lib/postgresql      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/lib/postgresql/data  <span class="token key atrule">gitea</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> gitea/gitea<span class="token punctuation">:</span>1.20.5    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitea    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> USER_UID=1000      <span class="token punctuation">-</span> USER_GID=1000      <span class="token punctuation">-</span> GITEA__database__DB_TYPE=postgres      <span class="token punctuation">-</span> GITEA__database__HOST=192.168.1.9<span class="token punctuation">:</span><span class="token number">5432</span>      <span class="token punctuation">-</span> GITEA__database__NAME=gitea      <span class="token punctuation">-</span> GITEA__database__USER=user      <span class="token punctuation">-</span> GITEA__database__PASSWD=123456    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> br<span class="token punctuation">-</span>net<span class="token punctuation">-</span>gitea    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> /etc/timezone<span class="token punctuation">:</span>/etc/timezone<span class="token punctuation">:</span>ro      <span class="token punctuation">-</span> /etc/localtime<span class="token punctuation">:</span>/etc/localtime<span class="token punctuation">:</span>ro      <span class="token punctuation">-</span> /home/git/.ssh/<span class="token punctuation">:</span>/data/git/.ssh    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3000<span class="token punctuation">:</span><span class="token number">3000</span>      <span class="token punctuation">-</span> <span class="token string">"127.0.0.1:2222:22"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> postgres  <span class="token key atrule">act_runner</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> gitea/act_runner<span class="token punctuation">:</span>latest    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> GITEA_INSTANCE_URL=http<span class="token punctuation">:</span>//192.168.1.9<span class="token punctuation">:</span><span class="token number">3000</span>      <span class="token punctuation">-</span> GITEA_RUNNER_REGISTRATION_TOKEN=Qw5Qf4A1bTENfIOQlc1NSNyFYMLp7TAtSujb5ihF      <span class="token punctuation">-</span> GITEA_RUNNER_NAME=docker_runner    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock      <span class="token punctuation">-</span> ./act_runner/act_data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./act_runner/act_cache<span class="token punctuation">:</span>/root/.cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="首次登录web时没有创建管理员账号，如何登录"><a href="#首次登录web时没有创建管理员账号，如何登录" class="headerlink" title="首次登录web时没有创建管理员账号，如何登录"></a>首次登录web时没有创建管理员账号，如何登录</h2><p>打开Gitea网页注册的第一个账号就是管理员账号。无需特殊设置。也无需找回密码。</p><h2 id="从Github导入仓库时报错：从不允许的主机导入"><a href="#从Github导入仓库时报错：从不允许的主机导入" class="headerlink" title="从Github导入仓库时报错：从不允许的主机导入"></a>从Github导入仓库时报错：从不允许的主机导入</h2><p>打开配置文件<code>gitea/conf/app.ini</code>，修改以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[migrations]ALLOW_LOCALNETWORKS    &#x3D; trueALLOWED_DOMAINS &#x3D; 127.0.0.1,192.168.31.100,github.com,*.github.comIMPORT_LOCAL_PATHS &#x3D; true  ;; 导入本地仓库开关，false：设置为false，防止所有用户（包括admin）导入服务器上的本地路径。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker-compose restart gitea</code>重启容器。</p><blockquote><p>以下修改配置文件后，需要重启容器才能生效，不再赘述。</p></blockquote><h2 id="如何开启软件包"><a href="#如何开启软件包" class="headerlink" title="如何开启软件包"></a>如何开启软件包</h2><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[packages]ENABLED &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="开启action"><a href="#开启action" class="headerlink" title="开启action"></a>开启action</h2><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">[actions]ENABLED&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="error-response-from-daemon-server-gave-http-response-to-https-client"><a href="#error-response-from-daemon-server-gave-http-response-to-https-client" class="headerlink" title="error response from daemon server gave http response to https client"></a>error response from daemon server gave http response to https client</h2><p>docker login 报错</p><p>配置/etc/docker/daemon.json</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">&quot;insecure-registries&quot;: [    &quot;192.168.1.9:2010&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="如何上传docker镜像到gitea制品库"><a href="#如何上传docker镜像到gitea制品库" class="headerlink" title="如何上传docker镜像到gitea制品库"></a>如何上传docker镜像到gitea制品库</h2><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 登录你的镜像仓库，也就是你的 Gitea 服务器地址docker login 192.168.1.9:2010# 从官方仓库拉取一个 nginx:latest 镜像，并改名docker pull nginx:latestdocker tag nginx:latest 192.168.1.9:2010&#x2F;zhangsan&#x2F;nginx:latest# 推送镜像到 Gitea 服务器docker push 192.168.1.9:2010&#x2F;zhangsan&#x2F;nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-部署&quot;&gt;&lt;a href=&quot;#docker-compose-部署&quot; class=&quot;headerlink&quot; title=&quot;docker-compose 部署&quot;&gt;&lt;/a&gt;docker-compose 部署&lt;/h1&gt;&lt;pre class=&quot;l</summary>
      
    
    
    
    <category term="Self-Hosted" scheme="https://lifeislife.cn/categories/Self-Hosted/"/>
    
    
    <category term="Git" scheme="https://lifeislife.cn/tags/Git/"/>
    
    <category term="Docker" scheme="https://lifeislife.cn/tags/Docker/"/>
    
    <category term="DevOps" scheme="https://lifeislife.cn/tags/DevOps/"/>
    
    <category term="Gitea" scheme="https://lifeislife.cn/tags/Gitea/"/>
    
    <category term="Self-Hosted" scheme="https://lifeislife.cn/tags/Self-Hosted/"/>
    
  </entry>
  
</feed>
