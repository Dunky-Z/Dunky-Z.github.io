<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OpenSBI on 夜云泊</title>
    <link>https://lifeislife.cn/tags/opensbi/</link>
    <description>Recent content in OpenSBI on 夜云泊</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 20 Nov 2022 15:11:57 +0000</lastBuildDate>
    <atom:link href="https://lifeislife.cn/tags/opensbi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手把手教你向开源社区提 Patch</title>
      <link>https://lifeislife.cn/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%90%91%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90patch/</link>
      <pubDate>Sun, 20 Nov 2022 15:11:57 +0000</pubDate>
      <guid>https://lifeislife.cn/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%90%91%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90patch/</guid>
      <description>&lt;h1 id=&#34;提交补丁的最佳实践&#34;&gt;提交补丁的最佳实践&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文翻译自官方教程&lt;a href=&#34;https://git-scm.com/docs/MyFirstContribution&#34;&gt;Git - MyFirstContribution&lt;/a&gt;，原文包含开发到提交的整个周期。但是想要提交的人应该都已经开发完代码了，所以本文用自己的实际例子重新写了一遍，省去了开发代码等流程，重点介绍如何使用 git send-email。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="提交补丁的最佳实践">提交补丁的最佳实践</h1>
<blockquote>
<p>本文翻译自官方教程<a href="https://git-scm.com/docs/MyFirstContribution">Git - MyFirstContribution</a>，原文包含开发到提交的整个周期。但是想要提交的人应该都已经开发完代码了，所以本文用自己的实际例子重新写了一遍，省去了开发代码等流程，重点介绍如何使用 git send-email。</p>
</blockquote>
<h2 id="环境准备">环境准备</h2>
<h3 id="下载-opensbi-仓库">下载 OpenSBI 仓库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/riscv-software-src/opensbi.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> opensbi
</span></span></code></pre></div><h3 id="安装依赖">安装依赖</h3>
<p>要从源代码构建 OpenSBI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make
</span></span></code></pre></div><blockquote>
<p>注：OpenSBI 的构建是可并行的。上面的命令可以添加<code>-j#</code>参数，如<code>-j12</code>。</p>
</blockquote>
<h3 id="确认要解决的问题">确认要解决的问题</h3>
<p>在本文档中，我们将模拟提交一个简单的 Patch，<code>.gitignore</code>文件可以过滤不必要的文件，现在使用 VSCode 的用户越来越多，使用 VSCode 开发时常常会生成<code>.vscode</code>目录，但是这些文件不该被推送至远程，原仓库中的<code>.gitignore</code>文件中没有过滤该文件，我们给他加上。</p>
<p>为了能够模拟一次发送多个<code>commit</code>的场景，我们将再添加一个<code>.so</code>用来过滤编译过程中生成的<code>.so</code>文件。</p>
<h3 id="建立工作空间">建立工作空间</h3>
<p>让我们先建立一个开发分支来进行我们的修改。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout -b update_gitignore origin/master
</span></span></code></pre></div><p>我们将在这里做一些提交，以演示如何将一个带有多个补丁的主题同时送审。</p>
<h2 id="实现代码">实现代码</h2>
<h3 id="过滤-vscode">过滤 .vscode</h3>
<p>打开文件<code>.gitignore</code>，为该文件添加<code>/.vscode/</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Object files</span>
</span></span><span class="line"><span class="cl">*.o
</span></span><span class="line"><span class="cl">*.a
</span></span><span class="line"><span class="cl">*.dep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Build &amp; install directories</span>
</span></span><span class="line"><span class="cl">build/
</span></span><span class="line"><span class="cl">install/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Development friendly files</span>
</span></span><span class="line"><span class="cl">tags
</span></span><span class="line"><span class="cl">cscope*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.vscode/
</span></span></code></pre></div><p>为以上修改做一次提交：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch update_gitignore
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        modified:   .gitignore
</span></span><span class="line"><span class="cl">$ git add .gitignore
</span></span><span class="line"><span class="cl">$ git commit -s
</span></span></code></pre></div><p>执行以上命令后将会弹出编辑框用来编写提交信息。主题行要少于 50 个字符，然后是一个空行（必须），然后是您的提交消息的正文。请记住要明确并提供更改的原因（理由），特别是如果无法从您的差异中轻松理解你的提交内容时。编辑提交消息时，不要删除上面 <code>Signed-off-by</code> 添加的 trailer。（由上面命令<code>-s</code>参数生成）。</p>
<p>其他规范请详细查阅目标社区的提交规范，如OpenSBI要求主题行需要以 <code>lib:</code>， <code>platform:</code>, <code>firmware:</code>, <code>docs:</code>, <code>utils:</code> 或者 <code>top:</code>为前缀，修改<code>.gitignore</code>属于<code>top</code>范畴，所以我们需要将其加在主题行上。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">top:</span> <span class="err">filter</span> <span class="err">.vscode</span> <span class="err">folder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">Filter</span> <span class="err">the</span> <span class="err">workspace&#39;s</span> <span class="err">&#39;.vscode&#39;</span> <span class="err">directory</span> <span class="err">by</span> <span class="err">adding</span> <span class="err">&#39;/.vscode/&#39;</span> <span class="err">to</span> <span class="err">the.gitignore</span> <span class="err">file.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">Signed-off-by:</span> <span class="err">Dominic</span> <span class="err">Zhang</span> <span class="err">&lt;Dominic</span> <span class="err">Zhang@gmail.com&gt;</span>
</span></span></code></pre></div><p>继续用 <code>git show</code> 检查您的新提交。尤其不要出现不需要在本次提交的内容。通常使用不同的 IDE 都可能会无意间生成一些配置文件等，请注意将其剔除。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">commit 5dc340c29979d4c5d8c4d5a6e881348239714434 (HEAD -&gt; update_gitignore)
</span></span><span class="line"><span class="cl">Author: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri Nov 18 16:06:21 2022 +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    top: filter .vscode folder
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    Filter the workspace&#39;s &#39;.vscode&#39; directory by adding &#39;/.vscode/&#39; to the.gitignore file.
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    Signed-off-by: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">diff --git a/.gitignore b/.gitignore
</span></span><span class="line"><span class="cl">index 95692bb..90cf552 100644
</span></span><span class="line"><span class="cl">--- a/.gitignore
</span></span><span class="line"><span class="cl">+++ b/.gitignore
</span></span><span class="line"><span class="cl">@@ -10,3 +10,5 @@ install/
</span></span><span class="line"><span class="cl"> # Development friendly files
</span></span><span class="line"><span class="cl"> tags
</span></span><span class="line"><span class="cl"> cscope*
</span></span><span class="line"><span class="cl">+
</span></span><span class="line"><span class="cl">+/.vscode/
</span></span></code></pre></div><h3 id="过滤-cache">过滤 .cache</h3>
<p>与上一节步骤类似，我们在<code>.gitignore</code>文件中再添加一个<code>/.cache/</code>字段用来过滤<code>.cache</code>文件夹。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Object files</span>
</span></span><span class="line"><span class="cl">*.o
</span></span><span class="line"><span class="cl">*.a
</span></span><span class="line"><span class="cl">*.dep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#Build &amp; install directories</span>
</span></span><span class="line"><span class="cl">build/
</span></span><span class="line"><span class="cl">install/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Development friendly files</span>
</span></span><span class="line"><span class="cl">tags
</span></span><span class="line"><span class="cl">cscope*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.vscode/
</span></span><span class="line"><span class="cl">/.cache/
</span></span></code></pre></div><p>添加完我们就即使保存工作进度，新生成一个<code>commit</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add .gitignore
</span></span><span class="line"><span class="cl">git commit -s
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter the workspace&#39;s &#39;.cache&#39; directory by adding &#39;/.cache/&#39; to the.gitignore file.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Signed-off-by: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span></code></pre></div><p>以上我们就已经准备好所有的代码了，在大部分场景下可能修改的是<code>.c</code>或者<code>.h</code>等源文件，这就需要我们能够使代码编译、运行并且测试通过后再提交。</p>
<p>这里为了演示提交流程，就没有涉及这些步骤。接下来我们就要准备提交的补丁文件了。</p>
<h2 id="准备提交补丁">准备提交补丁</h2>
<p>OpenSBI 项目是通过电子邮件发送补丁来进行代码审查的，当补丁准备好并得到社区认可后，维护者就会应用（Apply）这些补丁。OpenSBI 项目不接受来自 Pull Request 的贡献，而且通过电子邮件发送的补丁需要以指定的方式进行审核。</p>
<p>在研究如何将你的提交转化为电子邮件的补丁之前，让我们先分析一下最终的结果，即<strong>补丁系列</strong>（Patch Series）是什么样子。下面是 OpenSBI 邮件列表存档的网页界面上的补丁系列的摘要视图的一个例子。</p>
<p>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Image</title>
    <style>
        .post-img-view {
            text-align: center;
        }
        .responsive-image {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    
    <div class="post-img-view">
        <a data-fancybox="gallery" href="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/16-32-16-e3a06471e8dc4a8dc2d7c7ca641043e2-20221118163214-5afd66.png">
            <img class="responsive-image" src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/16-32-16-e3a06471e8dc4a8dc2d7c7ca641043e2-20221118163214-5afd66.png" alt=""  style="margin: 0 auto;"/>
        </a>
    </div>
    

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var images = document.querySelectorAll(".responsive-image");
            var maxHeight = window.innerHeight / 3;
            images.forEach(function(image) {
                image.style.maxHeight = maxHeight + "px";
            });
        });
    </script>
</body>
</html></p>
<p>我们可以注意几点：</p>
<ul>
<li>每次提交都是以单独的邮件形式发送，提交信息的标题为主题，前缀为<code>[PATCH i/n]</code>，代表<code>n</code>个提交系列中的第 <code>i</code> 个提交。</li>
<li>每个补丁都是作为对<code>cover letter</code>的回复，<code>cover letter</code>的前缀为<code>[PATCH 0/n]</code>，序号为 0 的标题。</li>
<li>补丁系列的后续迭代被标记为 <code>PATCH v2</code>、<code>PATCH v3</code>，等等，以代替 <code>PATCH</code>。例如，<code>[PATCH v2 1/3]</code>将是第二次迭代中三个补丁的第一个补丁。每次迭代都有一个新的<code>cover letter</code>（如上面的<code>[PATCH v2 0/3]</code>），本身就是对前一次迭代的<code>cover letter</code>的回复（下面会有更多介绍）。</li>
</ul>
<blockquote>
<p>注：单一补丁的主题是以<code>[PATCH]</code>、<code>[PATCH v2]</code>等发送的，没有 <code>i/n</code> 编号。如上图中的第四个 Patch，就是一个单一补丁。</p>
</blockquote>
<h3 id="什么是-cover-letter">什么是 cover letter</h3>
<p>除了给每个补丁发一封邮件外，OpenSBI 社区还希望你的补丁能附带一封 cover letter。这是修改提交的一个重要组成部分，因为它概括了你想要做什么，以及为什么要这样做，比仅仅看你的补丁更明显。</p>
<p>你的 cover letter 的标题应该是能简洁地涵盖你整个主题分支的目的。就像我们的提交信息标题一样。下面是我们的系列标题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Update gitignore ---
</span></span></code></pre></div><p>cover letter 的正文是用来给评审员提供额外的背景。一定要解释任何你的补丁自己没有说清楚的东西，但要记住，由于 cover letter 没有记录在提交历史中，任何可能对未来版本库历史的读者有用的东西也应该在你的提交信息中出现。</p>
<p>下文我们将介绍如何生成 cover letter 以及如何填写 cover letter。</p>
<h3 id="用-git-send-email-发送补丁">用 git send-email 发送补丁</h3>
<h4 id="前提条件---设置-git-send-email">前提条件 - 设置 git send-email</h4>
<p>对 <code>send-email</code> 的配置会根据你的操作系统和电子邮件供应商而有所不同，配置可以参考文档<a href="http://lifeislife.cn/2022/09/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git-send-mail%E7%BB%99%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4Patch/">如何使用 git-send-mail 给开源社区提交 Patch - 如云泊</a>。</p>
<h4 id="准备初始补丁集">准备初始补丁集</h4>
<p>在准备邮件本身之前，你需要准备补丁。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git format-patch --cover-letter -o update_gitignore/ --base<span class="o">=</span>auto  update_gitignore@<span class="o">{</span>u<span class="o">}</span>..update_gitignore
</span></span></code></pre></div><ul>
<li><code>--cover-letter</code> 选项告诉 <code>format-patch</code> 为你创建一个 <code>cover letter</code> 模板。在你准备发送之前，你将需要填写该模板。</li>
<li><code>-o update_gitignore/</code> 选项告诉 <code>format-patch</code> 把补丁文件放到目录<code>update_gitignore</code>中。这样发送多个<code>commit</code>时就可以使用命令一次性发送，因为 <code>git send-email</code> 可以接收一个目录并从那里发送所有补丁。</li>
<li><code>--base=auto</code> 选项告诉命令记录”基本提交”，接收者将在此基础上应用补丁系列。自动值将使 <code>format-patch</code> 自动计算基本提交，即远程跟踪分支的最新提交和指定修订范围的合并基数。</li>
<li><code>update_gitignore@{u}..update_gitignore</code> 选项告诉 <code>format-patch</code> 为你在 <code>update_gitignore</code> 分支上创建的提交生成补丁，因为它是从上游分叉出来的。<code>@{u}</code>的意思就是从分叉开始到最新的提交。</li>
</ul>
<p>执行完该命令我们看看生成了哪些内容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch update_gitignore
</span></span><span class="line"><span class="cl">Your branch is ahead of <span class="s1">&#39;origin/master&#39;</span> by <span class="m">2</span> commits.
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git push&#34;</span> to publish your <span class="nb">local</span> commits<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Untracked files:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        update_gitignore/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ls update_gitignore 
</span></span><span class="line"><span class="cl">0000-cover-letter.patch  0001-top-filter-.vscode-folder.patch  0002-top-filter-.cache-folder.patch
</span></span></code></pre></div><p>该命令将为每次提交制作一个补丁文件。运行后，您可以用您喜欢的文本编辑器看一下每个补丁，确保一切正常。可以看到创建了一个<code>-o</code>参数中的<code>update_gitignore</code>文件夹，该文件夹下有三个文件，分别是 cover letter 和上文我们做的两次提交对应的补丁文件。</p>
<p>分别打开他们，结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 30614e5469be4a2f930cca570836627a4e91f1d1 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 16:41:32 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH 0/2] *** SUBJECT HERE ***
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*** BLURB HERE ***
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dominic Zhang (2):
</span></span><span class="line"><span class="cl">  top: filter .vscode folder
</span></span><span class="line"><span class="cl">  top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> .gitignore | 3 +++
</span></span><span class="line"><span class="cl"> 1 file changed, 3 insertions(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">base-commit: 880685586dcee950d209088a461443449a1693ce
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 5dc340c29979d4c5d8c4d5a6e881348239714434 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 16:06:21 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH 1/2] top: filter .vscode folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter the workspace&#39;s &#39;.vscode&#39; directory by adding &#39;/.vscode/&#39; to the.gitignore file.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Signed-off-by: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl"> .gitignore | 2 ++
</span></span><span class="line"><span class="cl"> 1 file changed, 2 insertions(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">diff --git a/.gitignore b/.gitignore
</span></span><span class="line"><span class="cl">index 95692bb..90cf552 100644
</span></span><span class="line"><span class="cl">--- a/.gitignore
</span></span><span class="line"><span class="cl">+++ b/.gitignore
</span></span><span class="line"><span class="cl">@@ -10,3 +10,5 @@ install/
</span></span><span class="line"><span class="cl"> # Development friendly files
</span></span><span class="line"><span class="cl"> tags
</span></span><span class="line"><span class="cl"> cscope*
</span></span><span class="line"><span class="cl">+
</span></span><span class="line"><span class="cl">+/.vscode/
</span></span><span class="line"><span class="cl">\ No newline at end of file
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 30614e5469be4a2f930cca570836627a4e91f1d1 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 16:20:37 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH 2/2] top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter the workspace&#39;s &#39;.cache&#39; directory by adding &#39;/.cache/&#39; to the.gitignore file.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Signed-off-by: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl"> .gitignore | 3 ++-
</span></span><span class="line"><span class="cl"> 1 file changed, 2 insertions(+), 1 deletion(-)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">diff --git a/.gitignore b/.gitignore
</span></span><span class="line"><span class="cl">index 90cf552..bf9d716 100644
</span></span><span class="line"><span class="cl">--- a/.gitignore
</span></span><span class="line"><span class="cl">+++ b/.gitignore
</span></span><span class="line"><span class="cl">@@ -11,4 +11,5 @@ install/
</span></span><span class="line"><span class="cl"> tags
</span></span><span class="line"><span class="cl"> cscope*
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">-/.vscode/
</span></span><span class="line"><span class="cl">\ No newline at end of file
</span></span><span class="line"><span class="cl">+/.vscode/
</span></span><span class="line"><span class="cl">+/.cache/
</span></span><span class="line"><span class="cl">\ No newline at end of file
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><blockquote>
<p>注：另外，你也可以使用 <code>--rfc</code> 参数，在你的补丁主题前加上<code>[RFC PATCH]</code>，而不是<code>[PATCH]</code>。RFC 是”请求评论”的意思，表示虽然你的代码还没有准备好提交，但你想开始代码审查过程。你也可能在列表中看到标有”WIP”的补丁，这意味着他们还没有完成，但希望审查者能看看他们目前的成果。你可以用<code>--subject-prefix=WIP</code>来添加这个标志。</p>
</blockquote>
<p>检查并确保你的补丁和 cover letter 模板存在于你指定的目录中，这就完成所有准备了。</p>
<h4 id="准备邮件">准备邮件</h4>
<p>由于你在调用 <code>format-patch</code> 时使用了<code>--cover-letter</code>，你已经准备好了一个 cover letter 模板。在你喜欢的编辑器中打开它。</p>
<p>你应该看到已经有一些标题存在。检查你的<code>From:</code>标题是否正确。然后修改你的<code>Subject:</code>。</p>
<p>确保保留<code>[PATCH 0/X]</code>的部分；这是向 Git 社区表明这封邮件是一个补丁系列的开始，许多审查者会根据这种类型的标记过滤他们的邮件。</p>
<p>接下来，你必须填写你的 cover letter 的正文。同样，关于应包括哪些内容，见上文。</p>
<p>最后，信中会包括用于生成补丁的 Git 的版本。你可以不用管这个字符串。</p>
<p>完善后的 cover letter 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 30614e5469be4a2f930cca570836627a4e91f1d1 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 16:41:32 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH 0/2] Update gitignore
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vscode is a very popular IDE, and it often needs to generate a.vscode. cache directory to hold workspace configuration files that should not be committed to a remote repository, so we made some modifications to the gitignore file to filter such directories.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dominic Zhang (2):
</span></span><span class="line"><span class="cl">  top: filter .vscode folder
</span></span><span class="line"><span class="cl">  top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> .gitignore | 3 +++
</span></span><span class="line"><span class="cl"> 1 file changed, 3 insertions(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">base-commit: 880685586dcee950d209088a461443449a1693ce
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><h4 id="发送邮件">发送邮件</h4>
<p>到这里，你应该有一个目录 <code>update_gitignore/</code>，里面包含你的补丁和一封 cover letter。是时候把它发出去了！你可以像这样发送。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git send-email --to<span class="o">=</span>target@example.com update_gitignore/*.patch
</span></span></code></pre></div><blockquote>
<p>注：请查看 <code>git help send-email</code> 中的一些其他选项，你可能会发现这些选项很有价值，比如改变回复地址或添加更多的抄送地址或密送地址。</p>
</blockquote>
<blockquote>
<p>注：当你发送一个真正的补丁时，它将被发送到 <code>opensbi@lists.infradead.org</code> - 但请不要把你的补丁集从教程中发送到真正的邮件列表中！现在你可以把它发送给你自己，以确保你了解它的形式。</p>
</blockquote>
<p>在你运行上面的命令后，你会为每个即将发出的补丁看到一个交互提示。这给了你最后一次机会来编辑或放弃发送一些东西（但还是那句话，不要用这种方式编辑代码）。一旦你在这些提示下按下 <code>y</code> 或 <code>a</code>，你的邮件就会被发送出去！Congratulation!</p>
<h4 id="发送补丁的更新版本">发送补丁的更新版本</h4>
<p>本节将重点介绍如何发送你的补丁集的 v2 版。我们将在 v2 版中重新使用我们的 <code>update_gitignore</code> 分支。在我们做任何改动之前，我们先新建一个名为<code>update_gitignore-v1</code>的分支，这个分支是我们没有做新的改动的分支。这样在后面我们就可以方便的进行对比差异。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout update_gitignore
</span></span><span class="line"><span class="cl">git branch update_gitignore-v1
</span></span></code></pre></div><p>在更新补丁时，我们可能会遇到两种情况，一种是社区的意见只让修改最新的一个提交，一种是修改历史记录中的 commit。我们分别来处理这两种情况。</p>
<h5 id="如何修改最新的提交">如何修改最新的提交</h5>
<p>比如只需要修改<code>top: filter .cache folder</code>这个 commit。因为它在我们的修改中是最新的 commit，所以我们可以直接对代码修改。比如我们做一个简单的修改，给修改的内容<code>/.cache</code>加个注释。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Object files
</span></span><span class="line"><span class="cl">*.o
</span></span><span class="line"><span class="cl">*.a
</span></span><span class="line"><span class="cl">*.dep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#Build &amp; install directories
</span></span><span class="line"><span class="cl">build/
</span></span><span class="line"><span class="cl">install/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Development friendly files
</span></span><span class="line"><span class="cl">tags
</span></span><span class="line"><span class="cl">cscope*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/.vscode/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Cache file
</span></span><span class="line"><span class="cl">/.cache/
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add .gitignore
</span></span><span class="line"><span class="cl">git commit --amend
</span></span></code></pre></div><p><strong>注意</strong>！我们不需要生成新的<code>commit</code>，所以使用 <code>--amend</code>参数修改最新的<code>commit message</code>即可。执行这条命令会弹出编辑窗口，因为修改内容已经很明确，我们不需要在<code>commit message</code>里再做额外说明，直接保存退出即可。如果修改内容比较大，需要重新编写<code>commit message</code>。</p>
<p>以上我们就完成了一次更新。</p>
<h5 id="如何修改历史记录中的提交">如何修改历史记录中的提交</h5>
<p>如果很不巧，社区要求修改的是<code>top: filter .vscode folder</code>这个提交的内容，那怎么办，因为它不是最新的提交，而是上一个提交，我们无法使用<code>git commit --amend</code>来直接对他修改，好在 Git 十分强大，不需要我们<code>reset</code>就可以完成这样的工作。</p>
<p>同样我们也做一个简单的修改，为<code>/.vscode/</code>也添加一个注释。首先我们需要使用到<code>git rebase</code>这个强大的命令。本文只介绍使用到的功能，其他功能需要大家自行摸索。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rebase -i
</span></span></code></pre></div><p>这条命令会弹出编辑窗口，<code>-i</code>参数表示以交互式方式进行变基（rebase）操作。弹出窗口内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pick <span class="m">7175772</span> top: filter .vscode folder
</span></span><span class="line"><span class="cl">pick 52b63f3 top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Rebase 8806855..52b63f3 onto 8806855 (2 commands)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Commands:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># p, pick = use commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># r, reword = use commit, but edit the commit message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># e, edit = use commit, but stop for amending</span>
</span></span><span class="line"><span class="cl"><span class="c1"># s, squash = use commit, but meld into previous commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f, fixup = like &#34;squash&#34;, but discard this commit&#39;s log message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># x, exec = run command (the rest of the line) using shell</span>
</span></span><span class="line"><span class="cl"><span class="c1"># d, drop = remove commit</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># These lines can be re-ordered; they are executed from top to bottom.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># However, if you remove everything, the rebase will be aborted.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Note that empty commits are commented out</span>
</span></span></code></pre></div><p>窗口会显示所有未提交到远程的 commit，下面的注释也告诉了我们该如何使用。我们找到<code>edit</code>的行，可以看到解释为使用当前的 commit，但是在变基过程中会停下来让我们修改。这正是我们想要的。我们编辑当前的内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">edit <span class="m">7175772</span> top: filter .vscode folder
</span></span><span class="line"><span class="cl">pick 52b63f3 top: filter .cache folder
</span></span></code></pre></div><p>表示我们需要编辑历史记录中的<code>top: filter .vscode folder</code>提交，但是另一个 commit 我们不做改变。保存并退出当前窗口后，会有如下提示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Stopped at 7175772...  top: filter .vscode folder
</span></span><span class="line"><span class="cl">You can amend the commit now, with
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  git commit --amend 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Once you are satisfied with your changes, run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  git rebase --continue
</span></span></code></pre></div><p>根据提示，我们可以进行一系列修改了，修改完使用<code>git commit --amend</code>保存，如果一切符合自己要求了，再使用<code>git rebase --continue</code>完成变基操作。</p>
<p>我们先修改代码，可以看到代码已经回到了没有<code>/.cache/</code>的状态，我们添加一行注释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># Object files
</span></span><span class="line"><span class="cl">*.o
</span></span><span class="line"><span class="cl">*.a
</span></span><span class="line"><span class="cl">*.dep
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#Build &amp; install directories
</span></span><span class="line"><span class="cl">build/
</span></span><span class="line"><span class="cl">install/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Development friendly files
</span></span><span class="line"><span class="cl">tags
</span></span><span class="line"><span class="cl">cscope*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># VSCode config file
</span></span><span class="line"><span class="cl">/.vscode/
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add .gitignore
</span></span><span class="line"><span class="cl">git commit --amend
</span></span></code></pre></div><p>同样弹出窗口后我们直接保存退出，如果修改幅度较大，可以进一步补充说明。然后使用以下命令继续完成变基。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rebase --continue
</span></span></code></pre></div><p>此时我们可以看到我们不仅修改了历史记录中的 commit，还保证了最新的 commit 没有丢失或者更改。</p>
<h5 id="准备更新版本的补丁集">准备更新版本的补丁集</h5>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> $ git format-patch -v2 --cover-letter -o update_gitignore/   master..update_gitignore-v1
</span></span><span class="line"><span class="cl">update_gitignore/v2-0000-cover-letter.patch
</span></span><span class="line"><span class="cl">update_gitignore/v2-0001-top-filter-.vscode-folder.patch
</span></span><span class="line"><span class="cl">update_gitignore/v2-0002-top-filter-.cache-folder.patch
</span></span></code></pre></div><p><code>--range-diff  master..update_gitignore-v1</code> 参数告诉 <code>format-patch</code> 在 cover letter 中包括 <code>update_gitignore-v1</code> 和 <code>update_gitignore</code> 两个分支之间的差异。这有助于告诉评审人你的 v1 和 v2 补丁之间的差异。</p>
<p><code>-v2</code> 参数告诉 <code>format-patch</code> 将你的补丁输出为 <code>v2</code> 版本。例如，你可能注意到你的 v2 版补丁都被命名为 <code>v2-000n-my-commit-subject.patch</code>。<code>-v2</code> 也会将你的补丁格式化，在前面加上<code>[PATCH v2]</code>，而不是<code>[PATCH]</code>。</p>
<p>运行此命令后，<code>format-patch</code> 会将补丁输出到 <code>update_gitignore/</code> 目录，与 v1 版的补丁一起。使用一个目录可以方便在校对 v2 补丁时参考旧的 v1 补丁，但你需要注意只发送 v2 补丁。我们将使用 <code>update_gitignore/v2-.patch</code>这样的模式（而不是 <code>update_gitignore/.patch</code>，这将匹配 v1 和 v2 补丁）。</p>
<p>再次编辑你的 cover letter。现在是一个很好的时间来提及你的上一个版本和现在有什么不同，如果它是重要的东西。你不需要在你的第二封 cover letter 中使用完全相同的内容；重点是向审查人员解释你所做的可能不那么明显的变化。</p>
<p>我们就简单的写一下添加了注释。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 30614e5469be4a2f930cca570836627a4e91f1d1 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 19:35:06 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH v2 0/2] Update gitignore
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Add a comment for the folder name.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dominic Zhang (2):
</span></span><span class="line"><span class="cl">  top: filter .vscode folder
</span></span><span class="line"><span class="cl">  top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> .gitignore | 3 +++
</span></span><span class="line"><span class="cl"> 1 file changed, 3 insertions(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><p>发送更新版本时你需要将新版本抄送给提出建议的人，你可以在你的 cover letter 中直接添加这些抄送行，在 Subject 行上面写上这样一行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">CC: Name &lt;name@example.com&gt;
</span></span></code></pre></div><p>例如，把更新的邮件抄送给我自己：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">From 30614e5469be4a2f930cca570836627a4e91f1d1 Mon Sep 17 00:00:00 2001
</span></span><span class="line"><span class="cl">From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">CC: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date: Fri, 18 Nov 2022 19:35:06 +0800
</span></span><span class="line"><span class="cl">Subject: [PATCH v2 0/2] Update gitignore
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Add a comment for the folder name.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dominic Zhang (2):
</span></span><span class="line"><span class="cl">  top: filter .vscode folder
</span></span><span class="line"><span class="cl">  top: filter .cache folder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> .gitignore | 3 +++
</span></span><span class="line"><span class="cl"> 1 file changed, 3 insertions(+)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- 
</span></span><span class="line"><span class="cl">2.17.1
</span></span></code></pre></div><p>现在再次发送电子邮件，注意你传入的参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">git send-email --to target@example.com update_gitignore/v2-*.patch
</span></span></code></pre></div><p>恭喜你完成了一次补丁版本更新。</p>
<hr>
<p>对于一些社区，要求更新的版本需要在同一个 thread 上进行。如下示例这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[PATCH 0/2] Here is what I did...
</span></span><span class="line"><span class="cl">  [PATCH 1/2] Clean up and tests
</span></span><span class="line"><span class="cl">  [PATCH 2/2] Implementation
</span></span><span class="line"><span class="cl">  [PATCH v2 0/3] Here is a reroll
</span></span><span class="line"><span class="cl">    [PATCH v2 1/3] Clean up
</span></span><span class="line"><span class="cl">    [PATCH v2 2/3] New tests
</span></span><span class="line"><span class="cl">    [PATCH v2 3/3] Implementation
</span></span></code></pre></div><p>就是更新的版本需要关联到之前的版本，而不能作为单独的一个列表。</p>
<p>你还需要去找到你之前的 cover letter 的 Message-Id。你可以在发送第一个补丁系列时，从 <code>git send-email</code> 的输出中记下它。
例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git send-email --to Dominic Zhang@gmail.com update_gitignore/v2-*.patch 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">update_gitignore/v2-0000-cover-letter.patch
</span></span><span class="line"><span class="cl">update_gitignore/v2-0001-top-filter-.vscode-folder.patch
</span></span><span class="line"><span class="cl">update_gitignore/v2-0002-top-filter-.cache-folder.patch
</span></span><span class="line"><span class="cl"><span class="o">(</span>mbox<span class="o">)</span> Adding cc: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt; from line <span class="s1">&#39;From: Dominic Zhang &lt;Dominic Zhang@gmail.com&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>mbox<span class="o">)</span> Adding cc: Dominic Zhang &lt;254758318@qq.com&gt; from line <span class="s1">&#39;CC: Dominic Zhang &lt;254758318@qq.com&gt;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">From: Dominic Zhang@gmail.com
</span></span><span class="line"><span class="cl">To: Dominic Zhang@gmail.com
</span></span><span class="line"><span class="cl">Cc: Dominic Zhang &lt;254758318@qq.com&gt;
</span></span><span class="line"><span class="cl">Subject: <span class="o">[</span>PATCH v2 0/2<span class="o">]</span> Update gitignore
</span></span><span class="line"><span class="cl">Date: Fri, <span class="m">18</span> Nov <span class="m">2022</span> 19:54:54 +0800
</span></span><span class="line"><span class="cl">Message-Id: &lt;20221118115456.2242-1-Dominic Zhang@gmail.com&gt;
</span></span><span class="line"><span class="cl">X-Mailer: git-send-email 2.17.1
</span></span></code></pre></div><p>你也可以从社区的邮箱列表中找到 Message ID，因为 OpenSBI 不要求在同一个 thread 回复，所以没有相关信息，这里以<a href="https://lore.kernel.org/git/cover-00.12-00000000000-20221118T112205Z-avarab@gmail.com/T/#t">Git 社区</a>的邮箱列表为例。随便点击一个补丁主题，在页面中找到<code>permalink</code>或者<code>raw</code>，点击打开即可找到 Message ID 信息。</p>
<p>它的格式一般如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Message-Id: &lt;foo.12345.author@example.com&gt;
</span></span></code></pre></div><p>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Image</title>
    <style>
        .post-img-view {
            text-align: center;
        }
        .responsive-image {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    
    <div class="post-img-view">
        <a data-fancybox="gallery" href="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/20-11-53-e32c2da586e2b273cd1647e391c5c814-20221118201152-50efbe.png">
            <img class="responsive-image" src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/20-11-53-e32c2da586e2b273cd1647e391c5c814-20221118201152-50efbe.png" alt=""  style="margin: 0 auto;"/>
        </a>
    </div>
    

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var images = document.querySelectorAll(".responsive-image");
            var maxHeight = window.innerHeight / 3;
            images.forEach(function(image) {
                image.style.maxHeight = maxHeight + "px";
            });
        });
    </script>
</body>
</html></p>
<p>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Image</title>
    <style>
        .post-img-view {
            text-align: center;
        }
        .responsive-image {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    
    <div class="post-img-view">
        <a data-fancybox="gallery" href="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/20-12-36-60538da64fc2af130b05eceb7c38cc52-20221118201235-5e5ace.png">
            <img class="responsive-image" src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/20-12-36-60538da64fc2af130b05eceb7c38cc52-20221118201235-5e5ace.png" alt=""  style="margin: 0 auto;"/>
        </a>
    </div>
    

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var images = document.querySelectorAll(".responsive-image");
            var maxHeight = window.innerHeight / 3;
            images.forEach(function(image) {
                image.style.maxHeight = maxHeight + "px";
            });
        });
    </script>
</body>
</html></p>
<p>如果要发送更新版本，那么我们就需要找到上一版本的 Message ID。如发送的是 V3 版本，那么我们需要找到 V2 版本的 Message ID。并且在发送邮件时添加如下参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git send-email --to Dominic Zhang@gmail.com 
</span></span><span class="line"><span class="cl">                 --in-reply-to<span class="o">=</span><span class="s2">&#34;&lt;foo.12345.author@example.com&gt;&#34;</span> 
</span></span><span class="line"><span class="cl">                 update_gitignore/v2-*.patch 
</span></span></code></pre></div><h4 id="只有一个-patch-的更改">只有一个 Patch 的更改</h4>
<p>在某些情况下，你的非常小的变化可能只包括一个补丁。这时，你只需要发送一封邮件。你的提交信息应该已经很有意义了，你只需要生成补丁文件就可以发送了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git format-patch -o update_gitignore/  HEAD^
</span></span></code></pre></div><ul>
<li><code>HEAD^</code>参数表示生成与上一个提交之间的差异。</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
