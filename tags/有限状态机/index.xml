<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>有限状态机 on PaperMod</title>
    <link>http://localhost:8888/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</link>
    <description>Recent content in 有限状态机 on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 15 May 2022 12:41:30 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C 语言实现简单有限状态机</title>
      <link>http://localhost:8888/posts/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</link>
      <pubDate>Sun, 15 May 2022 12:41:30 +0000</pubDate>
      <guid>http://localhost:8888/posts/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</guid>
      <description>简介 常说的状态机是有限状态机 FSM，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。 三个特征：
状态总数（state）是有限的。 任一时刻，只处在一种状态之中。 某种条件下，会从一种状态转变（transition）到另一种状态。 设计状态机的关键点：当前状态、外部输入、下一个状态。
状态机分类 Moore 型状态机 Moore 型状态机特点是：输出只与当前状态有关（与输入信号无关）。相对简单，考虑状态机的下一个状态时只需要考虑它的当前状态就行了。
Mealy 型状态机 Mealy 型状态机的特点是：输出不只和当前状态有关，还与输入信号有关。状态机接收到一个输入信号需要跳转到下一个状态时，状态机综合考虑 2 个条件（当前状态、输入值）后才决定跳转到哪个状态。
实现一个简单的状态机 代码参考AstarLight/FSM-framework。
以小明的一天设计出一个状态机，下图为状态转移图：
首先，有限状态机的状态是有限的，我们可以定义一天中的状态：
enum { GET_UP, GO_TO_SCHOOL, HAVE_LUNCH, DO_HOMEWORK, SLEEP, }; 状态机在没有事件的驱动下就是一潭死水，所以我们还需要定义出一些会发生的事件，去驱动状态机的运转：
enum { EVENT1 = 1, EVENT2, EVENT3, }; 再定义一些在某个状态下需要处理的动作，也就是函数：
void GetUp() { // do something printf(&amp;#34;xiao ming gets up!\n&amp;#34;); } void Go2School() { // do something printf(&amp;#34;xiao ming goes to school!\n&amp;#34;); } void HaveLunch() { // do something printf(&amp;#34;xiao ming has lunch!</description>
    </item>
  </channel>
</rss>
