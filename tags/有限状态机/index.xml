<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>有限状态机 on 夜云泊</title>
    <link>https://lifeislife.cn/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</link>
    <description>Recent content in 有限状态机 on 夜云泊</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 15 May 2022 12:41:30 +0000</lastBuildDate>
    <atom:link href="https://lifeislife.cn/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C 语言实现简单有限状态机</title>
      <link>https://lifeislife.cn/posts/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</link>
      <pubDate>Sun, 15 May 2022 12:41:30 +0000</pubDate>
      <guid>https://lifeislife.cn/posts/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;常说的状态机是有限状态机 FSM，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。
三个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态总数（state）是有限的。&lt;/li&gt;
&lt;li&gt;任一时刻，只处在一种状态之中。&lt;/li&gt;
&lt;li&gt;某种条件下，会从一种状态转变（transition）到另一种状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设计状态机的关键点：当前状态、外部输入、下一个状态。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="简介">简介</h2>
<p>常说的状态机是有限状态机 FSM，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学计算模型。
三个特征：</p>
<ul>
<li>状态总数（state）是有限的。</li>
<li>任一时刻，只处在一种状态之中。</li>
<li>某种条件下，会从一种状态转变（transition）到另一种状态。</li>
</ul>
<p>设计状态机的关键点：当前状态、外部输入、下一个状态。</p>
<h2 id="状态机分类">状态机分类</h2>
<h3 id="moore-型状态机">Moore 型状态机</h3>
<p>Moore 型状态机特点是：输出只与当前状态有关（与输入信号无关）。相对简单，考虑状态机的下一个状态时只需要考虑它的当前状态就行了。</p>
<h3 id="mealy-型状态机">Mealy 型状态机</h3>
<p>Mealy 型状态机的特点是：输出不只和当前状态有关，还与输入信号有关。状态机接收到一个输入信号需要跳转到下一个状态时，状态机综合考虑 2 个条件（当前状态、输入值）后才决定跳转到哪个状态。</p>
<h2 id="实现一个简单的状态机">实现一个简单的状态机</h2>
<p>代码参考<a href="https://github.com/AstarLight/FSM-framework">AstarLight/FSM-framework</a>。</p>
<p>以小明的一天设计出一个状态机，下图为状态转移图：</p>
<p>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Image</title>
    <style>
        .post-img-view {
            text-align: center;
        }
        .responsive-image {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    
    <div class="post-img-view">
        <a data-fancybox="gallery" href="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/202205151353618.png">
            <img class="responsive-image" src="https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img/202205151353618.png" alt=""  style="margin: 0 auto;"/>
        </a>
    </div>
    

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var images = document.querySelectorAll(".responsive-image");
            var maxHeight = window.innerHeight / 3;
            images.forEach(function(image) {
                image.style.maxHeight = maxHeight + "px";
            });
        });
    </script>
</body>
</html></p>
<p>首先，有限状态机的状态是有限的，我们可以定义一天中的状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">GET_UP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">GO_TO_SCHOOL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">HAVE_LUNCH</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">DO_HOMEWORK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">SLEEP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>状态机在没有事件的驱动下就是一潭死水，所以我们还需要定义出一些会发生的事件，去驱动状态机的运转：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">enum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">EVENT1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">EVENT2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="n">EVENT3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>再定义一些在某个状态下需要处理的动作，也就是函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">GetUp</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xiao ming gets up!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Go2School</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xiao ming goes to school!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">HaveLunch</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xiao ming has lunch!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DoHomework</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xiao ming does homework!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Go2Bed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;xiao ming goes to bed!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>定义一个状态表结构，用来表示一个状态机的状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">FsmTable_s</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="kt">int</span> <span class="n">event</span><span class="p">;</span>              <span class="c1">//事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">int</span> <span class="n">CurState</span><span class="p">;</span>           <span class="c1">//当前状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">eventActFun</span><span class="p">)();</span>  <span class="c1">//函数指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">int</span> <span class="n">NextState</span><span class="p">;</span>          <span class="c1">//下一个状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="n">FsmTable_t</span><span class="p">;</span>
</span></span></code></pre></div><p>接下来，我们就可以这个结构定义一个状态表，状态机根据这个表进行状态的流转：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">FsmTable_t</span> <span class="n">XiaoMingTable</span><span class="p">[]</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">//{到来的事件，当前的状态，将要要执行的函数，下一个状态}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">{</span> <span class="n">EVENT1</span><span class="p">,</span>  <span class="n">SLEEP</span><span class="p">,</span>           <span class="n">GetUp</span><span class="p">,</span>        <span class="n">GET_UP</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span> <span class="n">EVENT2</span><span class="p">,</span>  <span class="n">GET_UP</span><span class="p">,</span>          <span class="n">Go2School</span><span class="p">,</span>    <span class="n">GO_TO_SCHOOL</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span> <span class="n">EVENT3</span><span class="p">,</span>  <span class="n">GO_TO_SCHOOL</span><span class="p">,</span>    <span class="n">HaveLunch</span><span class="p">,</span>    <span class="n">HAVE_LUNCH</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span> <span class="n">EVENT1</span><span class="p">,</span>  <span class="n">HAVE_LUNCH</span><span class="p">,</span>      <span class="n">DoHomework</span><span class="p">,</span>   <span class="n">DO_HOMEWORK</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span> <span class="n">EVENT2</span><span class="p">,</span>  <span class="n">DO_HOMEWORK</span><span class="p">,</span>     <span class="n">Go2Bed</span><span class="p">,</span>       <span class="n">SLEEP</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>定义一个状态机结构，表示一个状态机：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">FSM_s</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">FsmTable_t</span><span class="o">*</span> <span class="n">FsmTable</span><span class="p">;</span>   <span class="c1">//指向的状态表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">int</span> <span class="n">curState</span><span class="p">;</span>           <span class="c1">//FSM当前所处的状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">FSM_t</span><span class="p">;</span>
</span></span></code></pre></div><p>有了这些基本的结构，就可以写主函数了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">FSM_t</span> <span class="n">fsm</span><span class="p">;</span>                        <span class="c1">// 实例化一个状态机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="nf">InitFsm</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fsm</span><span class="p">);</span>                    <span class="c1">// 初始化状态机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">int</span> <span class="n">event</span> <span class="o">=</span> <span class="n">EVENT1</span><span class="p">;</span>               <span class="c1">// 初始化事件，为了启动状态机流转，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                      <span class="c1">// 因为状态机只有在有时间发生时才会改变状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"> <span class="c1">//小明的一天,周而复始的一天又一天，进行着相同的活动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;event %d is coming...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">FSM_EventHandle</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fsm</span><span class="p">,</span> <span class="n">event</span><span class="p">);</span> <span class="c1">// 有了初始事件，我们就需要处理这个事件，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                      <span class="c1">// 再写一个处理事件的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;fsm current state %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fsm</span><span class="p">.</span><span class="n">curState</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">test</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">  <span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>                     <span class="c1">//休眠1秒，方便观察
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 测试用的，模拟事件的发生
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">test</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">event</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">event</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="k">else</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="o">*</span><span class="n">event</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>编写初始化状态机的函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">g_state_max_num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 状态机的状态最大数量，根据状态表的大小来计算
</span></span></span><span class="line"><span class="cl"><span class="c1">// 初始化FSM
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">InitFsm</span><span class="p">(</span><span class="n">FSM_t</span><span class="o">*</span> <span class="n">pFsm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">g_state_max_num</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">XiaoMingTable</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">FsmTable_t</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">pFsm</span><span class="o">-&gt;</span><span class="n">curState</span> <span class="o">=</span> <span class="n">SLEEP</span><span class="p">;</span> <span class="c1">// 初始状态为睡觉
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pFsm</span><span class="o">-&gt;</span><span class="n">FsmTable</span> <span class="o">=</span> <span class="n">XiaoMingTable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>编写事件处理函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* 事件处理 */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">FSM_EventHandle</span><span class="p">(</span><span class="n">FSM_t</span><span class="o">*</span> <span class="n">pFsm</span><span class="p">,</span> <span class="kt">int</span> <span class="n">event</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">FsmTable_t</span><span class="o">*</span> <span class="n">pActTable</span> <span class="o">=</span> <span class="n">pFsm</span><span class="o">-&gt;</span><span class="n">FsmTable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">eventActFun</span><span class="p">)()</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>  <span class="c1">//函数指针初始化为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="kt">int</span> <span class="n">NextState</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="kt">int</span> <span class="n">CurState</span> <span class="o">=</span> <span class="n">pFsm</span><span class="o">-&gt;</span><span class="n">curState</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="cm">/* 获取当前动作函数 */</span>
</span></span><span class="line"><span class="cl"> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">g_max_num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//当且仅当当前状态下来个指定的事件，我才执行它
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">==</span> <span class="n">pActTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">event</span> <span class="o">&amp;&amp;</span> <span class="n">CurState</span> <span class="o">==</span> <span class="n">pActTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">CurState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">pActTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">eventActFun</span><span class="p">();</span>                      <span class="c1">// 执行动作函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">FSM_StateTransfer</span><span class="p">(</span><span class="n">pFsm</span><span class="p">,</span> <span class="n">pActTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">NextState</span><span class="p">);</span> <span class="c1">// 执行状态转移
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cm">/* 状态迁移 */</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">FSM_StateTransfer</span><span class="p">(</span><span class="n">FSM_t</span><span class="o">*</span> <span class="n">pFsm</span><span class="p">,</span> <span class="kt">int</span> <span class="n">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">pFsm</span><span class="o">-&gt;</span><span class="n">curState</span> <span class="o">=</span> <span class="n">state</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="参考资料">参考资料</h2>
<p><a href="https://www.cnblogs.com/skyfsm/p/7071386.html">Linux 编程之有限状态机 FSM 的理解与实现 - Madcola - 博客园</a>
<a href="http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html">JavaScript 与有限状态机 - 阮一峰的网络日志</a>
<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA">有限状态机 - 维基百科，自由的百科全书</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
