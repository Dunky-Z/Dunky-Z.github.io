<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on PaperMod</title>
    <link>http://localhost:8888/tags/python/</link>
    <description>Recent content in Python on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 Sep 2022 14:05:17 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 下切换 Python 版本</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3linux%E4%B8%8B%E5%88%87%E6%8D%A2python%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 12 Sep 2022 14:05:17 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3linux%E4%B8%8B%E5%88%87%E6%8D%A2python%E7%89%88%E6%9C%AC/</guid>
      <description>需求背景 用过 Python 的都知道，Python 是不向后兼容的，也就是 Python3.X 开发的程序，使用 Python2.X 环境就无法正常运行。因为很多语法都改变了。现在接触到的大部分 Python 程序都是 Python3.X 开发的，但是偶尔也会遇到使用 Python2.X 的时候。这就需要灵活切换版本。
一般 Linux 的各个发行版都预装了 Python2.X。我使用的 Debian 就预装了 Python2.7。
$ python -V Python 2.7.16 但是我同时也安装了 Python3.7
$ ls /usr/bin | grep &amp;#34;python*&amp;#34; dh_python2 python python2 python2.7 python3 python3.7 python3.7m python3m alias 修改别名 $ alias python=/usr/bin/python3 $ python -V Python 3.7.3 上面的别名修改只对当前终端有效。如果要使每个窗口都使用这个别名，将别名加入~/.bashrc，如 zsh 是则是~/.zshrc。
软链接 和修改别名类似
ln -s python /usr/bin/python3 update-alternatives update-alternatives是 Debian 系统提供的一个工具，Ubuntu 是基于 Debian 的，所以 Ubuntu 也可以使用，其他发行版没有该工具。它可以用来方便快捷地切换应用版本，不仅仅用来切换 Python，其他应用程序有多个版本的也可以使用该工具。</description>
    </item>
    <item>
      <title>解决 Python No module named &#39;ConfigParser&#39;</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3python-no-module-named-configparser/</link>
      <pubDate>Sun, 11 Sep 2022 23:20:05 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3python-no-module-named-configparser/</guid>
      <description>保留现场 ImportError: No module named &amp;#39;ConfigParser&amp;#39; Command &amp;#34;python setup.py egg_info&amp;#34; failed with error code 1 in 解决方法 在 Python 3.x 版本后，ConfigParser.py 已经更名为 configparser.py 所以出错！
可以切换 Python2 执行。
也可以尝试将文件重命名为ConfigParser.py。
以下为参考，每个人安装路径可能不一样，可以全局搜索configparser.py。
cp /usr/lib/python3.7/configparser.py /usr/lib/python3.7/ConfigParser.py </description>
    </item>
    <item>
      <title>解决 No module named &#39;ConfigParser&#39;</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3no-module-named-configparser/</link>
      <pubDate>Mon, 05 Sep 2022 15:43:20 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3no-module-named-configparser/</guid>
      <description></description>
    </item>
    <item>
      <title>Linux 切换不同 Python 版本</title>
      <link>http://localhost:8888/posts/linux%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8Cpython%E7%89%88%E6%9C%AC/</link>
      <pubDate>Mon, 05 Sep 2022 15:31:27 +0000</pubDate>
      <guid>http://localhost:8888/posts/linux%E5%88%87%E6%8D%A2%E4%B8%8D%E5%90%8Cpython%E7%89%88%E6%9C%AC/</guid>
      <description></description>
    </item>
    <item>
      <title>多版本 Python 使用 pip 安装 package 问题</title>
      <link>http://localhost:8888/posts/%E5%A4%9A%E7%89%88%E6%9C%ACpython%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85package%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 27 Aug 2022 15:30:58 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%A4%9A%E7%89%88%E6%9C%ACpython%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85package%E9%97%AE%E9%A2%98/</guid>
      <description>最简单的方式 使用参数指定安装路径：
pip install -t D:\python3.5(32bit)\Lib\site-packages numpy 叨叨叨 如果电脑上安装了多个版本的Python的话，在需要使用pip安装新package时，就会遇到这个问题：我把package安装到哪了？
因为每个版本的 Python 是有自己独立的pip，也有独立的lib目录的，管理的包也各不同。一般来说，使用默认的pip命令安装的位置，就是默认的python位置。
比如我在终端敲下python，使用的是python3.6那么安装的package就会在C:\Python36\Lib\site-packages（根据自己安装 Python 的路径稍有区别）。
情景一：安装的都是 Python3.x 版本 有时候会遇到这样的需求，我准备跑的项目只能用python3.8，我得把package安装到python38里，怎么办？
方法 1 把其中一个python环境变量删掉，留下（如果没有需要添加）python38的路径和script添加到环境变量。
使用以下命令安装：
python -m pip install xxxxx 因为默认Python已经被修改为python38。
方法 2 使用文章开头的方式，最方便，直接指定 python 全局路径
pip install -t D:\python3.5(32bit)\Lib\site-packages numpy 情景二：安装 Python2.x 与 Python3.x Python3.x 使用：
py -3 -m pip install numpy Python2.x 使用：
py -2 -m pip install numpy </description>
    </item>
  </channel>
</rss>
