<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Decodetree on PaperMod</title>
    <link>http://localhost:8888/tags/decodetree/</link>
    <description>Recent content in Decodetree on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <atom:link href="http://localhost:8888/tags/decodetree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QEMU Decodetree详解</title>
      <link>http://localhost:8888/posts/qemu-decodetree%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu-decodetree%E8%AF%A6%E8%A7%A3/</guid>
      <description>QEMU 在 decode 指令的时候，需要调用各平台所定义的 instruction decoders 来解析指令。如在 ARM 平台下，就定义了：disas_arm_insn()、disas_thumb_insn() 及 disas_thumb2_insn() 等来分别负责 ARM 32-bits 指令、ARM Thumb 指令及 ARM Thumb2 指令的解析。
而 Decodetree 则是由 Bastian Koppelmann 于 2017 年在 移植 RISC-V QEMU 的时候所提出来的机制 (详见：讨论邮件1、讨论邮件2)。提出该机制主要是因为过往的 instruction decoders (如：ARM) 都是采用一堆 switch-case 来做判断。不仅难阅读，也难以维护。
因此 Bastian Koppelmann 就提出了 Decodetree 的机制，开发者只需要通过 Decodetree 的语法定义各个指令的格式，便可交由 Decodetree 来动态生成对应包含 switch-case 的 instruction decoder .c 文档。
Decodetree 特别适合像 RISC-V 这种具有固定指令格式的 ISA。
因为各字段都在固定的位置，(如 RISC-V 的 opcode 都是固定在 bits[6..0] 的位置)。 Decodetree 其实是由 Python script (.</description>
    </item>
  </channel>
</rss>
