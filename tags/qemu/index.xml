<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>QEMU on PaperMod</title>
    <link>http://localhost:8888/tags/qemu/</link>
    <description>Recent content in QEMU on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 07 Jul 2024 10:22:12 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/tags/qemu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QEMU 常用命令</title>
      <link>http://localhost:8888/posts/qemu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 07 Jul 2024 10:22:12 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>QEMU 是一个开源的虚拟化软件，它能够模拟不同的硬件平台，让用户在不同的操作系统之间进行切换和测试。以下是 QEMU 常用命令的总结文档，包含每个命令的功能说明。
QEMU 安装 源码下载 压缩包方式 版本可以修改
cd qemu-build &amp;amp;&amp;amp; wget &amp;#34;https://download.qemu.org/qemu-8.0.2.tar.xz&amp;#34; tar -xf qemu-8.0.2.tar.xz --strip-components=1 Clone 方式 git clone https://gitlab.com/qemu-project/qemu.git cd qemu git submodule init git submodule update --recursive 配置编译选项 ./configure --target-list=riscv32-softmmu,riscv32-linux-user,riscv64-linux-user,riscv64-softmmu \ --enable-kvm \ --enable-debug \ --enable-sdl \ --prefix=/home/user/program/riscv64-qemu \ --python=/usr/bin/python3 # --python=python路径，如果提示默认python版本低，可以加这个参数 # --prefix 选项设置qemu的安装位置绝对路径，之后若要卸载删除qemu只要删除该文件夹即可，--enable-kvm开启kvm # config完，可以在指定的qemu安装文件夹下面找到config-host.mak文件， # 该文件记录着qemu配置的选项，可以和自己设置的进行对比，确保配置和自己已知 一些常用的编译选项 &amp;ndash;enable-debug：编译调试版本，调试版本的运行速度非常慢 &amp;ndash;disable-werror：忽略警告，否则任何编译警告都被视为编译错误 &amp;ndash;enable-plugins：开启TCG Plugin支持 &amp;ndash;disable-stack-protector：关闭QEMU自身的栈保护 &amp;ndash;extra-cflags=&amp;quot;-O3&amp;quot;：能让你的QEMU提速5~10%，如果编译时报错，请加上--disable-werror &amp;ndash;prefix=&amp;lt;路径&amp;gt;：指定安装目录的路径 &amp;ndash;target-list=&amp;lt;架构&amp;gt;：指定要编译的目标架构列表，例如 x86_64-softmmu,arm-softmmu。 &amp;ndash;enable-&amp;lt;功能&amp;gt;：启用指定的功能。例如，--enable-kvm 启用 KVM 支持，--enable-gtk 启用 GTK 图形界面等。 &amp;ndash;disable-&amp;lt;功能&amp;gt;：禁用指定的功能。 &amp;ndash;enable-debug：启用调试模式，包括调试符号和调试输出。 &amp;ndash;enable-virtfs：启用 virtio 文件系统支持。 &amp;ndash;enable-modules：启用模块支持。 &amp;ndash;disable-guest-agent：禁用客户机代理支持。 &amp;ndash;enable-trace-backend=&amp;lt;后端&amp;gt;：指定跟踪后端，例如 simple、log 或 dtrace。 &amp;ndash;disable-vhost-net：禁用 vhost-net 支持。 编译时输出.</description>
    </item>
    <item>
      <title>QEMU 虚拟机网络配置</title>
      <link>http://localhost:8888/posts/qemu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 05 Aug 2023 14:47:54 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>Quick Setup 安装工具 安装两个网络管理工具用于建立网桥以及虚拟网卡：
# 安装虚拟网桥工具 sudo apt install bridge-utils -y # UML（User-mode linux）工具 sudo apt install uml-utilities -y 配置脚本 qemu-ifup 将下面的脚本保存为文件 qemu-ifup，并赋予可执行权限：
为了方便复制脚本，在 confluence 页面提供了脚本内容，可以直接复制。
mkdir -p /etc/qemu mv qemu-ifup /etc/qemu &amp;amp;&amp;amp; mv qemu-ifdown /etc/qemu sudo chmod +x qemu-ifup sudo chmod +x qemu-ifdown 因为网卡信息不容易定位，可能一台机器有多个网卡，所以不方便用脚本获取，需要手动设置一下。将下面的NIC值修改为宿主机可以上网的网卡名称。可以通过ifconfig命令查看。
#!/bin/bash # 设置默认网卡信息 NIC=enp2s0 # 设置用户名 USER_NAME=user # 设置网桥名称 BRIDGE=br0 # 设置网络信息 NIC_IP=$(ifconfig $NIC | grep &amp;#34;inet\b&amp;#34; | awk &amp;#39;{print $2}&amp;#39;) NIC_NETMAST=$(ifconfig $NIC | grep &amp;#34;inet\b&amp;#34; | awk &amp;#39;{print $4}&amp;#39;) NIC_BROADCAST=$(ifconfig $NIC | grep &amp;#34;inet\b&amp;#34; | awk &amp;#39;{print $6}&amp;#39;) NETMASK=255.</description>
    </item>
    <item>
      <title>QEMU启动RISC-V架构OpenEuler并配置OSC环境</title>
      <link>http://localhost:8888/posts/qemu%E5%90%AF%E5%8A%A8risc-v%E6%9E%B6%E6%9E%84openeuler%E5%B9%B6%E9%85%8D%E7%BD%AEosc%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 23 Jul 2023 19:28:29 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E5%90%AF%E5%8A%A8risc-v%E6%9E%B6%E6%9E%84openeuler%E5%B9%B6%E9%85%8D%E7%BD%AEosc%E7%8E%AF%E5%A2%83/</guid>
      <description>基于Ubuntu 18.04，QEMU 8.0.2，OpenEuler 22.09
安装QEMU 安装基础编译工具 sudo apt install build-essential autoconf automake autotools-dev pkg-config bc curl \ gawk git bison flex texinfo gperf libtool patchutils mingw-w64 libmpc-dev \ libmpfr-dev libgmp-dev libexpat-dev libfdt-dev zlib1g-dev libglib2.0-dev \ libpixman-1-dev libncurses5-dev libncursesw5-dev meson libvirglrenderer-dev libsdl2-dev -y sudo add-apt-repository ppa:deadsnakes/ppa sudo apt install python3.8 python3-pip -y sudo apt install -f pip3 install meson 下载QEMU 建立文件夹用于编译：
cd &amp;amp;&amp;amp; mkdir -p qemu-build 建立文件夹用于安装：
cd &amp;amp;&amp;amp; mkdir -p /home/user/program/riscv64-qemu 可登录官网将版本号换成最新版本即可：</description>
    </item>
    <item>
      <title>QEMU&#39;s instance_init() vs. realize()</title>
      <link>http://localhost:8888/posts/qemu-s-instance-init-vs-realize/</link>
      <pubDate>Tue, 01 Nov 2022 09:51:28 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu-s-instance-init-vs-realize/</guid>
      <description>转载自huth (Thomas Huth)的一篇文章，原文已经 404，从网页快照中找回的文章。
Note that this is a blog post for (new) QEMU developers. If you are just interested in using QEMU, you can certainly skip this text. Otherwise, in case you have ever been in touch with the QEMU device model (&amp;ldquo;qdev&amp;rdquo;), you are likely aware of the basic qdev code boilerplate already:
static void mydev_realize(DeviceState *dev, Error **errp) { } static void mydev_instance_init(Object *obj) { } static Property mydev_properties[] = { DEFINE_PROP_xxx(&amp;#34;myprop&amp;#34;, MyDevState, field, .</description>
    </item>
    <item>
      <title>QEMU 源码分析-QOM</title>
      <link>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-qom/</link>
      <pubDate>Wed, 09 Mar 2022 16:02:19 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-qom/</guid>
      <description>QOM 简介 QOM(QEMU Object Model) 是 QEMU 的一个模块，用于描述虚拟机的结构，包括虚拟机的 CPU、内存、硬盘、网络、输入输出设备等。QEMU 为了方便整个系统的构建，实现了自己的一套的面向对象机制，也就是 QOM(QEMU Object Model)。它能够方便的表示各个设备（Device）与总线（Bus）之间的关系。
这个模型主要包含四个结构体：
Object: 是所有对象的 基类 Base Object ObjectClass: 是所有类对象的基类 TypeInfo：是用户用来定义一个 Type 的工具型的数据结构 TypeImpl：TypeInfo 抽象数据结构，TypeInfo 的属性与 TypeImpl 的属性对应 在 QEMU 里要初始化一个对象需要完成四步：
将 TypeInfo 注册 TypeImpl 实例化 Class（ObjectClass） 实例化 Object 添加 Property QOM 中的面向对象 继承 在 QEMU 中通过 TypeInfo 来定义一个类。
例如 x86_base_cpu_type_info 就是一个 class，
static const TypeInfo x86_base_cpu_type_info = { .name = X86_CPU_TYPE_NAME(&amp;#34;base&amp;#34;), .parent = TYPE_X86_CPU, .class_init = x86_cpu_base_class_init, }; 利用结构体包含来实现继承。这应该是所有的语言实现继承的方法，在 C++ 中，结构体包含的操作被语言内部实现了，而 C 语言需要自己实现。</description>
    </item>
    <item>
      <title>QEMU 源码分析-内存虚拟化</title>
      <link>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%8C%96/</link>
      <pubDate>Tue, 25 Jan 2022 13:42:11 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%8C%96/</guid>
      <description>1.大部分转载自QEMU 内存虚拟化源码分析 | Keep Coding | 苏易北 2.原文源码为 QEMU1.2.0，版本较旧，部分源码内容根据 QEMU6.2 版本修改 3.部分内容根据自己理解补充添加
概述 我们知道操作系统给每个进程分配虚拟内存，通过页表映射，变成物理内存进行访问。当有了虚拟机之后，情况会变得更加复杂。因为虚拟机对于物理机来讲是一个进程，但是虚拟机里面也有内核，也有虚拟机里面跑的进程。所以有了虚拟机，内存就变成了四类：
虚拟机里面的虚拟内存（Guest OS Virtual Memory，GVA），这是虚拟机里面的进程看到的内存空间； 虚拟机里面的物理内存（Guest OS Physical Memory，GPA），这是虚拟机里面的操作系统看到的内存，它认为这是物理内存； 物理机的虚拟内存（Host Virtual Memory，HVA），这是物理机上的 qemu 进程看到的内存空间； 物理机的物理内存（Host Physical Memory，HPA），这是物理机上的操作系统看到的内存。 内存虚拟化的关键在于维护 GPA 到 HVA 的映射关系。
页面分配和映射的两种方式 要搞清楚 QEMU system emulation 的仿真架构，首先对于 Host OS，将 QEMU 作为进程启动，然后对于 QEMU 进程，会仿真各种硬件和运行 Guest OS，在这层 OS 上运行要全系统模拟的应用程序，因此对于 Guest OS 管理的内存要实现到 QEMU 进程的虚拟空间的转换需要 softMMU（即需要对 GPA 到 HVA 进行转换）。从 GVA 到 GPA 到 HVA 到 HPA，性能很差，为了解决这个问题，有两种主要的思路。
影子页表 Shadow Page Table，SPT 第一种方式就是软件的方式，影子页表（Shadow Page Table）。</description>
    </item>
    <item>
      <title>QEMU 源码分析-外设模拟（以 GPIO 为例）</title>
      <link>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F%E4%BB%A5gpio%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Thu, 11 Nov 2021 10:11:32 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F%E4%BB%A5gpio%E4%B8%BA%E4%BE%8B/</guid>
      <description>QEMU 模拟外设的原理 QEMU 主要是实现了 CPU 核的模拟，可以读写某个地址。 QEMU 的模拟外设的原理很简单：硬件即内存。 要在 QEMU 上模拟某个外设，思路就是：
CPU 读某个地址时，QEMU 模拟外设的行为，把数据返回给 CPU CPU 写某个地址时，QEMU 获得数据，用来模拟外设的行为。 即：要模拟外设备，我们只需要针对外设的地址提供对应的读写函数即可。 以 GPIO 为例：
QEMU 为GPIO内存地址提供读写回调函数，
static void sifive_gpio_write(void *opaque, hwaddr offset, uint64_t value, unsigned int size) static uint64_t sifive_gpio_read(void *opaque, hwaddr offset, unsigned int size) 给外设地址提供读写函数 怎么描述某段地址：基地址、大小？如何给这段地址提供读写函数呢？这段地址设置好后，如何添加进system_memory去？有 2 种方法。
法 1：memory_region_init_io/memory_region_add_subregion 以SIFIVE_UART为例，
memory_region_init_io(&amp;amp;s-&amp;gt;mmio, NULL, &amp;amp;uart_ops, s, TYPE_SIFIVE_UART, 0x2000); memory_region_add_subregion(address_space, base, &amp;amp;s-&amp;gt;mmio); memory_region_init_io函数初始化iomem，读写函数，大小。 memory_region_add_subregion函数s-&amp;gt;iomem指定了基地址，并添加进system_memory中。 以后，客户机上的程序读写这块地址时，就会导致对应的读写函数被调用。
法 2：memory_region_init_io/sysbus_init_mmio/sysbus_mmio_map 以SIFIVE_GPIO为例，
memory_region_init_io(&amp;amp;s-&amp;gt;mmio, OBJECT(dev), &amp;amp;gpio_ops, s, TYPE_SIFIVE_GPIO, SIFIVE_GPIO_SIZE); sysbus_init_mmio(SYS_BUS_DEVICE(dev), &amp;amp;s-&amp;gt;mmio); memory_region_init_io函数初始化iomem，读写函数，大小。 sysbus_init_mmio将mmin传给设备；</description>
    </item>
    <item>
      <title>QEMU 源码分析 - 虚拟外设创建</title>
      <link>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%A4%96%E8%AE%BE%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Tue, 09 Nov 2021 17:39:38 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9F%E5%A4%96%E8%AE%BE%E5%88%9B%E5%BB%BA/</guid>
      <description>QOM 简介 QOM(QEMU Object Model) 是 QEMU 的一个模块，用于描述虚拟机的结构，包括虚拟机的 CPU、内存、硬盘、网络、输入输出设备等。QEMU 为了方便整个系统的构建，实现了自己的一套的面向对象机制，也就是 QOM(QEMU Object Model)。它能够方便的表示各个设备（Device）与总线（Bus）之间的关系。
这个模型主要包含四个结构体：
Object: 是所有对象的 基类 Base Object ObjectClass: 是所有类对象的基类 TypeInfo：是用户用来定义一个 Type 的工具型的数据结构 TypeImpl：TypeInfo 抽象数据结构，TypeInfo 的属性与 TypeImpl 的属性对应 在 QEMU 里要初始化一个对象需要完成四步：
将 TypeInfo 注册 TypeImpl 实例化 Class（ObjectClass） 实例化 Object 添加 Property 如何描述硬件 一个板子上有很多硬件：芯片，LED、按键、LCD、触摸屏、网卡等等。芯片里面也有很多部件，比如 CPU、GPIO、SD 控制器、中断控制器等等。
这些硬件，或是部件，各有不同。怎么描述它们？
每一个都使用一个 TypeInfo 结构体来描述，TypeInfo 是用户用来定义一个 Type 的工具型的数据结构。它包含了很多成员变量，这些成员合在一起描述了一个设备类型。
// include/qom/object.h struct TypeInfo { const char *name; const char *parent; size_t instance_size; size_t instance_align; void (*instance_init)(Object *obj); void (*instance_post_init)(Object *obj); void (*instance_finalize)(Object *obj); bool abstract; size_t class_size;void (*class_init)(ObjectClass *klass, void *data); void (*class_base_init)(ObjectClass *klass, void *data); void *class_data;InterfaceInfo *interfaces; }; 这个结构体我们在刚刚也提到，他在图里是独立的，在注册的时候会将它的信息都传给 Typeimpl 结构体。</description>
    </item>
    <item>
      <title>QEMU 源码分析-虚拟 CPU 创建</title>
      <link>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9Fcpu%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Wed, 01 Sep 2021 18:22:14 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E8%99%9A%E6%8B%9Fcpu%E5%88%9B%E5%BB%BA/</guid>
      <description>流程图 先开个头吧，把创建流程稍微捋一下，找到创建虚拟 CPU 的模块。至于中间的流程还没有详细分析，万事开头难，先上手再说吧。
qemu_add_opts解析 qemu 的命令行 qemu_init函数中下面这一长串内容，就是在解析命令行的参数。
qemu add opts (&amp;amp;qemu drive opts); qemu add drive opts(&amp;amp;qemu Legacy drive opts); qemu add drive opts (&amp;amp;qemu common drive opts); qemu add drive opts (&amp;amp;qemu drive opts); qemu add drive opts (sbdry runtime opts); qemu add opts (qemu chardev opts); qemu add opts (&amp;amp;qemu device opts); qemu add opts (&amp;amp;qemu netdev opts); qemu add opts (&amp;amp;qemu nic opts); qemu add opts (sqemu net opts qemu add opts (&amp;amp;qemu rtc opts) qemu add opts (&amp;amp;qemu global_opts); qemu add opts (&amp;amp;qemu mon opts); qemu add opts (sqemu trace opts); .</description>
    </item>
    <item>
      <title>VSCode 单步调试 QEMU</title>
      <link>http://localhost:8888/posts/vscode%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95qemu/</link>
      <pubDate>Tue, 24 Aug 2021 19:24:08 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95qemu/</guid>
      <description>了解了如何在VSCode 中调试程序，接下来我们在 VSCode 中搭建调试 QEMU 的环境。
配置 首先我们需要下载和编译 QEMU 源码
./configure --enable-debug --target-list=riscv32-softmmu,riscv32-linux-user --enable-kvm 一定要加上--enable-debug，编译出的程序才带有调试信息，不用设置安装路径，编译时会自动在 qemu 文件夹下自动创建一个build文件夹，编译后的程序也在build文件夹下。
用 VSCode 打开qemu-6.X.X文件夹，Ctrl+Shift+D打开调试配置。如果参考过VSCode 中调试程序这篇文章，接下来就很容易。我们只需要将launch.jason文件中的program属性改为${workspaceFolder}/build/qemu-system-riscv32即可。
调试 打开qemu-6.X.X/softmmu/main.c文件，在main函数入口处打上断点，即可开始调试。
现在只需要点击屏幕上的图标，就可以快速的进行单步调试。
如果需要进行命令行操作，在屏幕下方打开DEBUG CONSOLE，输入-exec+正常命令行下的命令即可在命令行中进行更多的调试。如查看断点信息-exec info breakpoints</description>
    </item>
    <item>
      <title>在 QEMU 上运行 64 位和 32 位 RISC-V-Linux</title>
      <link>http://localhost:8888/posts/qemu%E4%B8%8A%E8%BF%90%E8%A1%8C64%E4%BD%8D%E5%92%8C32%E4%BD%8Drisc-v-linux/</link>
      <pubDate>Wed, 28 Jul 2021 13:47:56 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E4%B8%8A%E8%BF%90%E8%A1%8C64%E4%BD%8D%E5%92%8C32%E4%BD%8Drisc-v-linux/</guid>
      <description>制作交叉工具链 riscv-gnu-toolchain 下载源码 这个仓库是我遇到的最难下载的一个仓库了，公司网慢和虚拟机性能差都脱不了干系。估计下载了五小时都不止，刚开始还指望一个命令所有子模块都下载完的，结果愣是等了半天中断了。试了两次后放弃了。如果各位看官能一次完成，那您是福大。
国内的码云平台有个Gitee 极速下载项目，上面有 GitHub 的一些常用开源项目的镜像，可供加速下载。
# riscv-gnu-toolchainhttps://gitee.com/mirrors/riscv-gnu-toolchain.git 下载时问题出现了，如果下载子模块仍然会卡住，如果不加--recursive就只能下载主体内容，子模块都没有。（以下内容为第一安装时的方法，后续又找到了git clone 快速下载子模块的方法）
开始下载时不加--recursive参数，只下载riscv-gnu-toolchain的主体内容，然后进入到riscv-gnu-toolchain文件夹下，手动下载子模块的内容。
当下完riscv-binutils继续下载riscv-gdb时发现这两个项目是同一个项目，只是不同的分支。但是码云上并没有区分，但是我也没找到在码云上的对应分支。只能用油猴脚本了。
如果你有油猴插件可以去greasyfork搜索安装GitHub 镜像访问，加速下载这个脚本，刷新 GitHub 仓库界面就会多出几个镜像地址，一般下载都会快好几倍。如果不用油猴插件的可以用我复制好的链接。
# riscv-binutilsgit clone https://gitee.com/mirrors/riscv-binutils-gdb.git# riscv-gccgit clone https://gitee.com/mirrors/riscv-gcc.git# riscv-dejagnugit clone https://gitee.com/mirrors/riscv-dejagnu.git# riscv-glibcgit clone https://gitee.com/mirrors/riscv-glibc.git# riscv-newlibgit clone https://gitee.com/mirrors/riscv-newlib.git# riscv-gdbgit clone --depth=1 https://hub.fastgit.org/riscv/riscv-binutils-gdb.git 编译 riscv-gnu-toolchain 提前安装如下软件：
sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev 不听老人言，吃亏在眼前呀，本以为这是可选项，很多库都安装了，就没有操作这一步，结果就是编译半天结果还错了。如果报make 错误 127，那就老老实实把前置的这些库都装上。</description>
    </item>
    <item>
      <title>QEMU 文档</title>
      <link>http://localhost:8888/posts/qemu%E6%96%87%E6%A1%A3/</link>
      <pubDate>Tue, 27 Jul 2021 11:12:01 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E6%96%87%E6%A1%A3/</guid>
      <description>调用文档 qemu-system-x86_64 [options] [disk_image]disk_image是 IDE 硬盘 0 的原始硬盘映像。某些目标不需要磁盘映像。
标准参数 Standard options -h 功能 显示帮助信息并退出
子参数
调用实例
qemu-system-riscv32 -h -version 功能 显示 qemu 版本信息并退出
子参数
调用实例
qemu-system-riscv32 -version -machine [type=]name[,prop=value[,...]] 功能 通过名称选择模拟器。使用 -machine help 可以查看可用的模拟器。 对于支持跨版本实时迁移兼容性的架构，每个版本都会引入一个新的版本化模拟器类型。例如，2.8.0 版本为 x86_64/i686 架构引入了“pc-i440fx-2.8”和“pc-q35-2.8”。
子参数 为了允许用户从 QEMU 2.8.0 版实时迁移到 QEMU 2.9.0 版，2.9.0 版也必须支持“pc-i440fx-2.8”和“pc-q35-2.8”机器。为了允许用户在升级时实时迁移 VMs 跳过多个中间版本，QEMU 的新版本将支持多个以前版本的机器类型。 支持的机器属性有：
accel=accels1[:accels2[:...]] This is used to enable an accelerator. Depending on the target architecture, kvm, xen, hax, hvf, nvmm, whpx or tcg can be available.</description>
    </item>
    <item>
      <title>QEMU 初识</title>
      <link>http://localhost:8888/posts/qemu%E5%88%9D%E8%AF%86/</link>
      <pubDate>Fri, 23 Jul 2021 11:54:49 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E5%88%9D%E8%AF%86/</guid>
      <description>简介 QEMU 是一款开源的模拟器及虚拟机监管器 (Virtual Machine Monitor, VMM)。QEMU 主要提供两种功能给用户使用。一是作为用户态模拟器，利用动态代码翻译机制来执行不同于主机架构的代码。二是作为虚拟机监管器，模拟全系统，利用其他 VMM(Xen, KVM, etc) 来使用硬件提供的虚拟化支持，创建接近于主机性能的虚拟机。
安装 使用包管理安装 sudo apt-get install qemu 使用源码安装 wget wget https://download.qemu.org/qemu-6.1.0-rc3.tar.xztar xvJf qemu-6.1.0-rc3.tar.xzcd qemu-6.1.0-rc3 安装相关库 apt-get install libglib2.0-devapt-get install ninja-buildapt install g++apt install libpixman-1-devapt install libsdl2-dev -y 配置 通过./configure --help 的查看编译时的选项，--target-list选项为可选的模拟器，默认全选。 --target-list 中的 xxx-soft 和 xxx-linux-user 分别指系统模拟器和应用程序模拟器，生成的二进制文件名字为qemu-system-xxx和 qemu-xxx 本文使用如下配置：
./configure --prefix=XXX --enable-debug --target-list=riscv32-softmmu,riscv32-linux-user,riscv64-linux-user,riscv64-softmmu --enable-kvm# --prefix 选项设置qemu的安装位置绝对路径，之后若要卸载删除qemu只要删除该文件夹即可，--enable-kvm开启kvm# config完，可以在指定的qemu安装文件夹下面找到config-host.mak文件，# 该文件记录着qemu配置的选项，可以和自己设置的进行对比，确保配置和自己已知 接着进行编译
make -j8 直接make会很慢，第一次编译时默认安装说有模拟器，编译了三四个小时。加上-j8可以进行多线程编译</description>
    </item>
    <item>
      <title>QEMU 学习记录</title>
      <link>http://localhost:8888/posts/qemu%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 20 Jul 2021 16:51:34 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
      <description>QEMU 学习记录 什么是 KVM？ 基于内核的虚拟机 Kernel-based Virtual Machine（KVM）是一种内建于 Linux 中的开源虚拟化技术。具体而言，KVM 可帮助用户将 Linux 转变为虚拟机监控程序，使主机计算机能够运行多个隔离的虚拟环境，即虚拟客户机或虚拟机（VM）。
什么是 QEMU？ Qemu 是一个完整的可以单独运行的软件，它可以用来模拟不同架构的机器，非常灵活和可移植。它主要通过一个特殊的&amp;rsquo;重编译器&amp;rsquo;将为特定处理器编写二进制代码转换为另一种。
KVM 与 QEMU 的关系 KVM 是 Linux 的一个模块。可以用modprobe去加载 KVM 模块。加载了模块后，才能进一步通过其他工具创建虚拟机。但仅有 KVM 模块是 远远不够的，因为用户无法直接控制内核模块去作事情：还必须有一个用户空间的工具才行。这个用户空间的工具，开发者选择了已经成型的开源虚拟化软件 QEMU。KVM 使用了 QEMU 的一部分，并稍加改造，就成了可控制 KVM 的用户空间工具了。所以你会看到，官方提供的 KVM 下载有两 大部分三个文件，分别是 KVM 模块、QEMU 工具以及二者的合集。也就是说，你可以只升级 KVM 模块，也可以只升级 QEMU 工具。
QEMU 用户模式与系统模式 QEMU 属于应用层的仿真程序，它支持两种操作模式：用户模式模拟和系统模式模拟。
用户模式仿真 利用动态代码翻译机制，可以在当前 CPU 上执行被编译为支持其他 CPU 的程序，如可以在 x86 机器上执行一个 ARM 二进制可执行程序。（执行主机 CPU 指令的动态翻译并相应地转换 Linux 系统调用）。 系统模式仿真 利用其它 VMM(Xen, KVM) 来使用硬件提供的虚拟化支持，创建接近于主机性能的全功能虚拟机，包括处理器和配套的外围设备（磁盘，以太网等）。 用户模式 支持的 CPU：x86 (32 and 64 bit), PowerPC (32 and 64 bit), ARM, MIPS (32 bit only), Sparc (32 and 64 bit), Alpha, ColdFire(m68k), CRISv32 和 MicroBlaze 下列操作系统支持 QEMU 的用户模式模拟：</description>
    </item>
    <item>
      <title>QEMU Decodetree详解</title>
      <link>http://localhost:8888/posts/qemu-decodetree%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:8888/posts/qemu-decodetree%E8%AF%A6%E8%A7%A3/</guid>
      <description>QEMU 在 decode 指令的时候，需要调用各平台所定义的 instruction decoders 来解析指令。如在 ARM 平台下，就定义了：disas_arm_insn()、disas_thumb_insn() 及 disas_thumb2_insn() 等来分别负责 ARM 32-bits 指令、ARM Thumb 指令及 ARM Thumb2 指令的解析。
而 Decodetree 则是由 Bastian Koppelmann 于 2017 年在 移植 RISC-V QEMU 的时候所提出来的机制 (详见：讨论邮件1、讨论邮件2)。提出该机制主要是因为过往的 instruction decoders (如：ARM) 都是采用一堆 switch-case 来做判断。不仅难阅读，也难以维护。
因此 Bastian Koppelmann 就提出了 Decodetree 的机制，开发者只需要通过 Decodetree 的语法定义各个指令的格式，便可交由 Decodetree 来动态生成对应包含 switch-case 的 instruction decoder .c 文档。
Decodetree 特别适合像 RISC-V 这种具有固定指令格式的 ISA。
因为各字段都在固定的位置，(如 RISC-V 的 opcode 都是固定在 bits[6..0] 的位置)。 Decodetree 其实是由 Python script (.</description>
    </item>
  </channel>
</rss>
