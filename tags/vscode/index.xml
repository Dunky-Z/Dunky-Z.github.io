<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VSCode on PaperMod</title>
    <link>http://localhost:8888/tags/vscode/</link>
    <description>Recent content in VSCode on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 27 Jul 2024 22:24:55 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VSCode 插件发布简易流程</title>
      <link>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83%E7%AE%80%E6%98%93%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 27 Jul 2024 22:24:55 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83%E7%AE%80%E6%98%93%E6%B5%81%E7%A8%8B/</guid>
      <description>VSCode 插件发布简易流程 注册微软开发者账号 如果已经有微软账号，直接登录即可，如果没有，需要注册一个微软账号。登录：https://login.live.com/。
登录https://aka.ms/SignupAzureDevOps，注册微软开发者账号。设置保存默认即可，自己设置也行，不太重要。
右上角创建Personal Access Token，用于登录vsce。
创建的Token名随意，但是Organization和Scopes需要选择正确的，否则会报错。
Organization：All accessible organizations Scopes：Full access 创建成功后，会生成一个Token，需要保存好，后续会用到。Token只会显示一次，如果忘记了，需要重新创建。
注册VSCode Publisher 登录：https://aka.ms/vscode-create-publisher，填写姓名即可如“Dominic Zhang”，会自动生成一个唯一的ID，ID只能是数字字母下划线，所以会生成“DominicZhang”。需要记住这个ID，后续会用到。
vsce登录并发布插件 输入在注册微软开发者账号时生成的Token，登录vsce。
vsce login DominicZhang WARNING Failed to open credential store. Falling back to storing secrets clear-text in: /home/nic/.vsce https://marketplace.visualstudio.com/manage/publishers/ Personal Access Token for publisher &amp;#39;DominicZhang&amp;#39;: **************************************************** The Personal Access Token verification succeeded for the publisher &amp;#39;DominicZhang&amp;#39;. 打包插件：
vsce package 发布插件：
vsce publish </description>
    </item>
    <item>
      <title>VSCode关闭滚动条预览</title>
      <link>http://localhost:8888/posts/vscode%E5%85%B3%E9%97%AD%E6%BB%9A%E5%8A%A8%E6%9D%A1%E9%A2%84%E8%A7%88/</link>
      <pubDate>Thu, 13 Jun 2024 17:02:36 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E5%85%B3%E9%97%AD%E6%BB%9A%E5%8A%A8%E6%9D%A1%E9%A2%84%E8%A7%88/</guid>
      <description>VSCode滚动条左侧有较宽的滚动条，这玩意叫小地图Minimap，作用和游戏里的小地图类似，就是为了看一下整个代码结构，便于快速定位，但是我习惯用搜索，觉得这玩意太占地方了，可以在设置里搜索Minimap进行关闭，或者设置为自动隐藏。</description>
    </item>
    <item>
      <title>RemoteX11 远程调试带GUI应用</title>
      <link>http://localhost:8888/posts/remotex11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6gui%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 03 Mar 2024 20:45:56 +0000</pubDate>
      <guid>http://localhost:8888/posts/remotex11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6gui%E5%BA%94%E7%94%A8/</guid>
      <description>Windows上通过WSL2进行Linux开发，但是有时候需要开发带GUI的引用，这样就需要将图像转发。
配置Windows 下载安装XMing，启动Xlaunch。
选择MultiWindow 设置Display number为10（可以自行设置，主要是需要和后面在WSL2中设置的变量保持一致） 选择Start no client（Windows的XMing是被动等待接收图像数据，所以选择该项） 一直下一页，其余保持默认，点击完成即可。 配置VSCode 安装RemoteX11插件，直接在插件中心搜索安装即可。
打开设置页面，搜索Remote x11，找到如下配置项，将Display Number配置为10
配置WSL2 安装xclock用于测试
sudo apt-get install xclock 设置环境变量
export DISPLAY=localhost:10.0 # 或者 export DISPLAY=:0 运行xclock查看结果</description>
    </item>
    <item>
      <title>解决复制 Markdown 文本到思源笔记无法转义为 Markdown 格式</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 01 Sep 2023 20:25:05 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</guid>
      <description>问题描述 在 VSCode 中编辑 Markdown 文本，复制到思源笔记后，思源笔记无法转义为 Markdown 格式。会变成一个代码块，但是代码块内的内容并不是复制的内容。
比如上面这段话复制到思源笔记成了下图这样：
但是我需要的是能够转义为 Markdown 的阅读模式。
解决方法 问题的原因在于 VSCode 复制的文本是带格式的，而思源笔记默认的粘贴模式是纯文本模式，所以会出现上面的问题。
解决方法就是从 VSCode 复制的内容为纯文本，一种可以把文本复制到 txt 文件中，再复制，但是比较麻烦。
第二种方法是使用 VSCode 的插件 Copy Plain Text，搜索下载后，默认快捷键为 Ctrl+Alt+C，可以复制为纯文本。
再次粘贴到思源笔记中，就可以转义为 Markdown 格式了。</description>
    </item>
    <item>
      <title>如何离线安装 VSCode 插件</title>
      <link>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85vscode%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 29 Aug 2023 20:59:19 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85vscode%E6%8F%92%E4%BB%B6/</guid>
      <description>背景简介 在使用 VSCode 的过程中，我们经常会安装一些插件来提高开发效率。但是，由于某些原因，我们可能无法直接访问 VSCode 的插件市场，这时候我们就需要离线安装插件了。
这里存在两种情况，一种是为本地的 VSCode 安装插件，另一种是为远程的 VSCode 安装插件。本文将分别介绍这两种情况下的离线安装方法。
远程 VSCode 也就是 VSCode 的Remote Development功能，可以通过 SSH、Docker、WSL 等方式远程连接到远程主机上的 VSCode。
方法一：使用已安装的插件目录 从已经安装插件的电脑上拷贝所有插件，路径一般为 C:\用户\用户名\.vscode\extensions 拷贝到离线安装的电脑上的 .vscode/extensions 文件夹下即可，重启 VScode 即可安装成功。 对于远程 VSCode 我们需要知道，插件不区分操作系统，所以我们可以在本地的 Windows 上的 VSCode 上安装插件，然后将插件目录压缩后整个拷贝到远程主机上即可。
远程主机上的插件目录一般在 ~/.vscode-server/extensions 下。将压缩的文件解药到这个目录下，重启 VSCode 即可。
方法二：下载离线安装包 vslx 安装 到 VScode 插件中心 搜索需要使用的插件名称
下载对应的拓展程序文件，下载的文件的后缀是.vslx VSCode 中安装 </description>
    </item>
    <item>
      <title>VSCode 插件 REST Client 使用文档</title>
      <link>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6-rest-client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 24 Mar 2023 19:59:35 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6-rest-client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</guid>
      <description>REST Client 是 VSCode 中一款非常好用的插件，能够帮助开发人员快速、方便地发送 HTTP 请求并查看响应。在本文中，我们将会详细介绍 REST Client 的使用方法。
安装 REST Client 插件 在 VSCode 中，你可以通过以下步骤安装 REST Client 插件：
打开 VSCode； 点击左侧的插件图标（Ctrl+Shift+X）； 搜索“REST Client”插件； 点击“安装”按钮。 发送 HTTP 请求 使用 REST Client 插件发送 HTTP 请求非常简单。你只需要创建一个新的.rest文本文件，将请求信息放入其中，然后使用快捷键Ctrl + Alt + R 或者右键菜单的 Send Request 选项发送请求。
下面是一个简单的 GET 请求的例子：
GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1 这个请求会获取 JSONPlaceholder API 中的一篇博客文章。
如果你想添加请求头或请求体，可以使用以下语法：
GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1 Content-Type: application/json { &amp;#34;title&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;body&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;userId&amp;#34;: 1 } 这个请求会在请求头中添加 Content-Type 头，请求体中包含 JSON 数据。</description>
    </item>
    <item>
      <title>解决 VSCode 远程登录失败 Error: WebSocket close with status code 1006</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5error-websocket-close-with-status-code-1006/</link>
      <pubDate>Sat, 15 Oct 2022 18:53:20 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vscode%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5error-websocket-close-with-status-code-1006/</guid>
      <description>保留现场 使用 VSCode 远程登录失败，报错：Failed to connect to the remote extension host server (Error: WebSocket close with status code 1006)。
解决方法 vim /etc/ssh/sshd_config AllowTcpForwarding no AllowAgentForwarding no # 替换为 AllowTcpForwarding yes AllowAgentForwarding yes 保存后重启 sshd 服务：
systemctl restart sshd </description>
    </item>
    <item>
      <title>Markdown 表格竖线自动对齐</title>
      <link>http://localhost:8888/posts/markdown%E8%A1%A8%E6%A0%BC%E7%AB%96%E7%BA%BF%E8%87%AA%E5%8A%A8%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Sat, 24 Sep 2022 15:01:41 +0000</pubDate>
      <guid>http://localhost:8888/posts/markdown%E8%A1%A8%E6%A0%BC%E7%AB%96%E7%BA%BF%E8%87%AA%E5%8A%A8%E5%AF%B9%E9%BD%90/</guid>
      <description>需求背景 Markdown 中的表格，只要符合语法就能够正常渲染显示，但是符合语法但是 Markdown 源码却不一定易读。就如以下的这个表格，可以正常显示，但是源码在源文件中竖线不对齐，就阅读困难。
源码：
|诗名|作者|朝代| |-|-|-| |白头吟|卓文君|两汉| |锦瑟|李商隐|唐代| |登科后|孟郊|唐代| 显示效果：
诗名 作者 朝代 白头吟 卓文君 两汉 锦瑟 李商隐 唐代 登科后 孟郊 唐代 我们可以手动将其竖线对齐，如下这样就易读许多：
| 诗名 | 作者 | 朝代 | | ------ | ------ | ---- | | 白头吟 | 卓文君 | 两汉 | | 锦瑟 | 李商隐 | 唐代 | | 登科后 | 孟郊 | 唐代 | 显示效果保持一致。但是如果一个字符一个字符去手动对齐效率太低，也不符合 Markdown 设计初衷。这就用到了额外的插件，能够辅助我们完成这个工作。
Markdown All in One VSCode 插件中心搜索Markdown All in One安装。</description>
    </item>
    <item>
      <title>使用 Markdownlint 对 Markdown 文本格式检查</title>
      <link>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8markdownlint%E5%AF%B9markdown%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Sat, 17 Sep 2022 11:07:10 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8markdownlint%E5%AF%B9markdown%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5/</guid>
      <description>Markdownlint 简介 Markdown 标记语言旨在易于阅读、编写和理解。它的灵活性既是优点也是缺点。语法众多，因此格式可能不一致。某些构造在所有解析器中都不能很好地工作，应该避免。CommonMark 规范标准化解析器。
Markdownlint 是一个用于 Node.js 的静态分析工具，有一个标准规范，用于强制执行 Markdown 文件的标准和一致性。
Markdownlint 插件使用 markdownlint提供了多种使用场景下的解决方案，如命令行，编辑器甚至 GitHub Action。因为我平时写 Markdown 文档都是使用 VSCode，所以介绍一下 VSCode 下的使用。其他编辑器包括 VIM，Sublime 也都支持，可以前往官网查阅方法。
VSCode 需要下载插件，Ctrl+Shift+X打开插件中心，搜索Markdownlint安装即可。
安装插件后打开 Markdown 文档，如果有不符合规范的语法将会警告标识。如，标题前后没有空行，将会标识：
提示违反了第 22 条规范，第 22 条规范的就是标题前后需要有空行隔开。
目前有 53 条规范，可以在markdownlint/Rules.md查看所有规范的内容。
当然这些规范也都可以自定义是否检查，比如第 24 条规定，文档内不可以有重复的标题，但是我就有重复标题的需求，那该如何关闭这个检查呢，Markdownlint 提供了配置的方式。
Ctrl+Shift+P打开运行窗口，输入 Markdownlint，找到Creat or open the markdownlint configuration file。
创建一个配置文件，并输入以下内容，表示关闭第 24 条规范的检查：
{ &amp;#34;MD024&amp;#34;: false, } 这样文档中将不会有第 24 条规范的检查警告，其他检查同理。
Markdownlint 自定义规则 MD001 - Heading levels should only increment by one level at a time 标题等级一次只能增加一级，不能跨级。</description>
    </item>
    <item>
      <title>VSCode 字体快速切换</title>
      <link>http://localhost:8888/posts/vscode%E5%AD%97%E4%BD%93%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/</link>
      <pubDate>Mon, 12 Sep 2022 15:05:16 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E5%AD%97%E4%BD%93%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/</guid>
      <description>需求背景 在写 MD 文档时为了追求美观，表格通常都是对齐的，这就需要字体必须等宽，但是写代码时等宽字体的因为很瘦小，不容易阅读，所以想要一个插件能够在多个字体直接快速切换。万能 VSCode 啥都有，插件中心就有一款专门切换字体的插件Font Switcher。直接搜索安装。
配置与使用 打开配置脚本settings.json，如果以前修改过字体，找到&amp;quot;editor.fontFamily&amp;quot;配置项，如果没有就直接添加。
这是我的字体，添加你们机器上安装的字体，每个逗号间隔都是不同的字体，可以使用Font Switcher切换，需要注意的是，字体名没有空格不需要加单引号，加了也无妨，如果有空格，一定要加引号。
&amp;#34;editor.fontFamily&amp;#34;: &amp;#34;&amp;#39;Sarasa Mono SC&amp;#39;, 微软雅黑，&amp;#39;Noto Sans Mono CJK SC&amp;#39;, &amp;#39;JetBrains Mono&amp;#39;, Consolas, monospace&amp;#34;, Ctrl+Shift+P打开运行窗口，输入Switch Font，选择切换的字体。如图：
![](https://picbed-1311007548.cos.ap-shanghai.myqcloud.com/markdown_picbed/img//2022/09/12/15-17-44-dd742307432154f630585e05a1f57956-GIF 2022-9-12 15-17-27-836285.gif)</description>
    </item>
    <item>
      <title>VSCode 任务栏多窗口命名</title>
      <link>http://localhost:8888/posts/vscode%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%91%BD%E5%90%8D/</link>
      <pubDate>Sun, 28 Aug 2022 08:55:55 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%91%BD%E5%90%8D/</guid>
      <description>调教背景 当有多个项目同时打开时，VSCode 窗口开得太多就找不到自己想要打开的窗口，因为窗口命名默认按照当前打开的文件命名的，不是很清楚。就需要挨个打开才能确定自己想要打开的窗口。
如果能按照项目名命名窗口就会便捷许多，好在 VSCode 提供重命名的方式。同样的需求可能在浏览器中也会遇到，可以参考浏览器任务栏多窗口命名 - 如云泊。
修改方式 File -&amp;gt; Preferences -&amp;gt; Setting 搜索 Window: Title 改成：
${dirty}${rootName}${separator}${activeEditorMedium}${separator}${appName} 其他可用配置说明：
&amp;#34;${activeEditorShort}&amp;#34;: 文件名 (例如 myFile.txt)。&amp;#34;${activeEditorMedium}&amp;#34;: 相对于工作区文件夹的文件路径 (例如, myFolder/myFileFolder/myFile.txt)。&amp;#34;${activeEditorLong}&amp;#34;: 文件的完整路径 (例如 /Users/Development/myFolder/myFileFolder/myFile.txt)。&amp;#34;${activeFolderShort}&amp;#34;: 文件所在的文件夹名称 (例如, myFileFolder)。&amp;#34;${activeFolderMedium}&amp;#34;: 相对于工作区文件夹的、包含文件的文件夹的路径, (例如 myFolder/myFileFolder)。&amp;#34;${activeFolderLong}&amp;#34;: 文件所在文件夹的完整路径 (例如 /Users/Development/myFolder/myFileFolder)。&amp;#34;${folderName}&amp;#34;: 文件所在工作区文件夹的名称 (例如 myFolder)。&amp;#34;${folderpath}&amp;#34;: 文件所在工作区文件夹的路径 (例如 /Users/Development/myFolder)。&amp;#34;${rootName}&amp;#34;: 打开的工作区或文件夹的名称 (例如 myFolder 或 myWorkspace)。&amp;#34;${rootPath}&amp;#34;: 打开的工作区或文件夹的文件路径 (例如 /Users/Development/myWorkspace)。&amp;#34;${appName}&amp;#34;: 例如 VS Code。“${remoteName}”: 例如 SSH${dirty}: 表明活动编辑器具有未保存更改的时间的指示器。&amp;#34;${separator}&amp;#34;: 一种条件分隔符 (&amp;#34;-&amp;#34;), 仅在被包含值或静态文本的变量包围时显示 </description>
    </item>
    <item>
      <title>VSCode搜索结果/匹配高亮</title>
      <link>http://localhost:8888/posts/vscode%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C-%E5%8C%B9%E9%85%8D%E9%AB%98%E4%BA%AE/</link>
      <pubDate>Fri, 26 Aug 2022 16:42:50 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C-%E5%8C%B9%E9%85%8D%E9%AB%98%E4%BA%AE/</guid>
      <description>调教背景 在VSCode使用搜索/替换时，匹配的字符会“高亮”（高亮个屁），知道自己当前搜到到什么位置，如果匹配字符较少还好，如果匹配太多，默认的高亮就很难发现当前已经搜索到什么位置了。比如我当前在搜索“搜索”这两个字：
大家还能看到我当前搜索到哪了吗？
但是如果设置成这样呢？
配置 搜索匹配时高亮颜色 添加如下配置：
&amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;editor.findMatchBackground&amp;#34;: &amp;#34;#ff0000&amp;#34;, } 表示搜索匹配时高亮，高亮颜色为红色。自己可以选择合适的颜色。
搜索结果高亮 与上面不同的是，搜索时会高亮所有的结果，但是点击箭头匹配到当前结果时就是上面的高亮，其余未匹配的状态就是下面的高亮：
&amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;editor.findMatchHighlightBackground&amp;#34;: &amp;#34;#ff00ff&amp;#34;, } 选择时颜色 &amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;editor.selectionBackground&amp;#34;: &amp;#34;#2f00ff&amp;#34;, } 范围搜索时背景颜色 有时候搜索不是全局搜索，是在自己选中的范围内搜索，那这个范围也是可以高亮的，开启范围搜索需要点击搜索框的按钮，如图所示：
&amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;editor.findMatchHighlightBackground&amp;#34;: &amp;#34;#ff00ff&amp;#34;, &amp;#34;editor.findRangeHighlightBackground&amp;#34;: &amp;#34;#ff9900&amp;#34; } </description>
    </item>
    <item>
      <title>编译错误以英文输出</title>
      <link>http://localhost:8888/posts/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%BB%A5%E8%8B%B1%E6%96%87%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 16 Aug 2022 22:31:43 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%BB%A5%E8%8B%B1%E6%96%87%E8%BE%93%E5%87%BA/</guid>
      <description>因为终端配置的原因，编译的结果输出是中文，这样搜索问题不如英文的表述精确。配置终端的语言为英文，就可以输出英文。
export LANG=en_US </description>
    </item>
    <item>
      <title>保持 SSH 连接</title>
      <link>http://localhost:8888/posts/%E4%BF%9D%E6%8C%81ssh%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Sat, 13 Aug 2022 20:28:57 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BF%9D%E6%8C%81ssh%E8%BF%9E%E6%8E%A5/</guid>
      <description>SSH 总是被强行中断，尤其是用 VSCode 代码写的好好的，突然刷新窗口，不仅效率低，更惹人恼火。
可以通过配置服务端或客户端的 SSH 来保持 SSH 链接：
方法一：配置服务端 可以在服务端配置，让 server 每隔 30 秒向 client 发送一个 keep-alive 包来保持连接：
vim /etc/ssh/sshd_config ClientAliveInterval 30 ClientAliveCountMax 60 第二行配置表示如果发送 keep-alive 包数量达到 60 次，客户端依然没有反应，则服务端 sshd 断开连接。如果什么都不操作，该配置可以让连接保持 30s*60，30 min
重启本地 ssh
sudo service ssh restart 如果找不到 ssh,”Failed to restart ssh.service: Unit ssh.service not found.” ，需要安装
sudo apt-get install openssh-server 方法二：配置客户端 如果服务端没有权限配置，或者无法配置，可以配置客户端 ssh，使客户端发起的所有会话都保持连接：
vim /etc/ssh/ssh_config ServerAliveInterval 30 ServerAliveCountMax 60 本地 ssh 每隔 30s 向 server 端 sshd 发送 keep-alive 包，如果发送 60 次，server 无回应断开连接。</description>
    </item>
    <item>
      <title>VSCode 隐藏编辑页面右上角的按钮</title>
      <link>http://localhost:8888/posts/vscode%E9%9A%90%E8%97%8F%E7%BC%96%E8%BE%91%E9%A1%B5%E9%9D%A2%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E6%8C%89%E9%92%AE/</link>
      <pubDate>Tue, 02 Aug 2022 22:10:55 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E9%9A%90%E8%97%8F%E7%BC%96%E8%BE%91%E9%A1%B5%E9%9D%A2%E5%8F%B3%E4%B8%8A%E8%A7%92%E7%9A%84%E6%8C%89%E9%92%AE/</guid>
      <description>随着插件越装越多，标签栏右侧的按钮也越来越多，严重缩小了标题栏显示范围。这片按钮区域又有最大长度的限制，当按钮太多，就会隐藏到下拉菜单里（最右侧的三个点）。这样就会导致一些常用的按钮被隐藏，而不常用的按钮又占地方。那么怎样才能隐藏不需要的按钮呢？
&amp;#34;gitlens.menus&amp;#34;: { &amp;#34;editorGroup&amp;#34;: { &amp;#34;blame&amp;#34;: false, &amp;#34;compare&amp;#34;: true }, }, </description>
    </item>
    <item>
      <title>解决 VS Code 终端使用 git bash 时中文乱码</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vs-code%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8git-bash%E6%97%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Sat, 16 Jul 2022 21:59:50 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vs-code%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8git-bash%E6%97%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>保留现场 Windows 环境下，使用 VSCode 的终端时，中文显示为乱码，如使用git status命令查看修改文件时，中文文件名就无法正常显示： 探究原因 因为终端被替换成了 git bash，它对所有非英文的字符进行了转义。
官方文档提到：
输出路径的命令（例如ls-files、diff）将通过将路径名括在双引号中并以与 C 转义控制字符相同的方式用反斜杠转义这些字符来引用路径名中的异常字符（例如\t用于 TAB, \n 表示LF，\\表示反斜杠）或值大于 0x80 的字节（例如，八进制 \302\265 表示 UTF-8 中的“micro”）。如果此变量设置为 false，则高于 0x80 的字节不再被视为异常。无论此变量的设置如何，双引号、反斜杠和控制字符总是被转义。一个简单的空格字符不被认为是异常的。许多命令可以使用 -z 选项完全逐字输出路径名。默认值是 true。
解决方法 命令行输入，取消转义：
git config --global core.quotepath false </description>
    </item>
    <item>
      <title>VSCode 设置终端为 Gitbash</title>
      <link>http://localhost:8888/posts/vscode%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%B8%BAgitbash/</link>
      <pubDate>Tue, 24 May 2022 14:42:48 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E8%AE%BE%E7%BD%AE%E7%BB%88%E7%AB%AF%E4%B8%BAgitbash/</guid>
      <description>设置终端为 Gitbash 用惯了 Linux 终端的命令，Windows 的 shell 真的太不顺手了，但是 Gitbash 很多命令相似，可以将默认的 shell 换成 Gitbash。
打开settings.json配置文件，添加如下
&amp;#34;terminal.integrated.profiles.windows&amp;#34;: { &amp;#34;PowerShell -NoProfile&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;PowerShell&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;-NoProfile&amp;#34; ] }, &amp;#34;Git-Bash&amp;#34;: { &amp;#34;path&amp;#34;: &amp;#34;D:\\Software\\Git\\bin\\bash.exe&amp;#34;, //bin路径下的bash，不是git-bash.exe。否则会打开外部窗口 &amp;#34;args&amp;#34;: [] } }, &amp;#34;terminal.integrated.defaultProfile.windows&amp;#34;: &amp;#34;Git-Bash&amp;#34;, 修改终端配色 打开Base16 Terminal Colors for Visual Studio Code，选择一款配置复制
打开 VScodesettings.json，替换如下
&amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;terminal.background&amp;#34;:&amp;#34;#1C2023&amp;#34;, &amp;#34;terminal.foreground&amp;#34;:&amp;#34;#C7CCD1&amp;#34;, &amp;#34;terminalCursor.background&amp;#34;:&amp;#34;#C7CCD1&amp;#34;, &amp;#34;terminalCursor.foreground&amp;#34;:&amp;#34;#C7CCD1&amp;#34;, &amp;#34;terminal.ansiBlack&amp;#34;:&amp;#34;#1C2023&amp;#34;, &amp;#34;terminal.ansiBlue&amp;#34;:&amp;#34;#AE95C7&amp;#34;, &amp;#34;terminal.ansiBrightBlack&amp;#34;:&amp;#34;#747C84&amp;#34;, &amp;#34;terminal.ansiBrightBlue&amp;#34;:&amp;#34;#AE95C7&amp;#34;, &amp;#34;terminal.ansiBrightCyan&amp;#34;:&amp;#34;#95AEC7&amp;#34;, &amp;#34;terminal.ansiBrightGreen&amp;#34;:&amp;#34;#95C7AE&amp;#34;, &amp;#34;terminal.ansiBrightMagenta&amp;#34;:&amp;#34;#C795AE&amp;#34;, &amp;#34;terminal.ansiBrightRed&amp;#34;:&amp;#34;#C7AE95&amp;#34;, &amp;#34;terminal.ansiBrightWhite&amp;#34;:&amp;#34;#F3F4F5&amp;#34;, &amp;#34;terminal.ansiBrightYellow&amp;#34;:&amp;#34;#AEC795&amp;#34;, &amp;#34;terminal.ansiCyan&amp;#34;:&amp;#34;#95AEC7&amp;#34;, &amp;#34;terminal.ansiGreen&amp;#34;:&amp;#34;#95C7AE&amp;#34;, &amp;#34;terminal.ansiMagenta&amp;#34;:&amp;#34;#C795AE&amp;#34;, &amp;#34;terminal.ansiRed&amp;#34;:&amp;#34;#C7AE95&amp;#34;, &amp;#34;terminal.ansiWhite&amp;#34;:&amp;#34;#C7CCD1&amp;#34;, &amp;#34;terminal.ansiYellow&amp;#34;:&amp;#34;#AEC795&amp;#34; }, 修改后效果</description>
    </item>
    <item>
      <title>解决 VSCode 配置远程连接，过程试图写入的管道不存在</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vscode%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E8%AF%95%E5%9B%BE%E5%86%99%E5%85%A5%E7%9A%84%E7%AE%A1%E9%81%93%E4%B8%8D%E5%AD%98%E5%9C%A8/</link>
      <pubDate>Wed, 19 Jan 2022 23:07:49 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3vscode%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E8%AF%95%E5%9B%BE%E5%86%99%E5%85%A5%E7%9A%84%E7%AE%A1%E9%81%93%E4%B8%8D%E5%AD%98%E5%9C%A8/</guid>
      <description>保留现场 探究原因 本地记录的服务器信息和现有的产生了冲突
解决方法 方法一 将known_hosts文件的内容全部删除。
C:\Users\user name\.ssh\known_hosts
方法二 搜遍全网几乎都是上述方法，应该绝大部分人通过上述方法都能解决。如果你也跟我一样不走运，不管是重新生成公私钥，还是删除hnow_hosts都不行，那么可以尝试修改 VSCode 使用的ssh.exe。Windows 下默认使用的是环境变量里配置的OpenSSH提供的ssh.exe。你可以将环境变量里的OpenSSH删除。然后在VSCode设置里搜索remote，也就是设置插件remote ssh。
将 Path 强制设置成Git安装包内的ssh.exe
或者mobaxterm安装包内的ssh.exe
参考 Debug | VSCode | 过程试图写入的管道不存在 - CodeAntenna
VScode 通过 remote ssh 连接虚拟机 &amp;amp; 报错 过程试图写入的管道不存在（已解决）_Tasdily 的博客-CSDN 博客_vscode 过程试图写入的管道不存在</description>
    </item>
    <item>
      <title>VSCode 使用 sftp 插件上传本地文件至局域网服务器</title>
      <link>http://localhost:8888/posts/vscode%E4%BD%BF%E7%94%A8sftp%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%87%B3%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Fri, 24 Dec 2021 11:39:03 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E4%BD%BF%E7%94%A8sftp%E6%8F%92%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%87%B3%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>测试代码时经常需要上传文件至服务器端运行，每次上传都需要通过第三方传输工具如 FileZilla，有了SFTP插件，可以直接在 VSCode 上编译成功后，一键上传本地文件。
安装插件 打开插件中心，搜索sftp，安装量最高的就是我们需要的插件，点击安装。
配置插件 插件安装完成后，输入快捷键Control + Shift + P 弹出命令面板，然后输入sftp:config，回车，当前工程的.vscode文件夹下就会自动生成一个sftp.json文件，我们需要在这个文件里配置的内容可以是：
{ &amp;#34;host&amp;#34;: &amp;#34;192.168.xxx.xxx&amp;#34;, //服务器 ip &amp;#34;port&amp;#34;: 22, //端口，sftp 模式是 22 &amp;#34;username&amp;#34;: &amp;#34;&amp;#34;, //用户名 &amp;#34;password&amp;#34;: &amp;#34;&amp;#34;, //密码 &amp;#34;protocol&amp;#34;: &amp;#34;ftp&amp;#34;, //模式，sfpt 或者 ftp &amp;#34;agent&amp;#34;: null, &amp;#34;privateKeyPath&amp;#34;: null, //存放在本地的已配置好的用于登录工作站的密钥文件（也可以是 ppk 文件） &amp;#34;passphrase&amp;#34;: null, &amp;#34;passive&amp;#34;: false, &amp;#34;interactiveAuth&amp;#34;: false, &amp;#34;remotePath&amp;#34;: &amp;#34;/root/node/build/&amp;#34;, //服务器上的文件地址 &amp;#34;context&amp;#34;: &amp;#34;./server/build&amp;#34;, //本地的文件地址 &amp;#34;uploadOnSave&amp;#34;: true, //监听保存并上传 &amp;#34;syncMode&amp;#34;: &amp;#34;update&amp;#34;, &amp;#34;watcher&amp;#34;: { //监听外部文件 &amp;#34;files&amp;#34;: false, //外部文件的绝对路径 &amp;#34;autoUpload&amp;#34;: false, &amp;#34;autoDelete&amp;#34;: false }, &amp;#34;ignore&amp;#34;: [ //指定在使用 sftp: sync to remote 的时候忽略的文件及文件夹 //注意每一行后面有逗号，最后一行没有逗号 //忽略项 &amp;#34;**/.</description>
    </item>
    <item>
      <title>Clang-Format 格式化代码</title>
      <link>http://localhost:8888/posts/clang-format%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 01 Dec 2021 17:42:45 +0000</pubDate>
      <guid>http://localhost:8888/posts/clang-format%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid>
      <description>安装 Linux sudo apt-get install clang-format windows 每每到这时候就越能感受到用 Linux 作为开发环境的优势，Windows 安装就稍显复杂了。
你可以选择安装完整的 LLVM，在bin目录可以看到clang-format.exe。安装完后，将 bin 目录添加到环境变量中。
你也可以只下载clang-format.exe，从LLVM Snapshot Builds下载安装包。在下载页面的底部。同样你需要将单独下载的文件加入到环境变量中。
使用 入门使用 Linux 可以直接命令行，使用以 LLVM 代码风格格式化main.cpp, 结果直接写到main.cpp
clang g-format -i main.cpp -style=LLVM 进阶配置 如果每次编码都命令行执行一遍那也太麻烦了，而且每次修改也不止一个文件。最好的方式就是每次保存文件时自动格式化。比如 VSCode 已经内置了Clang-Format稍作配置即可实现，接下来介绍几种常见 IDE 如何配置Clang-Format。
VSCode VSCode 最常用，因为内置了Clang-Format也最容易配置。
安装C/C++插件，Ctrl+Shift+X打开应用商店，搜索C/C++找到下图插件，安装后会自动安装Clang-Format程序，无需单独下载。默认安装路径为： C:\Users\(你的用户名)\.vscode\extensions\ms-vscode.cpptools-1.7.1\LLVM\bin\clang-format.exe。 打开设置页面（左下角齿轮 - 设置），搜索format，勾选Format On Save，每次保存文件时自动格式化文档。下方的设置是决定每次格式化是整个文档，还是做过修改的内容。默认是file，对整个文档进行格式化。 仍在设置页面搜索Clang，配置如下。.clang-format文件最后详解。 效果图 QtCreator 安装Beautifier插件：帮助（Help）-关于插件（About Plugins）- Beautifier勾选，重启 QtCreator。 工具（Tool）- Beautifier，配置如图。该配置，保存文档时自动格式化，并选择Clang-Format作为格式化工具。 配置Clang-Format程序路径，如果开头已经apt install安装过，这里会自动补全。 Use predefined style可以选择内置的一些代码风格，如LLVM，Google等。 Use customized style使用自定义的一些代码风格。点击添加（Add）将配置文件粘贴进去即可，具体配置文件见最后。 别忘了点击OK保存。 Eclipse 安装cppstyle插件：Help - Eclipse Marketplace - 搜索cppstyle。</description>
    </item>
    <item>
      <title>VScode 快速添加注释模板</title>
      <link>http://localhost:8888/posts/vscode%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Wed, 29 Sep 2021 17:03:13 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/</guid>
      <description>需求 通常函数的注释一般都比较长，而且每个函数注释都格式一致，例如下面的函数注释模板。如果每次写注释都要复制一遍比较麻烦，复制完还要删除多余的字符。但是现有的编辑器一般都支持快捷输入。下面介绍在 VSCode 中如何快捷输入注释模板。
方法 Ctrl+Shift+P打开编辑器命令窗口 - 输入snippets-选择Preferences:Configure User Snippets-选择·c.json· 更改如下：
{ // Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are: // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.</description>
    </item>
    <item>
      <title>VSCode 中调试带 Makefile 文件的项目</title>
      <link>http://localhost:8888/posts/vscode%E4%B8%AD%E8%B0%83%E8%AF%95%E5%B8%A6makefile%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 06 Sep 2021 15:41:56 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E4%B8%AD%E8%B0%83%E8%AF%95%E5%B8%A6makefile%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>在调试 QEMU 时，自己需要修改源文件，但是每次修改都需要在命令行重新make编译一遍，比较麻烦，想到之前刚刚配置过tasks.json文件，可以把命令行任务配置到文件里，make命令不也一样可以加入吗？修改tasks.json文件如下：
{ &amp;#34;version&amp;#34;: &amp;#34;2.0.0&amp;#34;, &amp;#34;tasks&amp;#34;: [ { //任务的名字方便执行 &amp;#34;label&amp;#34;: &amp;#34;make qemu&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;make&amp;#34;, &amp;#34;args&amp;#34;:[ //8 线程编译 &amp;#34;-j8&amp;#34;, ], &amp;#34;options&amp;#34;: { //切换到 build 文件夹下 &amp;#34;cwd&amp;#34;: &amp;#34;${workspaceFolder}/build&amp;#34; }, }, { // 启动 qemu 供调试器连接 &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;Run Qemu Server(RISCV)&amp;#34;, //在执行这个任务前，先执行 make qemu 任务、 //这样就可以在执行调试时，自动先编译一遍 &amp;#34;dependsOn&amp;#34;: &amp;#34;make qemu&amp;#34;, &amp;#34;command&amp;#34;: &amp;#34;qemu-system-riscv64&amp;#34;, &amp;#34;args&amp;#34;: [ &amp;#34;-g&amp;#34;, &amp;#34;${workspaceFolder}/debug/${fileBasenameNoExtension}&amp;#34; ], }, ] } </description>
    </item>
    <item>
      <title>VSCode 单步调试 QEMU</title>
      <link>http://localhost:8888/posts/vscode%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95qemu/</link>
      <pubDate>Tue, 24 Aug 2021 19:24:08 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode%E5%8D%95%E6%AD%A5%E8%B0%83%E8%AF%95qemu/</guid>
      <description>了解了如何在VSCode 中调试程序，接下来我们在 VSCode 中搭建调试 QEMU 的环境。
配置 首先我们需要下载和编译 QEMU 源码
./configure --enable-debug --target-list=riscv32-softmmu,riscv32-linux-user --enable-kvm 一定要加上--enable-debug，编译出的程序才带有调试信息，不用设置安装路径，编译时会自动在 qemu 文件夹下自动创建一个build文件夹，编译后的程序也在build文件夹下。
用 VSCode 打开qemu-6.X.X文件夹，Ctrl+Shift+D打开调试配置。如果参考过VSCode 中调试程序这篇文章，接下来就很容易。我们只需要将launch.jason文件中的program属性改为${workspaceFolder}/build/qemu-system-riscv32即可。
调试 打开qemu-6.X.X/softmmu/main.c文件，在main函数入口处打上断点，即可开始调试。
现在只需要点击屏幕上的图标，就可以快速的进行单步调试。
如果需要进行命令行操作，在屏幕下方打开DEBUG CONSOLE，输入-exec+正常命令行下的命令即可在命令行中进行更多的调试。如查看断点信息-exec info breakpoints</description>
    </item>
    <item>
      <title>Linux(Ubuntu) 环境下安装 VSCode</title>
      <link>http://localhost:8888/posts/linux-ubuntu-%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85vscode/</link>
      <pubDate>Thu, 19 Aug 2021 09:38:22 +0000</pubDate>
      <guid>http://localhost:8888/posts/linux-ubuntu-%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85vscode/</guid>
      <description>本来不想写这一篇的，安装 VSCode 时随便搜一下就 OK 了，但是因为 APT 源中没有 VSCode，所以需要找下载网址，几次的安装经历下来，找下载网址也经历了一番折腾。今天又要安装一遍，就顺手记录一下吧。以后翻自己记录总比翻全网记录方便。
官方文档 其实最完备安装教程在官方文档里。本文也算是对官方文档的一个翻译版吧。
基于 Debian 和 Ubuntu 的发行版 如果下载了.deb 安装包，那么只需要一个命令就可以完成安装了。
sudo apt install ./&amp;lt;file&amp;gt;.deb 无奈的是，我需要在开发机安装，无法下载安装包，但是我又不想用ftp传来传去，要是apt能完成，绝不单独下载安装包。
可以使用以下脚本手动安装存储库和密钥
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &amp;gt; packages.microsoft.gpg sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/ sudo sh -c &amp;#39;echo &amp;#34;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main&amp;#34; &amp;gt; /etc/apt/sources.list.d/vscode.list&amp;#39; rm -f packages.microsoft.gpg 更新与安装
sudo apt install apt-transport-httpssudo apt updatesudo apt install code # or code-insiders </description>
    </item>
  </channel>
</rss>
