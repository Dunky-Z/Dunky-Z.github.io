<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git 实战 on PaperMod</title>
    <link>http://localhost:8888/categories/git-%E5%AE%9E%E6%88%98/</link>
    <description>Recent content in Git 实战 on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 03 Dec 2022 18:52:10 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/categories/git-%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git clone下来的分支不完整</title>
      <link>http://localhost:8888/posts/git-clone%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%8D%E5%AE%8C%E6%95%B4/</link>
      <pubDate>Sat, 03 Dec 2022 18:52:10 +0000</pubDate>
      <guid>http://localhost:8888/posts/git-clone%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%8D%E5%AE%8C%E6%95%B4/</guid>
      <description>将仓库git clone到本地后发现本地缺失了一些远程仓库的分支。一般发生在git clone —depth 1设置克隆深度时发生。因为有些大型项目一次性克隆容易出错，所以只克隆一层深度。
如远程有分支branch_a，克隆下来后使用git branch -av命令查看所有分支没有显示该分支，该如何解决？
git remote set-branches origin &amp;#39;branch_a&amp;#39; git fetch -v </description>
    </item>
    <item>
      <title>手把手教你向开源社区提 Patch</title>
      <link>http://localhost:8888/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%90%91%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90patch/</link>
      <pubDate>Sun, 20 Nov 2022 15:11:57 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%90%91%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90patch/</guid>
      <description>提交补丁的最佳实践 本文翻译自官方教程Git - MyFirstContribution，原文包含开发到提交的整个周期。但是想要提交的人应该都已经开发完代码了，所以本文用自己的实际例子重新写了一遍，省去了开发代码等流程，重点介绍如何使用 git send-email。
环境准备 下载 OpenSBI 仓库 git clone https://github.com/riscv-software-src/opensbi.git cd opensbi 安装依赖 要从源代码构建 OpenSBI：
make 注：OpenSBI 的构建是可并行的。上面的命令可以添加-j#参数，如-j12。
确认要解决的问题 在本文档中，我们将模拟提交一个简单的 Patch，.gitignore文件可以过滤不必要的文件，现在使用 VSCode 的用户越来越多，使用 VSCode 开发时常常会生成.vscode目录，但是这些文件不该被推送至远程，原仓库中的.gitignore文件中没有过滤该文件，我们给他加上。
为了能够模拟一次发送多个commit的场景，我们将再添加一个.so用来过滤编译过程中生成的.so文件。
建立工作空间 让我们先建立一个开发分支来进行我们的修改。
git checkout -b update_gitignore origin/master 我们将在这里做一些提交，以演示如何将一个带有多个补丁的主题同时送审。
实现代码 过滤 .vscode 打开文件.gitignore，为该文件添加/.vscode/：
# Object files *.o *.a *.dep #Build &amp;amp; install directories build/ install/ # Development friendly files tags cscope* /.vscode/ 为以上修改做一次提交：
$ git status On branch update_gitignore Your branch is up to date with &amp;#39;origin/master&amp;#39;.</description>
    </item>
    <item>
      <title>如何使用 git-send-mail 给开源社区提交 Patch</title>
      <link>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git-send-mail%E7%BB%99%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4patch/</link>
      <pubDate>Wed, 28 Sep 2022 21:08:29 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git-send-mail%E7%BB%99%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4patch/</guid>
      <description>需求背景 如果参与 Linux、QEMU 或者 OpenSBI 等开源项目，不能通过在 GitHub 或者 Gitlab 平台提交pull request。而是需要将修改的代码，通过 Patch 形式提交到对应的listserv供 Maintainer 审核。那么如何创建 Patch 并发送呢？
这里以向 OpenSBI 提交一个 Patch 为例。
创建 Patch 首先将官方 Repository，Fork 到自己的 GitHub：
回到自己的主页，找到刚刚 Fork 的 Repository，将其 Clone 到本地：
修改代码与正常开发流程一直，修改完在git commit时需要加上Signed-off-by字段，因为 Merge 代码的人通常不是提交代码的人，有该字段才能证明是你修改了对应的代码。
-s参数会自动加上Signed-off-by字段：
$ git commit -s doc:fix some typos Signed-off-by: dominic &amp;lt;dominic@gmail.com&amp;gt; # Please enter the commit message for your changes. Lines starting # with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.</description>
    </item>
    <item>
      <title>Git hooks 钩子的使用</title>
      <link>http://localhost:8888/posts/git-hooks%E9%92%A9%E5%AD%90%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 30 May 2022 12:16:11 +0000</pubDate>
      <guid>http://localhost:8888/posts/git-hooks%E9%92%A9%E5%AD%90%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>Git hooks 简介 Git 能在特定的重要动作发生时触发自定义脚本。比如，commit之前检查commit message是否符合约定的格式，push之前检查代码格式是否正确，是否编译通过等等。Git 就提供了hooks这样的机制。
我们在哪能找到hooks呢？在初始化代码仓库git init时，Git 会自动为我们创建一个.git/hooks目录，里面存放了所有的钩子。因为.git是隐藏目录，显示隐藏目录后就可以找到hooks这个目录。
在 VSCode 里一般默认把.git目录排除显示，所以打开项目目录时不会显示该目录，我们可以收到在 VSCode 显示.git目录：打开设置界面，搜索exclude找到图中的设置，将.git目录从排除列表中移除，即可在 VSCode 中显示.git目录。
现在我们找到了hooks，该如何使用呢？ 所有默认的hooks都是以.sample为后缀，只需要移除.sample即可激活hooks。
随便打开一个hooks文件，我们可以发现，实际是hooks就是一个个shell脚本。这些脚本会在特定的动作发生时被执行。示范的这些hooks都是shell脚本，实际上只要是文件名正确的可执行脚本都可以使用，如将pre-push内容改为python, Ruby等等脚本都可以。
如何使用一个 hooks 以pre-commit这个hooks为例，来示范一下如何使用 Git hooks。
打开.git/hooks/pre-commit.sample，这个hooks的大体功能是检查文件名是否包含非ASCII字符，如果包含，则无法执行commit操作，并提示用户修改文件名。
删除pre-commit.sample的后缀
➜ mv .git/hooks/pre-commit.sample .git/hooks/pre-commit 添加一个有汉字的文件名，如测试.md
➜ touch 测试.md 将新文件提交
➜ git add 测试.md➜ git commit -m &amp;#34;测试&amp;#34;Error: Attempt to add a non-ASCII file name.This can cause problems if you want to work with people on other platforms.To be portable it is advisable to rename the file.</description>
    </item>
    <item>
      <title>Git-git pull 与 git pull --rebase 的区别</title>
      <link>http://localhost:8888/posts/git-git-pull%E4%B8%8Egit-pull-rebase%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 29 Nov 2021 16:09:12 +0000</pubDate>
      <guid>http://localhost:8888/posts/git-git-pull%E4%B8%8Egit-pull-rebase%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>git pull == git fetch + git merge git pull --rebase == git fetch + git rebase 拆解来看这两个命令就是在拉取远端代码后，是合并还是进行变基操作。
假设当前有三个提交A,B,C，并且分支feature都与远程代码同步。
我们在feature上做了一些修改，并产生了E提交，远程也有用户进行了更新到了D提交。
此时我们需要git fetch获取最新的代码，然后git merge解决冲突后重新git add git commit，得到F提交。最后git push即可成功推送，得到如下的关系
而使用git rebase将会创建一个新的提交F，F的文件内容和上面F的一样，但我们将 E 提交废除，当它不存在（图中用虚线表示）。由于这种删除，避免了菱形的产生，保持提交曲线为直线。
在rebase的过程中，有时也会有冲突，这时 Git 会停止rebase并让用户去解决冲突，解决完冲突后，用git add添加修改的文件，然后不用执行git commit，直接执行git rebase --continue，这样 git 会继续 apply 余下的补丁。</description>
    </item>
    <item>
      <title>Git 同一文件被多人修改了文件名该如何处理</title>
      <link>http://localhost:8888/posts/git%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E8%A2%AB%E5%A4%9A%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E6%96%87%E4%BB%B6%E5%90%8D%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 28 Nov 2021 21:55:24 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E8%A2%AB%E5%A4%9A%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E6%96%87%E4%BB%B6%E5%90%8D%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description>用户一修改了文件名，并推送到了远端。用户二也修改了文件名，在进行推送时，就会被拒绝。
拉取最新代码后发现有相同的文件，只是文件名不同。index1.htm和index2.htm两个文件内容是完全相同的。
查看当前状态，可知有其他想把文件名修改为index2.htm。此时只需要根据提示，删除index.htm。协商后决定保留哪一个文件，比如我们决定保留index1.htm。那么删除index2.htm。
最后在commit一次，即可顺利推送。</description>
    </item>
    <item>
      <title>Git 他人同时修改了文件名和文件内容该如何处理</title>
      <link>http://localhost:8888/posts/git%E4%BB%96%E4%BA%BA%E5%90%8C%E6%97%B6%E4%BF%AE%E6%94%B9%E4%BA%86%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 27 Nov 2021 23:07:37 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%BB%96%E4%BA%BA%E5%90%8C%E6%97%B6%E4%BF%AE%E6%94%B9%E4%BA%86%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description>用户一修改了文件名，并提交远端。 用户二修改了文件内容，也进行了推送， 当然会被无情拒绝， 解决这个问题也十分简单，Git 可以智能的感知到只是文件名被修改，只需要一个git pull命令就可以解决。弹出弹窗可以直接保存退出，默认不变就行。</description>
    </item>
    <item>
      <title>Git 不同人修改了相同文件的相同区域</title>
      <link>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E7%9B%B8%E5%90%8C%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%90%8C%E5%8C%BA%E5%9F%9F/</link>
      <pubDate>Sat, 27 Nov 2021 22:13:28 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E7%9B%B8%E5%90%8C%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%90%8C%E5%8C%BA%E5%9F%9F/</guid>
      <description>不同人修改了文件的相同区域，如果向远端推送，肯定会被拒绝。这时候就需要解决冲突，
首先拉取远端最新的代码，会提示有冲突的文件， 打开冲突的文件，git 会对冲突区域进行标记，&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;到======区域表示远端的代码。======到&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;表示本地的代码。这时候就需要自己来判断需要哪些代码，也可以增删一些内容，修改完成后将这些标识符号删除，然后保存退出。 git status查看当前状态，提示还有未合并的路径，需要进行commit操作。 及时git push当前代码。</description>
    </item>
    <item>
      <title>Git 如何合并连续的多个 commit</title>
      <link>http://localhost:8888/posts/git%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcommit/</link>
      <pubDate>Wed, 24 Nov 2021 23:18:49 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcommit/</guid>
      <description> 确定需要合并的commit 变基操作，以需要合并的commit下方的结点为基准。 交互式变基，squash表示合并到上方commit 编写合并commit的message，保留原先的不变 </description>
    </item>
    <item>
      <title>Git 不同人修改了同一文件的不同区域该如何处理</title>
      <link>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C%E5%8C%BA%E5%9F%9F%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 23 Nov 2021 22:49:46 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C%E5%8C%BA%E5%9F%9F%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description> git fetch git merge 或者 git pull </description>
    </item>
    <item>
      <title>Git 修改老旧 commit 的 message</title>
      <link>http://localhost:8888/posts/git%E4%BF%AE%E6%94%B9%E8%80%81%E6%97%A7commit%E7%9A%84message/</link>
      <pubDate>Mon, 22 Nov 2021 22:50:25 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%BF%AE%E6%94%B9%E8%80%81%E6%97%A7commit%E7%9A%84message/</guid>
      <description>以下操作仅限于维护自己的分支，不建议对团队共享的代码进行修改。
以最近三次提交为例，假设想要修改第二个提交的message。可以使用git rebase命令 git rebase -i 27d2f -i交互式变基 27d2f需要改变message的提交的父节点 弹出页面可以使用提供的命令进行操作，比如pick意思就是挑选需要的commit。本次任务需要修改message，从下方帮助文档里可以找到reword命令，可以保留commit，只修改message。
保存退出后，会弹出另外一个界面。
在这里就可以真正修改需要更新的message。保存退出即可。</description>
    </item>
    <item>
      <title>Git 修改最新 commit 的 message</title>
      <link>http://localhost:8888/posts/git%E4%BF%AE%E6%94%B9%E6%9C%80%E6%96%B0commit%E7%9A%84message/</link>
      <pubDate>Mon, 22 Nov 2021 22:44:45 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%BF%AE%E6%94%B9%E6%9C%80%E6%96%B0commit%E7%9A%84message/</guid>
      <description>commit提交后觉得描述信息不准确，想重新修改message内容，该如何操作？
git commit --amend 弹出页面就和git commit操作时的一样，将其改为新内容即可。</description>
    </item>
    <item>
      <title>Git-把本地仓库同步到 GitHub</title>
      <link>http://localhost:8888/posts/git%E6%8A%8A%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5%E5%88%B0github/</link>
      <pubDate>Thu, 23 Sep 2021 23:06:28 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E6%8A%8A%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%90%8C%E6%AD%A5%E5%88%B0github/</guid>
      <description>需求 因为现在大部分情况下是先从远程 Clone 下来代码，所以这一功能用的不多。但是如果自己想把本地已有的代码同步到远程，本文就可以解决这一的需求。
方法 GitHub 新建一个仓库，并复制 SSH 地址
git@github.com:git201901/git_learning.git git remote add 名称
pc:git-learning suling$ git remote add github git@github.com:git201901/git_learning.git 这里的github就是自定义的一个名称，用于替换后面的远程地址。方便后续git push github以及git fetch github。</description>
    </item>
    <item>
      <title>Git 不同人修改了不同的文件该如何处理</title>
      <link>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 12 Sep 2021 23:19:28 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%B8%8D%E5%90%8C%E4%BA%BA%E4%BF%AE%E6%94%B9%E4%BA%86%E4%B8%8D%E5%90%8C%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</guid>
      <description>需求 同一个项目，不同的开发者修改了不同的文件，如何解决同步冲突。
模拟 用户一修改 第一个用户新建一个分支， 以上命令就是新建一个分支feature/add_git_commands 将其与远端分支origin/feature/add_git_commands相关联，并切换到该分支。
修改 readme 文件，并推送到远端。因为新建分支时已经做了与远端关联，所以可以直接git push。
用户二修改 第二个用户，首先拉取远端分支。
git branch -v查看本地分支，保持不变，但是git branch -av查看所有分支，可以发现多了两个远端分支。 新建本地分支，保持与远端分支名相同。
此时再对与 readme 不同的文件进行修改，提交，推送都会比较顺利。因为当前分支保持fast forward。
用户二继续做开发，但是没再往远端推送代码。在此期间，用户一对远端代码进行了更新。用户二想再次推送代码，将会报错，提示当前提交不再fast forward。
解决方法 git fetch远端分支 git merge合并远端分支 因为两个用户修改的不同文件，所以合并不会产生冲突。</description>
    </item>
    <item>
      <title>Git 中添加 gitignore 并更新远程仓库</title>
      <link>http://localhost:8888/posts/git%E4%B8%AD%E6%B7%BB%E5%8A%A0gitignore%E5%B9%B6%E6%9B%B4%E6%96%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Wed, 04 Aug 2021 14:09:20 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E4%B8%AD%E6%B7%BB%E5%8A%A0gitignore%E5%B9%B6%E6%9B%B4%E6%96%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>gitignore 的作用 在使用Git版本控制时，必须要用.gitignore这个文件来告诉Git那些文件或目录不需要添加到版本控制中。通俗点说，就是不需要git push到远程仓库。
在平时开发过程中，开发目录下会有各种格式的文件，比如 C 语言除了.c源码，还会有.o目标文件，没有后缀的可执行程序等等，假如你要进行深度学习类的开发，如图像识别，需要训练大量数据，如果这些训练数据也到跟踪管理，那push一次就可以下班回家了。
但是我们怎么让Git知道哪些文件需要跟踪，哪些文件不需要呢，这时候.gitignore文件就起作用了。
常用规则 简单介绍一下常用的规则，虽然后面有现成的模板，但是我们还是了解一下常用规则，能看得懂.gitignore里写了啥。也方便自己编写一些规则适应自己的工作。
/test/ # 过滤整个test文件夹*.o # 过滤所有.o文件/test/hello.o # 过滤test文件夹下hello.o这个文件!src/ # 不过滤src这个文件夹!*.c # 不过滤.c文件 通过 gitignore 文件更新远程仓库 上面说到我们在不同环境下需要制定不同的规则，但是每次都要重新写一遍，又或者不知道制定什么样的规则，还是挺麻烦的。
首先推荐一个.gitignore模板仓库，在平时工作学习中遇到的各种语言环境下的模板都能找到。这是广大开发人员总结的一些规则。
最近在学习Qt，在所有模板中搜索关键字，找到了Qt.gitignore这个模板打开并复制，在自己本地仓库里新建一个.gitignore文件，将复制的内容粘贴进去。
现在就要解决如何更新远程仓库的内容，因为我在使用.gitignore文件之前已经向远程push过了，现在需要删除不需要的文件。
git rm -r --cached . rm就是Linux下常用的删除命令，-r表示递归删除，--cached表示需要在本地端（工作区）保留文件，.表示所有文件。
git add . # 重新添加所有文件到暂存区，然后提交，推送git commit -m &amp;#34;update&amp;#34;git push </description>
    </item>
    <item>
      <title>git clone 快速下载子模块</title>
      <link>http://localhost:8888/posts/git-clone%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BD%E5%AD%90%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 28 Jul 2021 15:28:58 +0000</pubDate>
      <guid>http://localhost:8888/posts/git-clone%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BD%E5%AD%90%E6%A8%A1%E5%9D%97/</guid>
      <description>在git clone时候，如果遇到项目里有子模块通常会在下载时加上--recursive参数，一起下载。但是子模块较多，体积较大时大概率都会下载失败。
好在可以通过一些小技巧，下载国内镜像，进行加速。但是下载项目时，只是主体是国内的镜像，子模块仍然下载很慢。首先解决获取国内镜像的问题。有三个方法：
在码云 Gitee 上搜索下载
在码云上搜索同样的项目，然后用码云git 的地址下载。
加上.cnpmjs.org后缀
在地址后面加上后缀，如git clone https://github.com.cnpmjs.org/riscv/riscv-binutils-gdb.git。
使用油猴脚本获取镜像地址
如果你有油猴插件可以去greasyfork搜索安装GitHub镜像访问，加速下载这个脚本，刷新GitHub仓库界面就会多出几个镜像地址，一般下载都会快好几倍。
再来解决子模块下载速度慢的问题，下载项目时，先不加--recursive参数，只下载项目的本题。
下载完后找到.gitmodules文件，这是一个隐藏文件，需要显示隐藏文件，Linux 下使用快捷键Ctrl+H。用vim打开后可以得到：
这个文件里写入了子模块的下载信息，url就是下载地址。我们把所有子模块中的 URL 地址同样加上.cnpmjs.org后缀。或者使用上述三种方式得到的镜像地址。
然后利用git submodule sync更新子项目对应的url
最后再git submodule update --init --recursive，即可快速下载所有子项目。</description>
    </item>
    <item>
      <title>Git 踩坑记录</title>
      <link>http://localhost:8888/posts/git%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 23 Jul 2021 11:55:57 +0000</pubDate>
      <guid>http://localhost:8888/posts/git%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>创建仓库时没有加入 gitignore 文件，上传了不需要的文件，后添加了 gitignore 文件如何同步远程与本地的文件（自动删除不需要的文件） # 注意有个点“.” 取消版本控制 git rm -r --cached . 重新添加 git add -A 重新提交 git commit -m &amp;#34;update .gitignore&amp;#34; Git rm 和 rm &amp;ndash;cached 区别 rm ：当需要删除暂存区或分支上的文件，同时工作区不需要这个文件
rm --cached：当需要删除暂存区或分支上的文件，同时工作区需要这个文件，但是不需要被版本控制。就是本地需要保留，但是远程不保留
推送空文件夹到远程仓库 在需要推送的空文件下创建&amp;quot;.gitkeep&amp;quot;文件 在&amp;quot;.gitignore&amp;quot;文件中编写规则 !.gitkeep
克隆指定分支代码 git clone -b master https://github.com/Dunky-Z/Dunky-Z.github.io.git master就是分支名</description>
    </item>
  </channel>
</rss>
