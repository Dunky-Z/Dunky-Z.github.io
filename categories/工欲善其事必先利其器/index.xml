<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>工欲善其事必先利其器 on PaperMod</title>
    <link>http://localhost:8888/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</link>
    <description>Recent content in 工欲善其事必先利其器 on PaperMod</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Apr 2024 21:08:03 +0000</lastBuildDate>
    <atom:link href="http://localhost:8888/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FRP 内网穿透</title>
      <link>http://localhost:8888/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
      <pubDate>Mon, 01 Apr 2024 21:08:03 +0000</pubDate>
      <guid>http://localhost:8888/posts/frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</guid>
      <description>懒得自己搭建了，还要准备一台公网服务器，直接找第三方服务商。签到免费送流量，不过流量不多，不过用来穿透个小服务还是够的。
https://chickfrp.com?affcode=2649EJBPNQ https://console.openfrp.net/ 创建隧道，下载配置文件如下：
[common] protocol=tcp server_addr=ali-shanghai-a.chickfrp.com server_port=7000 user=xxxxxxxxx token=xxxxxxxx tcp_mux=true [ openai ] type= tcp remote_port= 10006 local_ip= 192.168.1.9 local_port= 3322 use_compression=false use_encryption=false 配置客户端，下面以 Linux 为例，因为需要配置 Docker 服务，所以做个简单记录。
# 下载 frp 应用，解压后 frpc 是客户端，frps 是服务端，今天我们只用到 frpc wget https://github.com/fatedier/frp/releases/download/v0.56.0/frp_0.56.0_linux_amd64.tar.gz tar zxvf frp_0.56.0_linux_amd64.tar.gz 将服务商提供的配置文件复制到frpc.toml中。服务商提供的可能是旧版本的 frp 配置，是ini格式，需要转换成toml格式。有能力可以自己稍微改一下格式就行，不会的话，可以用在线转换工具，比如：https://toml.info/zh/ini-to-toml。
简单启动：
./frpc -c ./frpc.toml 2024-04-01 21:04:29.326 [I] [client/control.go:170] [19341bf77b5454753237] [SDSDasdaderf.openai] start proxy success 配置 Docker-compose 一键启动，将配置文件frpc.toml映射到容器中。
version: &amp;#34;3.7&amp;#34; services: frp: image: stilleshan/frpc:latest container_name: frp volumes: - /path/to/frpc.</description>
    </item>
    <item>
      <title>GitHub Copilot CLI命令行AI工具</title>
      <link>http://localhost:8888/posts/github-copilot-cli%E5%91%BD%E4%BB%A4%E8%A1%8Cai%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 24 Mar 2024 09:44:16 +0000</pubDate>
      <guid>http://localhost:8888/posts/github-copilot-cli%E5%91%BD%E4%BB%A4%E8%A1%8Cai%E5%B7%A5%E5%85%B7/</guid>
      <description>GitHub Copilot CLI 是一个命令行工具，它允许你在终端中使用 GitHub Copilot。你可以使用它来获取代码建议，这些建议是由 OpenAI 的 GPT-4 模型生成的。这个工具可以在任何支持命令行的环境中使用，包括 Visual Studio Code 的集成终端。
参考官方文档：Using GitHub Copilot in the CLI - GitHub Docs
安装 前提：
需要订阅Github Copilot，每月$10。
需要安装GH CLI
订阅自行解决，接下来安装GH CLI：
sudo mkdir -p -m 755 /etc/apt/keyrings &amp;amp;&amp;amp; wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg &amp;gt; /dev/null \ &amp;amp;&amp;amp; sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \ &amp;amp;&amp;amp; echo &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&amp;#34; | sudo tee /etc/apt/sources.list.d/github-cli.list &amp;gt; /dev/null \ &amp;amp;&amp;amp; sudo apt update \ &amp;amp;&amp;amp; sudo apt install gh -y 如果没法安装，可以下载deb文件手动安装。Release GitHub CLI 2.</description>
    </item>
    <item>
      <title>RemoteX11 远程调试带GUI应用</title>
      <link>http://localhost:8888/posts/remotex11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6gui%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 03 Mar 2024 20:45:56 +0000</pubDate>
      <guid>http://localhost:8888/posts/remotex11-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B8%A6gui%E5%BA%94%E7%94%A8/</guid>
      <description>Windows上通过WSL2进行Linux开发，但是有时候需要开发带GUI的引用，这样就需要将图像转发。
配置Windows 下载安装XMing，启动Xlaunch。
选择MultiWindow 设置Display number为10（可以自行设置，主要是需要和后面在WSL2中设置的变量保持一致） 选择Start no client（Windows的XMing是被动等待接收图像数据，所以选择该项） 一直下一页，其余保持默认，点击完成即可。 配置VSCode 安装RemoteX11插件，直接在插件中心搜索安装即可。
打开设置页面，搜索Remote x11，找到如下配置项，将Display Number配置为10
配置WSL2 安装xclock用于测试
sudo apt-get install xclock 设置环境变量
export DISPLAY=localhost:10.0 # 或者 export DISPLAY=:0 运行xclock查看结果</description>
    </item>
    <item>
      <title>VSCode Linux内核源码阅读环境</title>
      <link>http://localhost:8888/posts/vscode-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 14 Dec 2023 10:02:32 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode-linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83/</guid>
      <description>安装Clangd插件 在VSCode中，你可以通过以下步骤安装Clangd插件：
打开VSCode； 点击左侧的插件图标（Ctrl+Shift+X）； 搜索“Clangd”插件； 点击“安装”按钮。 生成compile_commands.json 对于make项目来说，常规来讲，可以使用Bear来对源码生成compile_commands.json。首先安装Bear：
sudo apt install bear 然后在项目根目录下执行：
bear make -j32 编译完成后，会在项目根目录下生成compile_commands.json文件。
对于CMAKE项目来说，可以在CMakeLists.txt中添加以下语句，然后重新编译项目即可生成compile_commands.json文件： set(CMAKE_EXPORT_COMPILE_COMMANDS True)
配置Clangd插件 进入到项目目录下，下载配置文件：
git clone --depth 1 https://github.com/Dunky-Z/dot-vscode.git .vscode 主要修改--compile-commands-dir参数，将其修改为自己的路径。
随便打开内核源码文件，clangd将会自动生成索引，并将索引文件.idx保存在项目根目录下的.cache目录中。
Linux-5.4 ├── .cache │ └── clangd ├── .config ├── .git 如果生成了索引文件，那么说明配置成功，可以打开源码文件看看是否能够正常跳转。</description>
    </item>
    <item>
      <title>ocrmypdf 让 PDF 可搜索</title>
      <link>http://localhost:8888/posts/ocrmypdf-%E8%AE%A9pdf%E5%8F%AF%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Tue, 19 Sep 2023 19:51:18 +0000</pubDate>
      <guid>http://localhost:8888/posts/ocrmypdf-%E8%AE%A9pdf%E5%8F%AF%E6%90%9C%E7%B4%A2/</guid>
      <description>买的一些课程配套资料都是 PDF 格式的，为了防止盗版都事先用的图片转成的 PDF，这样 PDF 里的内容既没法复制也没法搜索，在查找资料里的关键词的时候就很不方便，所以就想着把这些 PDF 转成可搜索的 PDF。找到了一款工具叫做 ocrmypdf，可以把 PDF 转成可搜索的 PDF，而且还支持中文，这里记录一下使用方法。详细使用文档可以参考官方文档 OCRmyPDF documentation。
安装 sudo apt install ocrmypdf 使用 指定 OCR 的语言 安装语言包
sudo apt install tesseract-ocr-chi-sim 查看是否安装成功
$ tesseract --list-langs List of available languages (3): chi_sim eng osd 注意参数 -l 后面的语言包名称是下划线，而不是短横线。
ocrmypdf -l chi_sim input.pdf output.pdf $ ocrmypdf -l chi_sim --redo-ocr input.pdf output.pdf Scanning contents: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████| 752/752 [00:14&amp;lt;00:00, 51.36page/s] Start processing 24 pages concurrently 33 redoing OCR 26 [tesseract] lots of diacritics - possibly poor OCR 54 [tesseract] lots of diacritics - possibly poor OCR 88 [tesseract] lots of diacritics - possibly poor OCR 119 [tesseract] lots of diacritics - possibly poor OCR 203 [tesseract] lots of diacritics - possibly poor OCR 256 [tesseract] lots of diacritics - possibly poor OCR 265 [tesseract] lots of diacritics - possibly poor OCR 347 [tesseract] lots of diacritics - possibly poor OCR 376 [tesseract] lots of diacritics - possibly poor OCR 383 [tesseract] lots of diacritics - possibly poor OCR 386 [tesseract] lots of diacritics - possibly poor OCR 402 [tesseract] lots of diacritics - possibly poor OCR 404 [tesseract] lots of diacritics - possibly poor OCR 403 [tesseract] lots of diacritics - possibly poor OCR 412 [tesseract] lots of diacritics - possibly poor OCR 415 [tesseract] lots of diacritics - possibly poor OCR 410 [tesseract] lots of diacritics - possibly poor OCR 439 [tesseract] lots of diacritics - possibly poor OCR 519 [tesseract] lots of diacritics - possibly poor OCR 526 [tesseract] lots of diacritics - possibly poor OCR 587 [tesseract] lots of diacritics - possibly poor OCR 591 [tesseract] lots of diacritics - possibly poor OCR 595 [tesseract] lots of diacritics - possibly poor OCR 607 [tesseract] lots of diacritics - possibly poor OCR 644 [tesseract] lots of diacritics - possibly poor OCR 661 [tesseract] lots of diacritics - possibly poor OCR 682 [tesseract] lots of diacritics - possibly poor OCR 720 [tesseract] lots of diacritics - possibly poor OCR 742 [tesseract] lots of diacritics - possibly poor OCR OCR: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 752.</description>
    </item>
    <item>
      <title>yq 为 yaml 文件内容排序</title>
      <link>http://localhost:8888/posts/yq%E4%B8%BAyaml%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 01 Sep 2023 21:37:25 +0000</pubDate>
      <guid>http://localhost:8888/posts/yq%E4%B8%BAyaml%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%8E%92%E5%BA%8F/</guid>
      <description>背景 配置 yaml 文件时会遇到需要将配置的内容按照键值排序的情况，比如下面这样riscv_fork_list.yaml：
packages: - name: accumulo - name: abseil-cpp - name: acpica-tools - name: acpid - name: activemq - name: afflib - name: adcli - name: adwaita-icon-theme - name: aide - name: alsa-lib - name: amtk - name: anaconda - name: apache-sshd - name: annobin - name: antlr3 - name: apache-commons-csv - name: aom - name: apache-commons-beanutils - name: apache-commons-daemon - name: apache-commons-el - name: apache-commons-exec - name: apache-commons-jexl - name: apache-poi - name: apache-rat 我想按照 name 的字母顺序排序，可以使用 yq 工具来实现。</description>
    </item>
    <item>
      <title>解决复制 Markdown 文本到思源笔记无法转义为 Markdown 格式</title>
      <link>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Fri, 01 Sep 2023 20:25:05 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E8%A7%A3%E5%86%B3%E5%A4%8D%E5%88%B6markdown%E6%96%87%E6%9C%AC%E5%88%B0%E6%80%9D%E6%BA%90%E7%AC%94%E8%AE%B0%E6%97%A0%E6%B3%95%E8%BD%AC%E4%B9%89%E4%B8%BAmarkdown%E6%A0%BC%E5%BC%8F/</guid>
      <description>问题描述 在 VSCode 中编辑 Markdown 文本，复制到思源笔记后，思源笔记无法转义为 Markdown 格式。会变成一个代码块，但是代码块内的内容并不是复制的内容。
比如上面这段话复制到思源笔记成了下图这样：
但是我需要的是能够转义为 Markdown 的阅读模式。
解决方法 问题的原因在于 VSCode 复制的文本是带格式的，而思源笔记默认的粘贴模式是纯文本模式，所以会出现上面的问题。
解决方法就是从 VSCode 复制的内容为纯文本，一种可以把文本复制到 txt 文件中，再复制，但是比较麻烦。
第二种方法是使用 VSCode 的插件 Copy Plain Text，搜索下载后，默认快捷键为 Ctrl+Alt+C，可以复制为纯文本。
再次粘贴到思源笔记中，就可以转义为 Markdown 格式了。</description>
    </item>
    <item>
      <title>Windows 端口映射</title>
      <link>http://localhost:8888/posts/windows%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</link>
      <pubDate>Mon, 28 Aug 2023 23:24:53 +0000</pubDate>
      <guid>http://localhost:8888/posts/windows%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</guid>
      <description>命令行 在 Windows 中，可以使用 netsh 命令来添加、查看和删除端口转发规则。
要添加一个端口转发规则，可以使用以下命令：
netsh interface portproxy add v4tov4 listenaddress=&amp;lt;local_address&amp;gt; listenport=&amp;lt;local_port&amp;gt; connectaddress=&amp;lt;remote_address&amp;gt; connectport=&amp;lt;remote_port&amp;gt; 其中：
&amp;lt;local_address&amp;gt;是本地监听的地址（可以是 IP 地址或 0.0.0.0 表示所有地址）。 &amp;lt;local_port&amp;gt;是本地监听的端口。 &amp;lt;remote_address&amp;gt;是转发连接到的远程地址。 &amp;lt;remote_port&amp;gt;是转发连接到的远程端口。 例如，要将本地的 8080 端口转发到远程服务器上的 80 端口，可以使用以下命令：
netsh interface portproxy add v4tov4 listenaddress=127.0.0.1 listenport=8080 connectaddress=192.168.0.100 connectport=80 要查看当前的端口转发规则，可以使用以下命令：
netsh interface portproxy show v4tov4 要删除特定的端口转发规则，可以使用以下命令：
netsh interface portproxy delete v4tov4 listenaddress=&amp;lt;local_address&amp;gt; listenport=&amp;lt;local_port&amp;gt; 其中的&amp;lt;local_address&amp;gt;和&amp;lt;local_port&amp;gt;应该与你想删除的规则匹配。
请注意，执行这些操作通常需要管理员权限。
GUI 使用开源工具PortProxyGUI可以在 UI 界面快速增删改查端口映射。</description>
    </item>
    <item>
      <title>内网穿透远程访问家里的 WSL2</title>
      <link>http://localhost:8888/posts/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%AE%B6%E9%87%8C%E7%9A%84wsl2/</link>
      <pubDate>Mon, 28 Aug 2023 22:45:01 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E5%AE%B6%E9%87%8C%E7%9A%84wsl2/</guid>
      <description>背景简介 WSL2 是 Windows 的子系统，可以在 Windows 上运行 Linux，但是 WSL2 是运行在虚拟机中的，所以无法直接访问 WSL2 中的服务，比如 SSH 服务。本文介绍如何使用内网穿透工具花生壳来实现远程访问 WSL2 中的服务。
实现这一需求需要完成两个功能。
WSL2 中的服务是运行在虚拟机中的，如何将公网的访问转发到 WSL2 中。 Windows 没有公网 IP，如何通过公网来访问。 WSL2 端口转发 获取 WSL2 的 IP 地址：
hostname -I | awk &amp;#39;{print $1}&amp;#39; 172.26.13.98 Windows 自带的netsh interface portproxy可以实现端口转发。管理员身份打开 cmd，执行以下命令：
netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=2222 connectaddress=172.26.13.98 connectport=22 listenport：公网访问的端口（改一个不冲突的就行） connectaddress：WSL2 的 IP 地址 connectport：WSL2 中 SSH 服务的端口 (默认为 22，不需要更改) 开启 Windows 防火墙入站规则，管理员身份打开 cmd，执行以下命令：
netsh advfirewall firewall add rule name=WSL2 dir=in action=allow protocol=TCP localport=2222 这个命令是用于在 Windows 高级防火墙中添加一条规则。下面是对每个参数的解释：</description>
    </item>
    <item>
      <title>Docker 部署 Radarr 刮削电影</title>
      <link>http://localhost:8888/posts/docker%E9%83%A8%E7%BD%B2radarr%E5%88%AE%E5%89%8A%E7%94%B5%E5%BD%B1/</link>
      <pubDate>Thu, 17 Aug 2023 22:46:26 +0000</pubDate>
      <guid>http://localhost:8888/posts/docker%E9%83%A8%E7%BD%B2radarr%E5%88%AE%E5%89%8A%E7%94%B5%E5%BD%B1/</guid>
      <description>docker-compose.yml version: &amp;#34;3.7&amp;#34; services: radarr: container_name: radarr image: dockerproxy.com/linuxserver/radarr:latest ports: - &amp;#34;7878:7878&amp;#34; environment: - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Asia/Shanghai volumes: - /root/sharedfolder/appdata/radarr:/config - /root/sharedfolder/media:/movies - /root/sharedfolder/downloads/qbittorrent:/downloads 配置中文界面：
导入视频：</description>
    </item>
    <item>
      <title>SSH 免密登录</title>
      <link>http://localhost:8888/posts/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</link>
      <pubDate>Sat, 12 Aug 2023 09:22:56 +0000</pubDate>
      <guid>http://localhost:8888/posts/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</guid>
      <description>生成密钥对 宿主机任意下目录执行：
$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/user/.ssh/id_rsa): host2servera_id_rsa Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in host2servera_id_rsa. Your public key has been saved in host2servera_id_rsa.pub. The key fingerprint is: SHA256:OkWcw+R3x6Z2mzeYQuG033H3N9qIeym3TZKzz6YD8tQ user@ubuntu18 The key&amp;#39;s randomart image is: +---[RSA 2048]----+ | . | | = . . | | B .o. + | | .</description>
    </item>
    <item>
      <title>使用 Yadm 管理并同步配置文件 Dotfile</title>
      <link>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8yadm%E7%AE%A1%E7%90%86%E5%B9%B6%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6dotfile/</link>
      <pubDate>Sun, 30 Jul 2023 13:39:04 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8yadm%E7%AE%A1%E7%90%86%E5%B9%B6%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6dotfile/</guid>
      <description>Dotfiles 就是我们在使用软件的时候，软件为了存储我们个人偏好设置而建立的一个以 . 开头的文件。例如，vim 的配置文件就是 .vimrc，zsh 的配置文件就是 .zshrc。这些文件通常存储在用户的 home 目录中。但是，在不同的电脑上工作时，如果需要使用相同的配置，我们可以考虑使用版本控制工具来管理这些文件。或者在一台新电脑上想快速配置好环境，也可以使用版本控制工具来管理这些文件。Yadm 就可以帮助我们完成这些需求。
安装 yadm 安装 安装 yadm 非常简单，只需在终端输入以下命令：
sudo apt-get install yadm 初始化 yadm 仓库 创建一个新的 yadm 仓库很容易，只需在 home 目录中运行以下命令：
yadm init 现在，yadm 已经创建了一个空白的 git 仓库。
添加 dotfile 文件 要将现有的 dotfile 添加到 yadm 仓库中，请使用以下命令：
yadm add ~/.zshrc 一旦您完成了对要添加的文件的更改并将它们添加到 yadm 仓库中，您需要提交它们。可以使用以下命令：
yadm commit -m &amp;#34;Add .zshrc file to yadm repository&amp;#34; 建立远程仓库 使用 yadm 还可以将 dotfile 文件同步到 GitHub 等 Git 托管服务中。
登录 Github，创建一个新的仓库。例如，您可以创建一个名为 dotfile 的仓库。现在，您需要将本地仓库与远程仓库连接起来。要将本地仓库连接到远程仓库，请使用以下命令：</description>
    </item>
    <item>
      <title>VSCode 插件 REST Client 使用文档</title>
      <link>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6-rest-client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 24 Mar 2023 19:59:35 +0000</pubDate>
      <guid>http://localhost:8888/posts/vscode-%E6%8F%92%E4%BB%B6-rest-client%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</guid>
      <description>REST Client 是 VSCode 中一款非常好用的插件，能够帮助开发人员快速、方便地发送 HTTP 请求并查看响应。在本文中，我们将会详细介绍 REST Client 的使用方法。
安装 REST Client 插件 在 VSCode 中，你可以通过以下步骤安装 REST Client 插件：
打开 VSCode； 点击左侧的插件图标（Ctrl+Shift+X）； 搜索“REST Client”插件； 点击“安装”按钮。 发送 HTTP 请求 使用 REST Client 插件发送 HTTP 请求非常简单。你只需要创建一个新的.rest文本文件，将请求信息放入其中，然后使用快捷键Ctrl + Alt + R 或者右键菜单的 Send Request 选项发送请求。
下面是一个简单的 GET 请求的例子：
GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1 这个请求会获取 JSONPlaceholder API 中的一篇博客文章。
如果你想添加请求头或请求体，可以使用以下语法：
GET https://jsonplaceholder.typicode.com/posts/1 HTTP/1.1 Content-Type: application/json { &amp;#34;title&amp;#34;: &amp;#34;foo&amp;#34;, &amp;#34;body&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;userId&amp;#34;: 1 } 这个请求会在请求头中添加 Content-Type 头，请求体中包含 JSON 数据。</description>
    </item>
    <item>
      <title>如何使用 Gitlab CI Pipeline</title>
      <link>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gitlab-ci-pipeline/</link>
      <pubDate>Sat, 07 Jan 2023 11:08:19 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gitlab-ci-pipeline/</guid>
      <description>GitLab CI/CD 是一个强大的工具，可以帮助开发团队实现自动化构建、测试和部署。本文将介绍如何使用 GitLab CI/CD 的 Pipeline 功能，以实现将 Markdown 文件自动编译为 PDF 并上传至 GitLab Release 界面的功能。
准备工作 在开始使用 GitLab CI/CD 的 Pipeline 功能之前，需要进行一些准备工作。具体步骤如下：
创建 GitLab 项目：在 GitLab 上创建一个新项目，并将 Markdown 文件上传至项目的某个目录下。例如，我们将 Markdown 文件上传至项目的根目录下，并命名为 example.md。 安装 Pandoc：Pandoc 是一个用于文档转换的工具，我们将使用它将 Markdown 文件转换为 PDF。在安装 Pandoc 之前，需要先安装 LaTeX，因为 Pandoc 使用 LaTeX 进行 PDF 渲染。具体安装步骤请参考 Pandoc 和 LaTeX 的官方文档。
创建 Release：在 GitLab 上创建一个 Release，用于存储编译好的 PDF 文件。具体操作方法请参考 GitLab 的官方文档。
创建 CI/CD 配置文件：在项目根目录下创建一个.gitlab-ci.yml 文件，并在其中定义 Pipeline 的流程。
编写 CI/CD 配置文件 下面是一个样例的.gitlab-ci.yml 文件，用于实现将 Markdown 文件编译为 PDF 并上传至 GitLab Release 界面的功能。</description>
    </item>
    <item>
      <title>Markdown 嵌入 Draw.io</title>
      <link>http://localhost:8888/posts/markdown%E5%B5%8C%E5%85%A5draw-io/</link>
      <pubDate>Sat, 07 Jan 2023 10:42:06 +0000</pubDate>
      <guid>http://localhost:8888/posts/markdown%E5%B5%8C%E5%85%A5draw-io/</guid>
      <description>Markdown 是支持嵌入 HTML 的，大部分阅读器也都支持解析。Draw.io 可以导出为 HTML 格式。
文件—导出为 HTML—导出—新窗口打开—复制 HTML 代码—只保留&amp;lt;body&amp;gt;标签之间的内容，不包含&amp;lt;body&amp;gt;和&amp;lt;/body&amp;gt;。</description>
    </item>
    <item>
      <title>Markdown 表格竖线自动对齐</title>
      <link>http://localhost:8888/posts/markdown%E8%A1%A8%E6%A0%BC%E7%AB%96%E7%BA%BF%E8%87%AA%E5%8A%A8%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Sat, 24 Sep 2022 15:01:41 +0000</pubDate>
      <guid>http://localhost:8888/posts/markdown%E8%A1%A8%E6%A0%BC%E7%AB%96%E7%BA%BF%E8%87%AA%E5%8A%A8%E5%AF%B9%E9%BD%90/</guid>
      <description>需求背景 Markdown 中的表格，只要符合语法就能够正常渲染显示，但是符合语法但是 Markdown 源码却不一定易读。就如以下的这个表格，可以正常显示，但是源码在源文件中竖线不对齐，就阅读困难。
源码：
|诗名|作者|朝代| |-|-|-| |白头吟|卓文君|两汉| |锦瑟|李商隐|唐代| |登科后|孟郊|唐代| 显示效果：
诗名 作者 朝代 白头吟 卓文君 两汉 锦瑟 李商隐 唐代 登科后 孟郊 唐代 我们可以手动将其竖线对齐，如下这样就易读许多：
| 诗名 | 作者 | 朝代 | | ------ | ------ | ---- | | 白头吟 | 卓文君 | 两汉 | | 锦瑟 | 李商隐 | 唐代 | | 登科后 | 孟郊 | 唐代 | 显示效果保持一致。但是如果一个字符一个字符去手动对齐效率太低，也不符合 Markdown 设计初衷。这就用到了额外的插件，能够辅助我们完成这个工作。
Markdown All in One VSCode 插件中心搜索Markdown All in One安装。</description>
    </item>
    <item>
      <title>从零开始搭建一台 NAS 存储服务器</title>
      <link>http://localhost:8888/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0nas%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Sat, 10 Sep 2022 11:37:47 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0nas%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>技术没学多少，教程下满了硬盘，一直想专门部署 NAS 来存文件，但是一来要花钱，二来搭建 NAS 没有经验怕部署不好，没有现在硬盘直连舒适，所以将就用吧。
自从有天忘了忘了休眠电脑，一个自动备份任务开启，在 40 度的高温天，满速跑了一天，下班回来硬盘直接报废。这就加速我折腾部署 NAS 的进程。
准备阶段 威联通的几款中意的 NAS 放购物车很久了，如果硬盘没有这么早坏掉，可能在双十一就买整机了，现在离双十一还早，硬件价格都不便宜，想来想去还是买二手硬件攒一台更划算。如果买整机，硬盘加 NAS 主机就得五千大洋，只是用来存文件，部署个 Jellyfin 看电影用，属实奢侈了。
￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
买二手就得从零开始学。生命不休，折腾不止。经过一次完整的 NAS 攒机过程发现，其实 NAS 就是安装了专用系统的一台电脑而已。这个专用系统就是面向网络存储开发的，如群晖，威联通，开源的 OMV，FreeNAS 等等。
既然是一台电脑，其实攒 NAS 就和攒电脑一样，选配好以下几大件即可。
CPU 主板 散热器 机箱 内存 电源 机箱风扇 下面分别介绍在攒机过程中遇到的一些概念，参数到底是什么意思。
CPU CPU 型号字母数字都是什么意思 Intel 是英特尔的英文名称，也是目前热门的 CPU 品牌； “酷睿”代表英特尔品牌下面向普通消费者的一个 CPU 系列，一般划分为 Core（酷睿）、Pentium（奔腾）、Celeron（赛扬）、Xeon（至强）、Atom（凌动）等； i5 代表这款 CPU 定位中端，在其下面还有 i3，在其上面还有 i7 和 i9，同一代中，数字越大，性能越强；但是不同代 - 数之间，性能不能直接相比，比如 12 代的 i5 在理论性能上是强于 10 代 i7 的。 12 代表这款 CPU 的代数，说明其已经发展到第十二代了，数字越大越新； 600 这三位数字代表 Intel SKU 型号划分，一般来说 Core i7 有固定几个 SKU，比方说 700；Core i5有600/500/400；Core i3有300/100等等，一般来说数字越大说明隶属的Core系列越高级，同级别下比较，数字越大频率越高，换句话说性能就越强，比方说Core i5-8600 默认 3.</description>
    </item>
    <item>
      <title>Linux 下使用 Clash 作代理并配置开机启动</title>
      <link>http://localhost:8888/posts/linux%E4%B8%8B%E4%BD%BF%E7%94%A8clash%E4%BD%9C%E4%BB%A3%E7%90%86%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Sat, 10 Sep 2022 10:03:25 +0000</pubDate>
      <guid>http://localhost:8888/posts/linux%E4%B8%8B%E4%BD%BF%E7%94%A8clash%E4%BD%9C%E4%BB%A3%E7%90%86%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</guid>
      <description>下载安装 点击下载 Linux 版本的 Clash，下载完成后解压缩。
unzip clash-linux.zip sudo mv clash-linux /usr/local/bin/clash sudo chmod +x /usr/local/bin/clash 初步使用 下载配置文件，配置文件一般由订阅商（机场）提供，是一个 yaml 文件，编写了代理服务器的信息，以及访问规则等。这是最关键的一步。
clash-linux-amd64-v1.10.0 -f 从订阅商那获取的配置文件.ymal -d . 可以尝试在 Git clone 时使用代理，如果可以正常下载，说明代理配置成功。
git clone https://github.com/twbs/bootstrap.git --config &amp;#34;http.proxy=127.0.0.1:7890&amp;#34; # 即可正常下载 开机启动 cd ~ sudo cp /usr/local/bin/clash /etc/ sudo vim /etc/systemd/system/clash.service 添加如下内容，并保存：
[Unit] Description=Clash Daemon [Service] ExecStart=/usr/local/bin/clash -f /etc/clash/订阅的配置文件.yaml -d /etc/clash/ Restart=on-failure [Install] WantedBy=multi-user.target 启用 clash 服务
sudo systemctl enable clash.service 启动 clash 服务
sudo systemctl start clash.</description>
    </item>
    <item>
      <title>浏览器任务栏多窗口命名</title>
      <link>http://localhost:8888/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%91%BD%E5%90%8D/</link>
      <pubDate>Sun, 28 Aug 2022 08:56:28 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%A4%9A%E7%AA%97%E5%8F%A3%E5%91%BD%E5%90%8D/</guid>
      <description>需求 工作时需要开启多个标签页，在同一个窗口里打开又查找不变，于是分为多个窗口，每个窗口里的标签页工作内容一致。如所有文档放在一个窗口，需要百度，Google 搜索时用单独的一个问题搜索窗口。这样就避免每次打开窗口都要挨个点一遍。
Edge 设置 打开设置-更多工具 - 为窗口命名。即可重命名窗口
Chrome 设置 同上，路径基本一致都是在设置-更多工具中。
升级 在使用过程中发现窗口太多任务栏太挤了，Chrome 自身有标签分组的功能，其实完全可以替代窗口。也可以满足我的需求。少数派有介绍，就不造轮子了。体验一段时间确实很好用。</description>
    </item>
    <item>
      <title>编码字体与阅读字体推荐</title>
      <link>http://localhost:8888/posts/%E7%BC%96%E7%A0%81%E5%AD%97%E4%BD%93%E4%B8%8E%E9%98%85%E8%AF%BB%E5%AD%97%E4%BD%93%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Sat, 27 Aug 2022 19:59:58 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E7%BC%96%E7%A0%81%E5%AD%97%E4%BD%93%E4%B8%8E%E9%98%85%E8%AF%BB%E5%AD%97%E4%BD%93%E6%8E%A8%E8%8D%90/</guid>
      <description>编码字体 编码字体首要原则：等宽，等宽，还是 TMD 等宽！
JetBrains Mono Hack Source Code Pro Fira Mono Consolas 保底字体，基本上 Windows 电脑都有预装。
阅读字体 看多了黑体，其实有衬线的宋体才能体现中文文字之美。
思源宋体 华文中宋 中文等宽字体 对于既想要满足编程字体又想要中文书写的，有几款等宽中文字体也不错。
Sarasa Gothic / 更纱黑体 思源黑体/Source Han Sans </description>
    </item>
    <item>
      <title>Markdown 书写 PDF 输出优雅的解决方案</title>
      <link>http://localhost:8888/posts/markdown%E4%B9%A6%E5%86%99pdf%E8%BE%93%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 20 Aug 2022 08:28:03 +0000</pubDate>
      <guid>http://localhost:8888/posts/markdown%E4%B9%A6%E5%86%99pdf%E8%BE%93%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>折腾背景 Markdown 的简便性是 LaTeX 无法替代的，LaTeX 对排版的精准控制能力又是 Markdown 无法比拟的。一直在寻找一种能够将 Markdown 优雅地转换成 PDF 的解决方案，虽然早就听说也使用过 Pandoc 这把瑞士军刀，但是它太过强大，以致于一直都没用明白。只会简单的转换命令，但是实际效果并不好，最近学会了使用 LaTeX 模板的功能，这才让我眼前一亮，这才是我想要的结果。
效果演示 基础环境配置 Markdown 生成 PDF 主要需要使用 Pandoc 和 LaTeX 两个工具，具体安装方式如下：
Pandoc 的安装 Pandoc 是由 John MacFarlane 开发的标记语言转换工具，可实现不同标记语言间的格式转换。
Windows 下的安装：
下载安装包直接安装即可 如果安装了 Chocolate：choco install pandoc 如果安装了 winget：winget install pandoc Linux/FreeBSD下的安装：
Pandoc 已经包含在大部分 Linux 发行版的官方仓库中，直接使用诸如apt/dnf/yum/pacman之类的安装工具直接安装即可 macOS 下的安装：
brew install pandoc 详细的安装说明参见：官方安装文档
LaTeX 的安装 LaTeX 工具，建议安装 texlive。
Windows 下的安装： 参考该文章下载完整 texlive，注意安装后需要再安装 cjk，cjk-fonts 等相关 package Linux/FreeBSD下的安装： 使用 apt/dnf/yum/pacman/pkg 等安装工具安装 texlive、texlive-latex 等相关软件包 macOS 下的安装： 使用 HomeBrew 安装 texlive 即可 模板配置 配置 Pandoc 模板 为保证生成的 pdf 格式（自动插入封面、目录页、页眉页脚等信息），在本地环境中安装模板，具体步骤是：</description>
    </item>
    <item>
      <title>保持 SSH 连接</title>
      <link>http://localhost:8888/posts/%E4%BF%9D%E6%8C%81ssh%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Sat, 13 Aug 2022 20:28:57 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BF%9D%E6%8C%81ssh%E8%BF%9E%E6%8E%A5/</guid>
      <description>SSH 总是被强行中断，尤其是用 VSCode 代码写的好好的，突然刷新窗口，不仅效率低，更惹人恼火。
可以通过配置服务端或客户端的 SSH 来保持 SSH 链接：
方法一：配置服务端 可以在服务端配置，让 server 每隔 30 秒向 client 发送一个 keep-alive 包来保持连接：
vim /etc/ssh/sshd_config ClientAliveInterval 30 ClientAliveCountMax 60 第二行配置表示如果发送 keep-alive 包数量达到 60 次，客户端依然没有反应，则服务端 sshd 断开连接。如果什么都不操作，该配置可以让连接保持 30s*60，30 min
重启本地 ssh
sudo service ssh restart 如果找不到 ssh,”Failed to restart ssh.service: Unit ssh.service not found.” ，需要安装
sudo apt-get install openssh-server 方法二：配置客户端 如果服务端没有权限配置，或者无法配置，可以配置客户端 ssh，使客户端发起的所有会话都保持连接：
vim /etc/ssh/ssh_config ServerAliveInterval 30 ServerAliveCountMax 60 本地 ssh 每隔 30s 向 server 端 sshd 发送 keep-alive 包，如果发送 60 次，server 无回应断开连接。</description>
    </item>
    <item>
      <title>使用 Syncthing 多端丝滑同步与备份</title>
      <link>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8syncthing%E5%A4%9A%E7%AB%AF%E4%B8%9D%E6%BB%91%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Mon, 01 Aug 2022 22:48:21 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E4%BD%BF%E7%94%A8syncthing%E5%A4%9A%E7%AB%AF%E4%B8%9D%E6%BB%91%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%A4%87%E4%BB%BD/</guid>
      <description>折腾背景 一直想找一个能够快速同步手机与电脑数据的工具，因为手机云服务的空间少的可怜，所以习惯隔一段时间将手机里的照片、视频还有一些文件导出到电脑上。但是每次备份文件都得连接数据线，并且没法增量备份，得手动挑选，也还挺麻烦的。
逛 GitHub 时，无意间发现了 Syncthing，几乎符合了我所有的预期。
开源，免费，自己电脑就可以当服务器，以后入了 NAS，可以自己搭建本地服务器。 同步速度快，取决 WIFI 的速度，目前使用 30M/s，基本满速。 多端支持，除了 IOS（反正我也没有 iOS 设备，嘿嘿），几乎全平台支持，包括 NAS 及路由器。 增量同步，再也不用挑文件备份了。 话不多说，开整。
下载安装 直接进入Syncthing官网，下载安装。在 Ubuntu 下安装参考这里。Android 版本下载Syncthing。
接下来以 Windows 与 Android 手机同步为例，下载安装后，打开syncthing.exe，即可打开管理界面，或者浏览器输入http://127.0.0.1:8384也可进入管理界面。
Windows 界面：
Android 界面： 设备配对 Windows 管理页面-&amp;gt;操作-&amp;gt;显示 ID，会显示本机的二维码：
Android 手机打开应用，切换到设备界面，点击右上角加号，点击二维码标识，即可扫描二维码，完成设备添加。
如果正确添加，Windows 管理界面会显示 Android 设备：
Android 同步至 Windows 打开 Android 应用，切换到文件夹界面，点击右上角加号，配置同步的文件夹： 根据下图提示，配置应用，记得保存： 目录列表显示刚刚的配置： 点击打开，开启与远程设备 Windows 同步：
当返回时，Windows 端将会弹出通知，提示有 Android 设备的文件要分享到电脑，点击添加： 至此，Android 同步至 Windows 完成。此时在 Android 设备的文件夹中添加任意文件，都会同步到 Windows。
如果是局域网内，发现设备的速度很慢，可以尝试设置静态的 IP。手机端 -&amp;gt; 设备 -&amp;gt; 链接图标。默认为 dynamic，将其改为 Windows 的 IP 和 syncthing 的端口。如tcp://192.</description>
    </item>
    <item>
      <title>Gerrit 批量添加抄送提醒</title>
      <link>http://localhost:8888/posts/gerrit%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%8A%84%E9%80%81%E6%8F%90%E9%86%92/</link>
      <pubDate>Fri, 29 Jul 2022 13:58:27 +0000</pubDate>
      <guid>http://localhost:8888/posts/gerrit%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%8A%84%E9%80%81%E6%8F%90%E9%86%92/</guid>
      <description>背景 公司使用 Gerrit 作为 Review 平台，但是每次提交代码都需要手动添加 Reviewer，还要抄送组内成员，这种重复性劳动，程序员是绝不能容忍的。gerrit 提供了发送邮件的功能。
解决方法 官方示例：
git push ssh://john.doe@git.example.com:29418/kernel/common HEAD:refs/for/experimental%r=a@a.com,cc=b@o.com 最后的%是个分隔符，r=&#39;a@a.com表示 Reviewer 是a@a.com，cc=b@o.com表示抄送组内成员是b@o.com。
注意！邮箱之间不能有空格！
以一个仓库为例：
git push origin HEAD:refs/for/branch_dev_name%cc=zhangsan@qq.com,cc=lisi@qq.com,cc=wangerma@qq.com,cc=chenwu@qq.com 但是要这么写，岂不是把操作搞更复杂了。
终极办法，打开项目路径下的.git目录。编辑config文件：
原文件里有如下字段：
[core]repositoryformatversion = 0filemode = falsebare = falselogallrefupdates = trueignorecase = true[remote &amp;#34;origin&amp;#34;]url = git@github.com:Dunky-Z/Dunky-Z.github.io.gitfetch = +refs/heads/*:refs/remotes/origin/* 我们可以将远程仓库名换成容易区分的名字，自己随意：
[core]repositoryformatversion = 0filemode = falsebare = falselogallrefupdates = trueignorecase = true[remote &amp;#34;origin&amp;#34;]url = git@github.</description>
    </item>
    <item>
      <title>密码管理器-KeePass</title>
      <link>http://localhost:8888/posts/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8-keepass/</link>
      <pubDate>Sat, 09 Jul 2022 19:11:40 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8-keepass/</guid>
      <description>KeePass 安装 下载与安装
官网： https://keepass.info/download.html
下载完成后进行安装，默认安装位置是：C:\Program Files (x86)\KeePass Password Safe 2文件夹下，可以根据自己需要选择安装路径。
更改中文语言
中文语言包： KeePass-Chinese_Simplified
将语言包下载后复制到安装路径下的Languages文件夹下，默认为：C:\Program Files (x86)\KeePass Password Safe 2\Languages。重启软件。
点击 View-&amp;gt;Change Language. 选择中文简体（Chinese-Simplified）。重启软件，即可完成语言更改。
中文界面：
基本使用 1.创建一个数据库
点击 文件-》新建。弹出对话框为数据库创建管理密码。这个密码是唯一需要记忆的密码。当然如果追求更高的安全性，可以点击显示高级选项，提供更多的密码选项。
2.添加记录
点击添加记录，在弹出的窗口填入相关信息。即可完成密码添加。
如果是第一次使用的网站，第一次注册密码。可以通过密码生成器，生成一个高强度的密码来添加记录。
3.创建一个密码生成模板
正常国内的网站可以使用的密码长度 6-16 位，可以使用大小写，数字，下划线。我们把这些选项勾选，密码长度设置 16 位。
点击保存并给模板设置个名字方便下次使用
如果保存后想更改一下，比如再加个可以使用空格，可以重新勾选刚刚的选项，保存时点击小三角，选择刚刚保存的方案就可以覆盖。
导入 Chrome 已保存的密码
很多小伙伴在使用 KeePass 之前肯定在 Chrome 等浏览器里也保存了很多密码。想将其导入 KeePass 方便管理。Chrome 是可以导出密码的，KeePass 也可以导入密码。
点击浏览器右上角，打开设置界面。找到密码
找到已保存的密码-》导出密码。选择方便找到的路径，保存密码记录。
打开 KeePass，点击文件-》导入，选择 Chrome 浏览器的格式。点击文件夹图标找到刚刚导出的密码文件。
高级配置 KeePass 搭配坚果云实现云同步 登录坚果云创建个人同步文件夹，若没有先注册。
最好单独建一个专门的文件夹
将已经生成的数据库上传到这个文件夹下
点击右上角进入账户信息，点击安全选项：
点击添加应用
输入应用名称，应用名称只是方便区分作用，所以和要同步的应用名称一致就好：
点击生成密码：
此时云盘端配置完成，切回到 KeePass 进行客户端配置。点击文件-》同步-》与网址（URL）同步</description>
    </item>
    <item>
      <title>替换 Gitee 图床为腾讯云 COS</title>
      <link>http://localhost:8888/posts/%E6%9B%BF%E6%8D%A2gitee%E5%9B%BE%E5%BA%8A%E4%B8%BA%E8%85%BE%E8%AE%AF%E4%BA%91cos/</link>
      <pubDate>Sat, 09 Apr 2022 16:43:08 +0000</pubDate>
      <guid>http://localhost:8888/posts/%E6%9B%BF%E6%8D%A2gitee%E5%9B%BE%E5%BA%8A%E4%B8%BA%E8%85%BE%E8%AE%AF%E4%BA%91cos/</guid>
      <description>Gitee 图床挂了，但是各大云服务厂商提供的对象存储服务免费额度，对于个人小博客来说也够用了。下面介绍如何将图床更换为腾讯云 COS。
下载原有图片 从gitee下载整个仓库。保持原有目录结构。
配置腾讯云 COS 注册腾讯云账号，创建 COS 存储桶，选择公有读私有写。创建 COS 存储桶地址：https://console.cloud.tencent.com/cos，创建存储桶后可以在存储桶里打开防盗链设置。
创建桶&amp;ndash;选择地域&amp;ndash;填写名称&amp;ndash;选择公有读私有写&amp;ndash;点击创建。
如果忘了设置读写权限可以按一下方法设置； 选择菜单&amp;ndash;文件列表。上传下载好的文件夹（整个仓库的文件夹）。鼠标放到选择文件出现上传文件夹选项，或者将文件夹拖入浏览器。
配置 Picgo COS 版本：V5 设定 Secreid，设定 Secrekey，设定 APPID： APPID、SecretID 与 SecretKey 点此直达获取。 选择继续使用&amp;ndash;创建秘钥。
设定存储空间名，设定存储区域： 点此获取存储空间名以及存储区域。桶名称即存储空间名，所属区域：ap-shanghai即确认存储区域。
指定存储区域： 指定上传到 COS 的目录，比如我原先从gitee下载来的图床的仓库名是markdown_picbed，图片又保存在markdown_picbed/img目录下，那么就指定markdown_picbed/img目录。
替换旧图床 URL VSCode 全局替换：</description>
    </item>
    <item>
      <title>Windows 批处理定时任务</title>
      <link>http://localhost:8888/posts/windows%E6%89%B9%E5%A4%84%E7%90%86%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Wed, 05 Jan 2022 22:39:03 +0000</pubDate>
      <guid>http://localhost:8888/posts/windows%E6%89%B9%E5%A4%84%E7%90%86%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
      <description>折腾背景 一些常用的离线软件在重新安装，重装电脑或者更好环境时，调教好的配置总需要重新设置一遍，甚是麻烦。但是这些设置通常都保存在配置文件里，只要能备份好这些配置文件，下次重装后覆盖就可以恢复所需设置。
现在的问题就是如何备份这些配置文件，可以选择各类网盘，硬盘等等。但是这些多少都有点炮打蚊子，小题大做。而且定时备份也不是很方便。既然配置文件都很小，其实就是个文本文件，那有个万能免费存储地 GitHub 就派上用场了。我们只要把配置文件定时 push 到 GitHub 即可，以后随时可以 clone 下来。
首先建立一个私密仓库，用来专门存放配置文件。其次通过批处理命令，将配置文件复制到本地仓库的文件夹下。最后设置定时任务。
折腾过程 新建仓库 这一步不用赘述了，主要就是要勾选私密仓库，保护隐私，一些配置文件可能会包含个人信息。
批处理 将仓库克隆到本地后就是个文件夹，这一步主要就是如何能把安装在不同位置的软件的配置文件，都汇集到这个仓库下。通过批处理命令可以快速，方便的完成。
echo Start backup config files! # 打印这句话 copy D:\Tools\MouseInc\MouseInc.json D:\Develop\fxxk-config\mouseinc # 将前者复制到后者 copy D:\Tools\JD\Config.ini D:\Develop\fxxk-config\jd cd /d D:\Develop\fxxk-config # 切换目录 # git推送的一些命令 git add . git commit -m &amp;#34;update&amp;#34; git push # 防止窗口闪退 pause 一些常用命令参考WindowDos 批处理指导。
定时任务 控制面板-管理工具 - 任务计划程序 </description>
    </item>
    <item>
      <title>Clang-Format 格式化代码</title>
      <link>http://localhost:8888/posts/clang-format%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 01 Dec 2021 17:42:45 +0000</pubDate>
      <guid>http://localhost:8888/posts/clang-format%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81/</guid>
      <description>安装 Linux sudo apt-get install clang-format windows 每每到这时候就越能感受到用 Linux 作为开发环境的优势，Windows 安装就稍显复杂了。
你可以选择安装完整的 LLVM，在bin目录可以看到clang-format.exe。安装完后，将 bin 目录添加到环境变量中。
你也可以只下载clang-format.exe，从LLVM Snapshot Builds下载安装包。在下载页面的底部。同样你需要将单独下载的文件加入到环境变量中。
使用 入门使用 Linux 可以直接命令行，使用以 LLVM 代码风格格式化main.cpp, 结果直接写到main.cpp
clang g-format -i main.cpp -style=LLVM 进阶配置 如果每次编码都命令行执行一遍那也太麻烦了，而且每次修改也不止一个文件。最好的方式就是每次保存文件时自动格式化。比如 VSCode 已经内置了Clang-Format稍作配置即可实现，接下来介绍几种常见 IDE 如何配置Clang-Format。
VSCode VSCode 最常用，因为内置了Clang-Format也最容易配置。
安装C/C++插件，Ctrl+Shift+X打开应用商店，搜索C/C++找到下图插件，安装后会自动安装Clang-Format程序，无需单独下载。默认安装路径为： C:\Users\(你的用户名)\.vscode\extensions\ms-vscode.cpptools-1.7.1\LLVM\bin\clang-format.exe。 打开设置页面（左下角齿轮 - 设置），搜索format，勾选Format On Save，每次保存文件时自动格式化文档。下方的设置是决定每次格式化是整个文档，还是做过修改的内容。默认是file，对整个文档进行格式化。 仍在设置页面搜索Clang，配置如下。.clang-format文件最后详解。 效果图 QtCreator 安装Beautifier插件：帮助（Help）-关于插件（About Plugins）- Beautifier勾选，重启 QtCreator。 工具（Tool）- Beautifier，配置如图。该配置，保存文档时自动格式化，并选择Clang-Format作为格式化工具。 配置Clang-Format程序路径，如果开头已经apt install安装过，这里会自动补全。 Use predefined style可以选择内置的一些代码风格，如LLVM，Google等。 Use customized style使用自定义的一些代码风格。点击添加（Add）将配置文件粘贴进去即可，具体配置文件见最后。 别忘了点击OK保存。 Eclipse 安装cppstyle插件：Help - Eclipse Marketplace - 搜索cppstyle。</description>
    </item>
    <item>
      <title>oh-my-zsh 让你的终端更加顺手（眼）</title>
      <link>http://localhost:8888/posts/oh-my-zsh%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%8A%A0%E9%A1%BA%E6%89%8B%E7%9C%BC/</link>
      <pubDate>Sun, 29 Aug 2021 09:56:21 +0000</pubDate>
      <guid>http://localhost:8888/posts/oh-my-zsh%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%8A%A0%E9%A1%BA%E6%89%8B%E7%9C%BC/</guid>
      <description>效果 主题：evan
主题：dallas
主题：robbyrussell
如果原先其他电脑安装过 把.oh-my-zsh整个文件夹，.zshrc，.zsh_history复制到/home/user/目录；
安装zsh
sudo apt install zsh 切换shell
chsh -s /bin/zsh source ~/.zshrc 即可使用。所有配置都会和原先一样。
如果是新安装 官方方法，curl和wget二选一即可
curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh 应该也有人和我一样，可能会遇到连接 GitHub 失败的问题，要不就是 SSL 验证失败，要不就是连接无响应。可以更换下面的方法。
# 先下载 git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh ## 再替换 cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 重启终端即可成功。
如果无法访问 GitHub，其实oh-my-zsh并不需要安装，完整的工程就是oh-my-zsh本体，只要想办法把整个工程下载下来，并重命名为oh-my-zsh即可。所以找找 gitee 有没有相关工程。这也是为什么从旧电脑里直接复制.oh-my-zsh就能用的原因。
问题 oh-my-zsh.sh parse error near `&amp;laquo;&amp;lt;&#39; 一般是在更新oh-my-zsh时出现，因为更新相当于就是从远程拉取了内容，可能本地的oh-my-zsh.sh脚本自己做了修改与远程冲突了。只要退回上个版本，重新拉取就可以了。
cd $ZSH git reset --hard HEAD^ git pull --rebase 如果本地修改了一些内容需要保留，可以打开oh-my-zsh.sh看看冲突在哪，自己做个备份，保存一下。</description>
    </item>
  </channel>
</rss>
